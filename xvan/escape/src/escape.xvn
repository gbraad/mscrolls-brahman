
#============================

# Story for XVAN 2.3.4
#============================

#=====================
# Story info 
#=====================

TITLE         "Stairs"
VERSION       "1.0"
AUTHOR        "Marnix van den Bos"
ORGANIZATION  "XVAN"
COVERTEXT     "A sample XVAN story"
BACKIMAGE     "images\\\\coverimage.jpg"  # need '\\' in json string
PRIMARY_COLOR "blue"

#=====================
# Use the starter kit 
#=====================

$insert ".\\ENG-starterkit\\starterkit.xvn"

#========================
# Story specific includes 
#========================

$insert "my-includes\\my-includes.xvn"

#===========================     
# Locations part
#===========================

#-------------------------------------------------------------------------------
$LOCATION l_hallway_south
 DESCRIPTIONS
   d_sys        "the south hallway"

   d_entr_long  "You are in the south hallway. To the north are stairs leading /
                 up. To the west is a passage to the living room and a passage /
                 to the east is blocked by a [o_grating].\n"

   d_entr_short "A passage to the east is blocked by a [o_grating].\n"

 EXITS
   n -> l_halfway
   u -> l_halfway
   w -> l_living_south

 FLAGS
   f_seenbefore = 1 # for ifi-xvan, reset in t_init

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_entrance
     move(o_stairs, %this)  # must be able to refer to stairs
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_hallway_north
 DESCRIPTIONS
   d_sys        "the north hallway"

   d_entr_long  "You are in the north hallway. To the west is a passage to the /
                 living room. The hallway continues north to the kitchen.\n"

 EXITS
   n -> l_kitchen
   w -> l_living_north

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 3
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_south
 DESCRIPTIONS
   d_sys        "the south part of the living room"

   d_entr_long  "This is the living room. It's completely abandoned. There is an /
                 exit to the hallway to the east.\n"

 EXITS
   e -> l_hallway_south
   n -> l_living_middle

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "north"   -> t_north
   "ifi_map" -> t_ifi_place

   t_north
     # must be able to refer to the closet door
     o_closet_door.r_direction = east
     o_closet_door.r_access    = o_closet_door.d_closet
     move(o_closet_door, l_living_middle)
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_middle
 DESCRIPTIONS
   d_sys        "the middle part of the living room"

   d_entr_long  "You are in the middle part of the living room.\n"

 EXITS
   n -> l_living_north
   s -> l_living_south

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 4
  r_ifi_maplevel = 1

 TRIGGERS
   "east"    -> t_east
   "ifi_map" -> t_ifi_place

   t_entrance
     # we want to execute all t_entrance triggers before we print Fred's text
     if runcommon() then
       synchronize(%this, t_entrance, f_any, 1, 0)
       if not(testflag(o_npc.f_seenbefore)) then
         setflag(o_npc.f_seenbefore)
         printcr(o_npc.d_not_met_before)
         move(o_npc, l_dial_room)
       endif
     endif
     disagree()

   t_east
     printcr("[the] [o_closet_door] is closed.")
     disagree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_north
 DESCRIPTIONS
   d_sys        "the north part of the living room"

   d_entr_long  "This is the living room. It's completely abandoned. There is an /
                 exit to the hallway to the east.\n"

 EXITS
   s -> l_living_middle
   e -> l_hallway_north

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 3
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map"  -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_kitchen
 DESCRIPTIONS
   d_sys        "the kitchen"

   d_entr_long  "This is the kitchen. There is not much here. The /
                 hallway is to the south.\n"

 EXITS
   s -> l_hallway_north

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 2
  r_ifi_maplevel = 1

 TRIGGERS
   "n"       -> t_north
   "s"       -> t_south
   "ifi_map" -> t_ifi_place

  t_entrance
    move(o_kitchen_door, %this)  # must be able to refer to the door
    l_json.r_maptext = o_player.d_maptext_house
    nomatch()
   
   t_north
     if testflag(o_kitchen_door.f_locked) then
       printcr("The kitchen door is locked.")
     else
       if not(testflag(o_kitchen_door.f_open)) then
         printcr("(opening the kitchen door first).")
         setflag(o_kitchen_door.f_open)
         newexit(l_kitchen, north, l_garden)
       endif
       move(o_player, n)    # also updates current location
       entrance(l_location)
     endif
     disagree()  # prevent o_player.t_move to execute the "n" command

   t_south
     # must be able to refer to the closet door
     o_closet_door.r_direction = east
     o_closet_door.r_access    = o_closet_door.d_closet
     move(o_closet_door, l_hallway_north)
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_garden
 DESCRIPTIONS
   d_sys        "the garden", "the hedges", "the hedge"

   d_entr_long  "You are in the garden at the back of the house. East and west /
                 there are hedges. To the north is a garden shed.\n"

   d_hedges     "The hedges are very thick. You cannot go through them (actually "
                "they are a boundary of the game world)."

 EXITS
   s -> l_kitchen
   n -> l_shed

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 1
  r_ifi_maplevel = 1

 TRIGGERS
  "east"    -> t_hedges
  "west"    -> t_hedges
  "ifi_map" -> t_ifi_place

  t_entrance
    move(o_kitchen_door, %this)  # must be able to refer to the door
    l_json.r_maptext = o_player.d_maptext_outside
    nomatch()

  t_hedges
    printcr(d_hedges)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_shed
 DESCRIPTIONS
   d_sys        "the garden shed"

   d_entr_long  "You are now in the garden shed. The shed hasn't been cleaned /
                 for a long time. Maybe never. On the walls you see the nails /
                 that were used to hang the garden utensils to. Almost all of /
                 them are gone now.\n"

   d_entr_short "Garden shed"

 EXITS
   s -> l_garden

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 0
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_halfway
 DESCRIPTIONS
   d_sys        "halfway"

   d_entr_long  "You are now halfway up the stairs. The stairs continue up /
                 to the north and down to the south.\n"

   d_up_closed  "When you walk further up the stairs one of the steps makes /
                 a hollow sound. You try to pinpoint it but get no further /
                 than that it is somewhere in the upper half of the stairs.\n"

   d_up_open    "You carefully step over step 11, so you don't fall down /
                 into the closet.\n"

 EXITS
   n -> l_upstairs
   u -> l_upstairs
   s -> l_hallway_south
   d -> l_hallway_south

 ATTRIBUTES
  r_ifi_gx   = 1
  r_ifi_gy   = 4
  r_ifi_maplevel = 2

 TRIGGERS
   "up"      -> t_up
   "north"   -> t_up
   "down"    -> t_down
   "ifi_map" -> t_ifi_place
   
   t_entrance
     printcrbold(%this)
     setflag(f_seenbefore)
     print(d_entr_long)
     move(o_stairs, %this)  # must be able to refer to stairs
     agree()

   t_up
       if testflag(o_button.f_pressed) then
       # step 11 is open
       printcr(d_up_open)
     else
       printcr(d_up_closed)

   t_down
     # must be able to refer to the closet door
     o_closet_door.r_direction = west
     o_closet_door.r_access    = o_closet_door.d_living
     move(o_closet_door, l_closet)
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_upstairs
 DESCRIPTIONS
   d_sys         "upstairs"

   d_entr_long   "You are upstairs. Behind you, the stairs lead down. There /
                  is an exit to the west.\n"

   d_down_closed "When you walk down, one of the steps makes a hollow sound. /
                  You try to pinpoint it but get no further than that it is /
                  at the top half of the stairs.\n"

   d_down_open  "\nYou carefully step over step 11, so you don't fall down /
                 into the closet."

 EXITS
   s -> l_halfway
   d -> l_halfway
   w -> l_bedroom

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 3
  r_ifi_maplevel = 3

 TRIGGERS
   "down"    -> t_down
   "south"   -> t_down
   "ifi_map" -> t_ifi_place
   
   t_entrance setflag(f_seenbefore)
     move(o_stairs, %this) # must be able to refer to stairs
     nomatch()

   t_down
     if testflag(o_button.f_pressed) then
       # step 11 is open
       printcr(d_down_open)
     else
       printcr(d_down_closed)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_bedroom
 DESCRIPTIONS
   d_sys        "the bedroom"

   d_entr_long  "This location used to be a bedroom a long time ago. But /
                 now, there is nothing there. All furniture has been /
                 removed.\n"

   d_exa        "Mounted to the west wall are a water tap and a sink."

 EXITS
   e -> l_upstairs

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 3
  r_ifi_maplevel = 3

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_entrance
    printcrbold(%this)
     if not(testflag(f_seenbefore)) or testflag(o_player.f_verbose) then
       # first visit or verbose mode
       setflag(f_seenbefore)
       printcr(d_entr_long)
     endif

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_closet
 DESCRIPTIONS
   d_sys        "the closet"

   d_entr_long  "You are in a dark closet below the staircase.\n"

   d_leave      "\nThe heat is getting too much for you. You hurry back up to the /
                 stairs where it is much cooler."

 EXITS
   u -> l_halfway
   d -> l_chest_room

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 4
  r_ifi_maplevel = 0

 TRIGGERS
   "down"    -> t_down
   "ifi_map" -> t_ifi_place
   
   t_entrance
     printcrbold(%this)
     setflag(f_seenbefore)
     printcr(d_entr_long)
     if not(testflag(o_trapdoor.f_hidden)) then
       printcr("Visible exits are up and down.")
     else
       printcr("The only visible exit is up.")
     endif

   t_down
     if testflag(o_trapdoor.f_hidden) then
       printcr("There is no obvious exit leading down.")
       disagree()
     else
       if not(testflag(o_trapdoor.f_open)) then
         printcr("The trapdoor is closed.")
         disagree()
       else
         move(o_trapdoor, l_chest_room)
         nomatch()  # let o_player.t_move handle this

   t_leave
     # timer m_heat has fired
     stoptimer(m_heat)
     m_heat = 3
     printcr(d_leave)
     move(o_player, u)
     printcr("")
     printcrbold(l_halfway.d_entr_short)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_chest_room
 DESCRIPTIONS
   d_picture_closed "images\\\\Chestroom closed.Png"
   d_picture_open   "images\\\\Chestroom open.Png"

   d_sys         "the chest room"

   d_entr_long   "This is a room with an exit leading east.\n"

   d_burning     "You walk down the stairs. Down below you see the red glow /
                  of a fire. As you walk down further, it gets hotter and /
                  hotter. You realize you will be fried if you continue and /
                  you hurry back up the stairs."

   d_not_burning "There is still a lot of smoke, but through the clearing /
                  haze you can make out an old chest and an exit to the /
                  east.\n\n"
                 "On the chest is [a] [o_lamp].\n\n"
                 "Above you, the trap door slams shut. It is now pitch black."

   d_no_go       "When you want to exit the room you feel there is a force /
                  holding you back. The [o_key] vibrates slightly."

 EXITS
   u -> l_closet
   e -> l_dial_room

 FLAGS
   f_tried_before = 0

 ATTRIBUTES
   r_ifi_gx       = 1
   r_ifi_gy       = 4
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture_closed


 TRIGGERS
   "go east"                     -> t_go
   "examine [o_generic_ceiling]" -> t_exa_ceiling
   "ifi_map"                     -> t_ifi_place

   t_entrance
     if equal(%dir, d) then
       # they came from the closet      
       if testflag(o_flames.f_extinguished) then
         printcr(d_not_burning)
         blockexit(%this, up)
         clearflag(o_trapdoor.f_open)
         clearflag(o_npc.f_seenbefore)  # Fred must print one-time message
         print("\n\n")
         clearflag(o_player.f_lit)  # here below, it's darkness
         l_json.r_maptext = o_player.d_maptext_basement
       else
         if not(testflag(f_tried_before)) then
           setflag(f_tried_before)
           printcr(d_burning)
         else
           printcr("There's flames down there, remember?")
         endif
         move(o_player, u)
       endif
       agree()
     else
       if runcommon() then
         agree()
       endif

   t_go
     if owns(o_player, o_key) then
       printcr(d_no_go)
       disagree()        # stop further processing. If we omit this,
                         # the user will be moved to the dial room
                         # with the key and cannot return
     else
       nomatch()         # act as if there was no match.

   t_exa_ceiling
     printcr("There is a closed trap door in the ceiling.")
     disagree()        # important, otherwise ceiling object will also reply.

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_dial_room
 DESCRIPTIONS
   d_picture       "images\\\\Dialroom.Png"

   d_sys           "the dial room"

   d_entr_long     "This is a room with exits leading west, southwest /
                    and northeast."
                   "On the wall are three dials: [a] [o_red_dial], [a] /
                    [o_green_dial] and [a] [o_blue_dial]\n."
                   "Below the dials are [a] [o_red_button], a [o_green_button] /
                    and [a] [o_red_button]. The buttons have text engraved.\n\n"
                   "There is also [a] [o_black_button] here, with an engraving.\n"

   d_solved_dials1 "You hear a squeeking noise. Looking at the [o_dials], you /
                    see that all three hands point to the number 8. At the /
                    same time, the door in the south wall moves back a few /
                    inches and turns 180 degrees revealing a metal ladder on its /
                    other side. Then the door retracts further. What remains /
                    is a small alcove to the south with a ladder leading up."

   d_solved_dials2 "You hear a squeeking noise. It looks like it's coming from [the] /
                    [l_dial_room]. Maybe you better check it out..."

 EXITS
   w  -> l_chest_room
   sw -> l_passageway
   ne -> l_vault_room

 FLAGS
   f_solved_dials   = 0
   f_tried_with_key = 0

 ATTRIBUTES
   r_ifi_gx       = 2
   r_ifi_gy       = 4
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture

 TRIGGERS
   "look"    -> t_entrance
   "ifi_map" -> t_ifi_place

   t_entrance
     # remove the south wall because o_door will handle it
     # this prevents a 'which south wall do you mean' conflict.
     # o_door also listens to 'south wall'
     if not(testflag(o_door.f_open)) then
       move(o_south_wall, l_storage)
     endif
     nomatch()       

   t_exit
     # restore the south wall
     move(o_south_wall, o_player)
     agree()

   t_check_dials
     # This trigger is fired each move by timer m_check_dials, until the
     # dial puzzle is solved.
     
     # Dials count from 0 to 9, so correct the timer value when necessary

     #######################################################################################
     # one solution: press green button, press red button, wait, press blue button, wait 5 #
     #######################################################################################

     # now check if they solved the puzzle
     if equal(m_red_dial, 8) and equal (m_green_dial, 8) and equal (m_blue_dial,8) then
       newexit(l_dial_room, south, l_escape_room)
       setflag(o_door.f_open)
       move(o_south_wall, o_player)
       
       # Hide the door, so it will no longer get action records. We want
       # the door to stop responding to entrance and exit and so on.
       # We can also not hide the door but then we have to redefine
       # all its common triggers with a check whether it's opened.
       setflag(o_door.f_hidden)

       setflag(f_solved_dials)
       stoptimer(m_red_dial)
       stoptimer(m_green_dial)
       stoptimer(m_blue_dial)
       stoptimer(m_red_hand)
       stoptimer(m_green_hand)
       stoptimer(m_blue_hand)
       stoptimer(m_check_dials)     # no more checking, they solved it

       setflag(o_door.f_hidden)     # hide the door
       
       if owns(%this, o_player) then
         # player is in the room
         printcr("")
         printcr(d_solved_dials1)
       else
         printcr(d_solved_dials2)
       endif
       # increase the score
       printcr("")
       printcritalic("Your score just went up by 50 points.")
       o_player.r_score += 50
     endif
     # reset m_check_dials for next check
     m_check_dials = 0
     settimer(m_check_dials, 0)
     agree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_passageway
 DESCRIPTIONS
   d_picture     "images\\\\Passageway.Png"
   d_sys         "a passageway"
   d_entr_long   "This is a small passageway, with exits leading north and northeast."
   d_entr_short  ""

 EXITS
   n  -> l_chest_room
   ne -> l_dial_room

 FLAGS
   f_tried_with_key = 0

 ATTRIBUTES
   r_ifi_gx       = 1
   r_ifi_gy       = 5
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_vault_room

 DESCRIPTIONS
   d_picture_closed "images\\\\Vaultroom closed.Png"
   d_picture_open   "images\\\\Vaultroom open.Png"

   d_sys            "the vault room"

   d_entr_long      "This is a room with an exit leading south."

   d_entr_short     "To the south is an exit."

 EXITS
   s -> l_dial_room

 FLAGS
   f_lit            = 1   # otherwise Fred cannot see the vault when he is alone
   f_player_visited = 0   # player has not been here yet

 ATTRIBUTES
   r_ifi_gx       = 3
   r_ifi_gy       = 3
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture_closed

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_exit
     setflag(f_player_visited)     

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_alcove
 DESCRIPTIONS
   d_sys        "the alcove"

   d_entr_long  "You are in the alcove, a pretty narrow space.\n"

   d_look       "You see light coming in."

 EXITS
   u -> l_east_of_grating
   n -> l_dial_room

 ATTRIBUTES
   r_ifi_gx       = 2
   r_ifi_gy       = 5
   r_ifi_maplevel = 0

 TRIGGERS
   "up"      -> t_up
   "look up" -> t_look

   t_entrance
     l_json.r_maptext = o_player.d_maptext_basement
     nomatch()

   t_up
     # going up from the alcove is handled by the ladder object
     agree()

   t_look
     printcr(d_look)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_west_wall

 DESCRIPTIONS
   d_sys     "the west wall"
             # west wall is a separate object because of the
             # lever in the alcove (in the west wall) and 
             # the row of photo's (3 living room locations)

   d_alcove "There is a [o_lever] in the [o_west_wall]."

 CONTAINED in o_player

 TRIGGERS
   "examine [o_west_wall]" -> t_exa
   "look at [o_west_wall]" -> t_exa

   t_entrance
     agree()

   t_exa
     if owns(l_alcove, %this, 0) then
       printcr(d_alcove)
     else
       if owns(l_location, o_row_photos) then
         printcr(o_row_photos.d_entr_long)
       else
         if trigger(o_generic_wall.t_exa) then
           agree()

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_east_of_grating
 DESCRIPTIONS
   d_sys        "East of grating"

   d_entr_long  "You are in a corridor on the other side of the grating. The /
                 corridor continues to the east. A passage to the west is /
                 blocked by a [o_grating].\n"

   d_entr_add1  "\nYou can go back down to the alcove."

   d_close      "You firmly pull the [o_rope]. You feel the lever switching /
                 into the up position. The alcove's south wall swings up /
                 and latches. Fortunately, the rope slipped off the lever /
                 just before the wall closed. You hear a faint click from /
                 within the clamp."
                  
 EXITS
   d -> l_alcove
   e -> l_escape_hallway

 ATTRIBUTES
  r_ifi_gx       = 2
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "pull [o_rope]" -> t_pull

   t_entrance
     l_json.r_maptext = o_player.d_maptext_house
     if runcommon() then
       if valdir(%this, down) then
         printcr(d_entr_add1)
     
   t_pull
    if equal(o_rope.r_tied_to, o_lever) then
      printcr(d_close)
      blockexit(%this, down)
      clearflag(o_clamp.f_locked)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_escape_hallway
 DESCRIPTIONS
   d_sys        "the escape hallway"

   d_entr_long  "You are in an east-west hallway. The way to the west leads /
                 back to [l_east_of_grating]. Other exits are to the east /
                 and to the south.\n"
                "Looking into the south exit, you notice an [o_inscription] /
                 in the wall\n."

   d_entr_short "There is an exit to the south.\n"

 EXITS
  w -> l_east_of_grating
  s -> l_dark_place

 ATTRIBUTES
  r_ifi_gx       = 3
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   t_entrance
     move(o_inscription, %this)
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_dark_place
 DESCRIPTIONS
   d_sys      "the dark place"

   d_entr_long  "You are in a dark place. It is very dimly lit and the only /
                 thing you can make out is [a] [o_inscription] on the /
                 [o_south_wall].\n"

   d_entr_short "The only thing you can make out is [a] [o_inscription ] on /
                 the [o_south_wall].\n"

   d_dead       "The moment you step to the [dir] you feel the floor /
                 open up under your feet. During your fall down you have a /
                 flashback and you see yourself examining the photo gallery /
                 in the living room. 'Wasn't Tom the guy who didn't make it' /
                 is the last thing that goes through your mind..."
                 "\n\n            *** You didn't make it ***\n\n"

   d_retry      "Fred is here. He looks at you and shakes his head. 'You /
                 really should have checked out these photos better, buddy. /
                 He pulls out his tablet and starts typing. I'll put you /
                 back on your feet, but it'll cost you 30 points. Try to be /
                 more careful now, will you?\n\n"
                 "Happy adventuring!"    

 EXITS
   n -> l_escape_hallway

 FLAGS
   f_died_before = 0

 ATTRIBUTES
  r_ifi_gx       = 2
  r_ifi_gy       = 6
  r_ifi_maplevel = 1

 TRIGGERS
   "[dir]" -> t_move

   t_entrance
     move(o_inscription, %this)
     nomatch()

   t_move
     if equal(%dir, north) then
       nomatch()
     else
       printcr(d_dead)
       printcr("Hit a key to continue.")
       printcr(d_retry)
       move(o_player, l_east_of_grating)
       entrance(l_east_of_grating)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_escape_room

 DESCRIPTIONS
   d_picture     "images\\\\Escaperoom.Png"

   d_sys         "the escape room"

   d_entr_long   "This is a room with an exit leading south."

   d_entr_short  "There is an exit to the south."

 EXITS
   s  -> l_passageway

 ATTRIBUTES
   r_ifi_gx      = 1
   r_ifi_gy      = 2
   r_ifi_picture = d_picture
   r_ifi_maplevel    = 4

 TRIGGERS
   "look up" -> t_look_up
   "ifi_map" -> t_ifi_place

   t_look_up
     printcr("There is [a] [o_hole] in the ceiling.")
     agree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_exit

 # When the player reaches this location, the story is over
 DESCRIPTIONS
   d_picture    "images\\\\Exit.Png"

   d_sys        "the roof"

   d_entr_long  "You're on the roof of a white building, basking in sunshine. Around you, /
                 you see green meadows and a small river meandering through the meadows."
                "To the west is [a] [o_ladder]."

   d_entr_short "There is [a] [o_ladder] to the west."

   d_fred_calls "\n\nYou hear Fred calling you from below in [the] [l_escape_room]."

   d_give_watch "Looking down the hole, you see Fred looking back at you. Congratulations, /
                 you made it out of here. As a reward, I will give you this fine [o_watch]. /
                 Fred takes the watch off his wrist and ties it to the other end of the /
                 rope. This is for you. It was nice meeting you, I hope you enjoyed this /
                 little sample XVAN game. I'll go now and wait for the next adventurer.\n\n"
                "Fred leaves the room."

   d_rope       "Looking down the hole, you see that Fred is gone. [the] [o_watch] is tied /
                 to the end of the rope."

   d_no_pull    "The rope seems to be stuck. It is like someone in [the] [l_escape_room] /
                 is pulling it back."

   d_pull       "Slowly, so the watch won't fall off, you pull up the rope. You untie the /
                 watch and put it on your wrist. When you move your arm, [the] [o_watch] /
                 sparkles in the sunshine. It really is a beautiful watch.\n\n"
                "You can't help but feel a bit sorry for Fred. He has to stay in this /
                 small sample story. But - you tell yourself - he seems to like it here /
                 and you ask yourself whether he would be able to survive in the real /
                 world outside his seven test locations..."
   d_exit       "\n\n\nYou made it!\n"
                "Here should be a section with proze congratulating you and drawing /
                 your attention to the sequel. But as I said in the description /
                 document, I am not an author. It was my intention to give an /
                 impression of XVAN's possibilities with this sample story /
                 and I hope I succeeded.\n\n"
                 "-- thank you for playing --"  

 FLAGS
   f_fred_gone   = 0

 ATTRIBUTES
   r_ifi_gx      = 2
   r_ifi_gy      = 1
   r_ifi_picture = d_picture
   r_ifi_maplevel    = 2

 TRIGGERS
   "look down"     -> t_look_down
   "pull [o_rope]" -> t_pull
   "go down"       -> t_down
   "go west"       -> t_west
   "ifi_map"       -> t_ifi_place

   t_entrance
     setflag(f_seenbefore)
     printcrbold(d_entr_short)
     printcr(d_entr_long)
     if not(testflag(f_fred_gone)) then
       printcr(d_fred_calls)
     endif
     move(o_rope, %this)  # must be able to refer to the rope
     agree()

   t_down
     printcr("You've just escaped from there. There's no need going back...")

   t_west
     printcr("That would make this sample story too large...")

   t_look_down
     if not(testflag(f_fred_gone)) then
       printcr(d_give_watch)
       move(o_npc, l_storage)
       setflag(f_fred_gone)
     else
       printcr(d_rope)

   t_pull
     if not(testflag(f_fred_gone)) then
       printcr(d_no_pull)
       disagree()         # o_rope also has a t_pull trigger
     else
       printcr(d_pull)
       printcr(d_exit)
       quit()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_storage
 # This location is used to store objects that are removed
 # from the story. It is not accessible to the player
 DESCRIPTIONS
   d_sys "Storage"

END_LOC
#-------------------------------------------------------------------------------

#======================
# OBJECTS part
#======================


#-------------------------------------------------------------------------------
$OBJECT o_player

 # The o_player object is mandatory and represents the human player.

 DESCRIPTIONS
   d_sys  "You", "me"

   d_exa  "The avarage adventurer"

   d_init "Suddenly you are here. You have no recollection of anything. Your /
           mind is empty, like it just started.\n\n"
          "It looks like you are in a house, but then again, it looks like /
           you're not. It's like you're in all rooms at the same time. You /
           see a kitchen and a bedroom, but somehow you can also see through /
           it. The /
           house merges with the outside world. It's like your surroundings /
           are not yet finished.\n\n"
          "You faintly see a garden, hedges and meadows. Looking down, you /
           can also make out blue, red and green objects in the near /
           distance and a shiny object that looks like gold.\n\n"
          "Very weird...\n\n"
          "Someone walks into the room. A big nondescript guy. He is carrying /
           a tablet. When he sees you he looks surprised and a bit confused.\n\n"
          "'What's going on? Who put you in here already? The world isn't even /
           finished, yet. They all know that the player object should only be /
           enabled during he final test cases and regression tests. We're /
           not that far yet!'\n\n"
          "He looks at you and smiles. 'I'm sorry buddy. This shouldn't have /
           happened. I'm going to fix this right away.'\n\n"
          "After a few swipes on the tablet screen he starts typing. You hear /
           him mumbling something about 'commenting out' and "
          "'recompiling'.\n\n"
          "And then everything goes black again....\n\n"

   d_init1 "\n========================= I N T R O D U C I N G  X V A N ======================\n\n"
           "This is a short sample story for XVAN 2.3.4.\n"
           "It has 24 locations and 61 objects, including the player and one npc named Fred.\n"
           "The story contains several puzzles and you need to interact with /
            Fred to solve some of them. You have one goal: escape.\n\n"
           "==============================================================================="

   d_help "The source file for this game is part of the distribution. If you are /
           really stuck, cheat by checking the source code."

   d_maptext_basement "Basement"
   d_maptext_house    "House"
   d_maptext_outside  "Outside"
   d_maptext_escape   "Escape! level"

 CONTAINED in l_hallway_south

 FLAGS
   f_lit         = 1
   f_alive       = 1
   f_may_save    = 1
   f_verbose     = 0
   f_first       = 1
   f_verb_help   = 1
   f_cheater     = 0  # tells whether the player cheats with the vault code.

 ATTRIBUTES
   r_is           = are
   r_have         = have
   r_do           = do
   r_nr_to_reveal = 0
   r_random       = 0
   r_score        = 0
   r_max_score    = 150  # 3 times 50
   r_key_blocked  = 0

 TRIGGERS
   "[dir]"       -> t_move
   "go to [dir]" -> t_move
   "zwoosh"      -> t_zwoosh

   t_zwoosh
     print("\"Marnix\"")

   t_entrance
     agree()

   t_entrance_dark
     agree()

   t_exit
     agree()

   t_init
     # This trigger initializes things. It is started by timer
     # m_init that goes off right away.

     l_json.r_maptext      = d_maptext_house
     l_json.r_ifi_maplevel = 1

     # send map title to gui
     if try(l_json, 0, "ifi_map") then endif

     background(blue)       # blue background with white text
     printcr(d_init)        # print opening message

     print("Hit a key...")
     hitanykey()
     clearscreen()
     printcr(d_init1)

     # restore f_seenbefore for south hallway (was set to 1 for ifi-xvan
     clearflag(l_hallway_south.f_seenbefore)

     entrance(owner(%this)) # act as if the player just entered the room
     stoptimer(m_init)      # served its purpose
     starttimer(m_moves)    # start counting moves

   t_move
     if valdir(l_location, %dir) then
       # it's a valid direction
       if exit(l_location) then
         # no object objects to the player leaving the room
         move(o_player, %dir) # move updates current location
         entrance(l_location)
       endif
     else
       nomatch()  # let other objects or verb default code react.
     endif
     agree()
 
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_npc
 DESCRIPTIONS
   d_sys             "Fred", "the nondescript guy"
   d_exa             "He's just a nondescript guy."
   d_entr            "Fred enters the room."
   d_leave           "Fred leaves the room."

   d_not_met_before  "\n\nSomeone walks into the room. It's a big nondescript /
                      guy. He starts talking to you. Hi there, you must be the /
                      new adventurer. I'm Fred. I'm a non playing character. I /
                      live here. Although this is a sample story with only a /
                      few locations, I like it here. It's my home. In case you /
                      want to look me up in the source file and see what I can /
                      do, my object id is o_npc.\n\n"
                     "I know your goal is to escape from this story. In order /
                      to pull that off, you will need my help. You may ask me /
                      about things and I might give a clue. I can also perform /
                      actions for you.\n\n"
                     "Ow, before I forget... Fred raises his tablet and takes /
                      a picture of you.\n\n"
                     "Hope to see you soon, buddy. Fred pulls a key from his /
                      pocket and unlocks and opens the closet door. He looks /
                      at you and smiles: 'Happy adventuring!'\n\n/
                      Fred steps into the closet. You hear the sound of the /
                      door being locked again.\n"

   d_met_again       "\n[o_npc] is here. He looks happy to see you. 'Hey /
                      buddy, so glad you made it this far'. He pulls out his /
                      tablet and starts typing. 'I'll award you with 50 /
                      points for you achievements this far. But you're not /
                      there yet. There's more to do before you can get out /
                      of here', he says."
                     "I'll be walking around here between locations. If /
                      you want me to stay, say 'fred, wait'. To let me go /
                      again, just say 'Fred, go'. Otherwise, I'll stay /
                      forever and you may need me in another room.\n\n"
                     "Happy adventuring!'.\n"

   d_ask_chest       "I'm not allowed to disclose information about [the] [o_chest] /
                      as it's a crucial item in your quest. Hmmm, maybe I just /
                      did disclose information that I'm not entitled to do..."

   d_ask_hole        "Fred looks up at the ceiling. It's a large hole. I think /
                      you will fit through it. If.... you can reach it."

   d_ask_dials       "That's funny, all three dials have a hand that points to /
                      a number and on each dial the number 8 is highlighted. /
                      I wonder what that means..."

   d_ask_watch1      "Fred looks at you suspiciously. You are running ahead a /
                      bit. You're not supposed to know about the watch yet..."

   d_ask_watch2      "Pretty nice watch, huh? With each new adventurer there's /
                      another surprise in the vault. Too bad I never get to keep it."

   d_ask_door        "It's part of your assignment to open this door. Oh, and /
                      there's no way to open it with force."

   d_throw_hook      "With a tremendous swing, Fred throws [the] [o_hook] /
                      through the hole."

   d_no_throw        "Fred looks at you. I thought you would have figured it /
                      out by now. Throwing the hook at this moment is not a /
                      good idea. Nice rope, by the way."

   d_rope_attach     "As [the] [o_rope] is tied to the hook, the rope is /
                      pulled through the hole by the weight of the /
                      hook. Apparently, [the] [o_hook] got stuck behind /
                      something outside the room."

   d_dangling        "[the] [o_rope] is dangling from the ceiling."

   d_sees_vault1     "You hear a voice in one of the other rooms saying Hey, /
                      there's the good old vault. I almost forgot it was there. /
                      Maybe can remember the code. It was something like 5489. /
                      Yes! I never forget numbers."

   d_sees_vault2     "[o_npc] sees [the] [o_vault] and says hey, there's the /
                      good old vault. I almost forgot it was there. Maybef I /
                      can remember the code. It was something like 5489. I'll /
                      try that. Yes! I never forget numbers."

   d_tip_from_author "\n\nNow that you know the vault code, enter it yourself in a /
                      new game and see what happens..."
                      
   d_takes_watch1    "The voice continues. Oh my, that's a beautifull watch in there!"

   d_takes_watch2    "Opening the vault reveals [a] [o_watch] and [a] [o_key]. /
                      Before you can do anything, [o_npc] snatches the watch out of /
                      the vault and puts it around his wrist."

   d_key             "\n\nFred looks at you carefully. Ah, I see you've got [the] [o_key]! /
                      Also noticed you got some trouble getting into the chest room with /
                      the key. Hmmm, what's going on here?\n\n"
                     "Fred takes a tablet from one of his pockets and starts swiping /
                      on the screen. Let's see if I can find this story's source file. /
                      They always store them in different places. Ah, got it!. Let's /
                      check the source to see see what they did this time."
                     "Oh no, they gave your code an extra check. You'll never be able /
                      to enter the chest room when you have the key. Hmmm, maybe I /
                      can remove the check. fred's typing on the screen. Hmmm, this /
                      should work.\n\n"
                     "Darn! They made the file read only. They must have found out I /
                      changed it for the guy that was here last week. This is not /
                      going to work."
                     "Oh, wait! This extra check is not in my code!! So... Well, /
                      you do the math, buddy..."

   d_give_key        "Fred looks at you and smiles from ear to ear. Cool! You /
                      figured it out. Let's meet in [the] [l_chest_room]. Fred takes /
                      the key and wanders off,,,"

   d_fred_curious    "Fred says, I'm so curious about what's in the chest! Please open it!!"

   d_refuse_rope     "Fred is about to accept the gift, but seeing that [the] [o_rope] /
                      is tied to [the] [o_rope.r_tied_to], Fred refuses your offer."

   d_icon            "icons\\\\Fred.Png"

CONTAINED in l_storage

FLAGS
   f_alive         = 1
   f_will_take_key = 0

 ATTRIBUTES
   r_last_loc    = l_escape_room
   r_last_dir    = %none
   r_loc_next    = l_dial_room
   r_prev_route  = %none
   r_ifi_icon    = d_icon

 TRIGGERS
   "examine [o_npc]"                          -> t_exa
   "ask [o_npc] about [o_chest]"              -> t_ask_chest
   "ask [o_npc] about [o_hole]"               -> t_ask_hole
   "ask [o_npc] about [o_red_dial]"           -> t_ask_dials
   "ask [o_npc] about [o_green_dial]"         -> t_ask_dials
   "ask [o_npc] about [o_blue_dial]"          -> t_ask_dials
   "ask [o_npc] about [o_dials]"              -> t_ask_dials
   "ask [o_npc] about [o_watch]"              -> t_ask_watch
   "ask [o_npc] about [o_door]"               -> t_ask_door
   # cover all of the above in the next line, in case they use 'tell'
   "[o_npc], tell [o_player] about [o_spec]"  -> t_tell_subject
   "give [o_rope] to [o_npc]"                 -> t_give_rope
   "give [o_hook] to [o_npc]"                 -> t_give_hook
   "give [o_key] to [o_npc]"                  -> t_give_key
   "[o_npc], wait"                            -> t_wait
   "[o_npc], go"                              -> t_go
   "[o_npc], tie [o_rope] to [o_hook]"        -> t_tie
   "[o_npc], throw [o_hook] through [o_hole]" -> t_throw
   "[o_npc], [action] [o_subject]"            -> t_do_self
   "ifi_people"                               -> t_ifi_people

   t_entrance
     if cansee(o_player, o_npc) then
       if not(testflag(f_seenbefore)) then
         printcr(d_met_again)
         o_player.r_score += 50
         starttimer(m_npc)
         setflag(f_seenbefore)
       else
         if equal(m_npc, 1) then
           print("\n")
           print(d_entr)
         else
           print("\n")
           print("Fred is here.")
         endif
       endif
       if owns(o_npc, o_watch) then
         printcr(" On his wrist is a beautiful [o_watch].")
       else
         print("\n")
       endif
       if gt(o_player.r_key_blocked, 2) and not(testflag(f_will_take_key)) then
         printcr(d_key)
         setflag(f_will_take_key)
         o_player.r_key_blocked = 0    # proberen
       endif
     endif

   t_exa
     printcr(d_exa)
     if owns(o_npc, o_watch) then
       printcr("[the] [o_npc] wears [a] [o_watch].")
     endif

   t_ask_chest
     printcr(d_ask_chest)

   t_ask_hole
     printcr(d_ask_hole)

   t_ask_dials
     printcr(d_ask_dials)

   t_ask_watch
     if not(owns(o_npc, o_watch)) then
       printcr(d_ask_watch1)
     else
       printcr(d_ask_watch2)
     endif

   t_ask_door
     printcr(d_ask_door)

   t_tell_subject
     if try(l_location, 0, "ask [o_npc] about [o_spec]") then endif

   t_move
     # Trigger for moving around Fred.
     # Initially Fred travels between the dial room and the passageway.
     # After the player has been in the vault room and left it, Fred
     # will travel between the dial room and the vault room.
     # When the escape room is accessible (after solving the dial puzzel), Fred
     # will travel between the vault room and the escape room.

     # if the player gave fred the key, Fred will move to the chest room and 
     # stay there until the player takes the key again.

     if equal(owner(o_npc), r_loc_next) then
       # Fred is at his destination
       if equal(owner(o_npc), l_chest_room) then
         # this is the brass key scenario
         if owns(o_npc, o_key) then
           if cansee(o_npc, o_player) then
             printcr(d_fred_curious)
             printcr("Fred offers you the key.")
             # stay in the chest room until the player opened the chest
             settimer(m_npc, 0)
             agree()
           endif
         else
           # player has the key or it's on the floor or so.
           if not(testflag(o_chest.f_open)) then
             if cansee(o_npc, o_player) then     # @@@        
               printcr(d_fred_curious)           # @@@
             endif                               # @@@
             #stay in the room
             settimer(m_npc, 0)
             agree()
           else
             # player unlocked and opened the chest
             # continue with Fred's route from before he got the key
             r_loc_next = r_prev_route
           endif
         endif
       
       else         
         if equal(r_loc_next, l_escape_room) then
           # this is the escape room <-> vault room scenario
           r_loc_next = l_vault_room
         else
           if equal(r_loc_next, l_vault_room) then
             if testflag(l_dial_room.f_solved_dials) then
               # the escape room is open, this is vault room <-> escape room scenario
               r_loc_next = l_escape_room
             else
               # escape room still closed, this is the vault room <-> dial room scenario
               r_loc_next = l_dial_room
             endif
             # We're in the vault room, Fred takes the watch if he hasn't done so already
             # Check if Fred can see the vault and doesn't have the watch yet
             if cansee(o_npc, o_vault) and not(owns(o_npc, o_watch)) then
               setflag(o_watch.f_seenbefore)
               if cansee(o_player, o_vault) then
                 printcr(d_sees_vault2)
                 printcr(d_takes_watch2)
                 printcr(d_tip_from_author)
               else
                 printcr(d_sees_vault1)
                 printcr(d_takes_watch1)
                 printcr(d_tip_from_author)
               endif
               move(o_watch, o_npc)
               clearflag(o_vault.f_locked)
               clearflag(o_vault.f_opaque)
               setflag(o_vault.f_open)
               l_vault_room.r_ifi_picture = l_vault_room.d_picture_open
               o_keypad.r_set_to = 5489
             endif
           else
             if equal(r_loc_next, l_dial_room) then
               # either dial room <-> passageway or dial room <-> vault room scenario
               if testflag(l_vault_room.f_player_visited) then
                 # Fred may open the vault and take the watch
                 # This is the dial room <-> vault room scenario
                 r_loc_next = l_vault_room
               else
                 # this is the dial room <-> passageway scenario
                 r_loc_next = l_passageway
               endif
             else
               # last option, Fred is passageway, the passageway <-> dial room scenario
               r_loc_next = l_dial_room
             endif
           endif
         endif
       endif
     endif
     if cansee(o_player, o_npc) then
       print("\n")
       printcr(d_leave)
     endif               # assumes there is a path to destination
     if not(equal(r_loc_next, owner(%this))) then
       # if equal, then loc_next is current location and goto() will give a no route msg
       goto(%this, r_loc_next)
     endif
     if trigger(t_entrance) then
       settimer(m_npc, 0)
       agree()

   t_wait # tells fred to stop moving around
     printcr("Huh? Ok, I'll wait, then.")
     stoptimer(m_npc)
   
   t_go # tells Fred to start moving again
     printcr("Ok, see you around. Bye!")
     settimer(m_npc, 0) # in case it stopped at value 1
     starttimer(m_npc)

   t_give_rope
     if equal(o_rope.r_tied_to, %none) then
       printcr("[the] [o_npc] takes [the] [o_rope].")
       move(o_rope, o_npc)
     else
       printcr(d_refuse_rope)
     endif                     # endif not necessary.
     agree()

   t_give_hook
     printcr("[the] [o_npc] accepts the gift.")
     move(o_hook, o_npc)
     agree()    

   t_give_key
     if testflag(o_chest.f_locked) then
       if testflag(f_will_take_key) then
         printcr(d_give_key)
         move(o_key, o_npc)
         clearflag(f_will_take_key)
         # Fred will now go to the chest room, so save his current target location
         r_prev_route = r_loc_next
         r_loc_next   = l_chest_room
         # in case Fred was told to wait, cancel the wait
         starttimer(m_npc)
       else
         printcr("[the] [o_npc] looks at you suspiciously. What's up? Just go and open [the] [o_chest].")
       endif
     endif
     agree()

   t_give_watch
     if owns(o_npc, o_watch) then
       printcr("Not yet...")
     else
       printcr("What watch?")
     endif
     
   t_tie
     # Prologue of tie will check whether Fred holds the rope already.
     if cansee(o_npc, o_hook) then
       if not(equal(o_rope.r_tied_to, o_hook)) then
         if not(owns(o_npc, o_hook)) then
           printcr("[the] [o_npc] takes [the] [o_hook] first.")
           move(o_hook, o_npc)
         endif
         if trigger(o_rope.t_tie_to_hook) then # Cannot access o_rope's local attribute
           printcr("[the] [o_npc] ties [the] [o_rope] to [the] [o_hook].")
         endif
       else
         printcr("But [the] [o_rope] is already tied to [the] [o_hook]!")
     else
       printcr("[the] [o_npc] looks for [the] [o_hook], but does not see it.")

   t_throw
     if cansee(o_npc, o_hook) then
       if equal(o_rope.r_tied_to, o_hook) then
         if not(owns(o_npc, o_hook)) then
           printcr("[the] [o_npc] takes [the] [o_hook] first]")
           move(o_hook, o_npc) # not necessary
         endif
         printcr(d_throw_hook)
         move(o_hook, l_storage) # remove the hook from the story
         newexit(l_escape_room, u, l_exit)
         move(o_rope, l_escape_room)
         setflag(o_rope.f_dangling)
         printcr(d_rope_attach)
         printcr(d_dangling)
         if not(trigger(o_rope.t_no_tied_to)) then
           disagree()
         endif
       else
         printcr(d_no_throw)
       endif
     else
       printcr("[the] [o_npc] looks for [the] [o_hook], but does not see it.")

   t_do_self
     print("Why don't you [action] [the] [o_subject] yourself?")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_grating
 DESCRIPTIONS
   d_sys       "the metal grating", "the metal bars", "the metal bar"

   d_exa       "The grating is made of a number of steel bars, of /
                approximately 4 inch thickness. You tick on the bars and /
                they are all massive. You conclude that this grating is /
                here to stay."

   d_nobreak   "Your earlier examination of the [o_grating] yielded that /
                it cannot be destroyed, remember?"

   d_look_east "The space behind the grating is not lit, but you can /
                make out a hole in the floor behindr the grating."

   d_look_west "Looking through [the] [o_grating], you see the south hallway."

   d_through   "There is too little space between the bars."

   d_nosaw     "Using the [o_hacksaw] on these bars would destroy the saw /
                and render it useless. Better save it for something else."

 CONTAINED in l_hallway_south

 FLAGS
   f_cuttable = 1

 TRIGGERS
   "break [o_grating]"                   -> t_break
   "cut [o_grating] with [o_hacksaw]"    -> t_cut
   "look through [o_grating]"            -> t_look_through
   "go through [o_grating]"              -> t_through
   "put [o_subject] through [o_grating]" -> t_through

   t_entrance
     agree()

   t_break
     if testflag(f_seenbefore) then
       printcr(d_nobreak)
     else
       printcr("It is too strong to break.")

   t_cut
     if testflag(o_hacksaw.f_worn) then
       printcr(o_hacksaw.d_worn)
     else
       printcr(d_nosaw)

   t_look_through
     if equal(l_location, l_hallway_south) then
       printcr(d_look_east)
     else
       printcr(d_look_west)

   t_through
     printcr(d_through)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_row_photos
 DESCRIPTIONS
   d_sys        "the row of photos", "the photos"

   d_entr_long  "\nMounted to the west wall, is a [o_row_photos]."

   d_entr_short "\nMounted to the west wall, is a [o_row_photos]."

   d_exa        "Each photo is a portrait of a person, framed and fixed to /
                 the wall (the photo, not the person)."

   d_good_look  "From your current position you only have a good look on photos"

 CONTAINED in l_living_south

 FLAGS
   f_referred = 0

 ATTRIBUTES
   r_dest = %none

 TRIGGERS
   "examine [o_row_photos]" -> t_exa
   "get [o_row_photos]"     -> t_get
   "count [o_row_photos]"   -> t_count

   t_exit
    r_dest = dest(%this, %dir)
    if equal(r_dest, l_living_north) or
       equal(r_dest, l_living_middle) or 
       equal(r_dest, l_living_south) then
       move(%this, r_dest)
    endif

   t_exa
    if runverb() then
      print(o_row_photos.d_good_look)
      if equal(l_location, l_living_south) then printcr(" 1 and 2.") endif
      if equal(l_location, l_living_middle) then printcr(" 3 and 4.") endif
      if equal(l_location, l_living_north) then printcr(" 5 and 6.") endif
      if not(testflag(f_referred)) then
        printcr(o_photo.d_exa_1)
      endif
    endif

   t_get
     printcr("The photos are firmly attached to the wall.")
     disagree()

   t_count
     printcr("There are 6 photos.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_photo
 DESCRIPTIONS
   d_sys      "the photo", "the picture", "the frame"

   d_specific "You have to be more specific about which photo you want to /
               [action]."

   d_exa_1    "\nYou can refer to a particular photo with 'photo <number>.'"

   d_photo_1  "A photo of a man. Inscribed in the frame is the text 'Adventurer /
               Rick. He did not make it'."

   d_photo_2  "A photo of a man. Inscribed in the frame is the text 'Adventurer /
               Mike. He made it with a full score'."

   d_photo_3  "A photo of a woman. Inscribed in the frame is the text 'Adventurer /
               Shirley. She made it with a full score'."

   d_photo_4  "A photo of a man. Inscribed in the frame is the text 'Adventurer /
               Tom. He did not make it'."

   d_photo_5  "A photo of a woman. Inscribed in the frame is the text 'Adventurer /
               Jessica. She made it'."

   d_photo_6  "This is an empty frame, there's no photo in it."

 CONTAINED in l_living_south

 FLAGS
   f_referred = 0

 ATTRIBUTES
   r_dest = %none

 TRIGGERS
   "count [o_photo]"         -> o_row_photos.t_count
   "[action] [o_photo]"       -> t_specific
   "examine [o_photo] [ord]" -> t_exa
   "get [o_photo] [ord]"     -> t_get


   t_entrance
     agree()

   t_exit
    r_dest = dest(%this, %dir)
    if equal(r_dest, l_living_north) or
       equal(r_dest, l_living_middle) or 
       equal(r_dest, l_living_south) then
       move(%this, r_dest)
    endif

   t_specific
    printcr(d_specific)
    printcr(d_exa_1)
    disagree()

   t_exa
    if lt(%ord, 1) or gt(%ord, 6) then
      printcr("There are only 6 photos, numbered from 1 to 6.")
      disagree()
    endif
    if equal(l_location, l_living_south) then
      if equal(%ord, 1) then 
        printcr(d_photo_1)
        disagree()
      endif
      if equal(%ord, 2) then
        printcr(d_photo_2)
        disagree()
      endif
      printcr("[o_row_photos.d_good_look] 1 and 2.")
      disagree()
    endif
    if equal(l_location, l_living_middle) then
      if equal(%ord, 3) then printcr(d_photo_3) disagree() endif
      if equal(%ord, 4) then printcr(d_photo_4) disagree() endif
      printcr("[o_row_photos.d_good_look] 3 and 4.")
      disagree()
    endif
    if equal(l_location, l_living_north) then
      if equal(%ord, 5) then printcr(d_photo_5) disagree() endif
      if equal(%ord, 6) then printcr(d_photo_6) disagree() endif
      printcr("[o_row_photos.d_good_look] 5 and 6.")
      disagree()
    endif

   t_get
     printcr("The photo is firmly attached to the wall.")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_kitchen_door
 DESCRIPTIONS
   d_sys         "the kitchen door"

   d_entr_long   "The door is made of wood; it gives access to the garden."

   d_entr_long1  "The door is made of wood; it leads back into the kitchen."

   d_entr_short  "To the north is a door that leads to the garden."

   d_entr_short1 "To the south is a door that leads to the kitchen."

   d_no_window   "In the upper half of the door is an opening where /
                  a window used to be "

 CONTAINED in l_kitchen

 FLAGS
   f_openable = 1
   f_lockable = 1
   f_locked   = 1

 ATTRIBUTES
   r_key = o_rusty_key

 TRIGGERS
   "examine [o_kitchen_door]"                   -> t_exa
   "look through [o_kitchen_door]"              -> o_kitchen_window.t_look_through
   "unlock [o_kitchen_door] with [o_rusty_key]" -> t_unlock
   "turn [o_rusty_key]"                         -> t_unlock
   "open [o_kitchen_door]"                      -> t_open
   "close [o_kitchen_door]"                     -> t_close

   t_entrance
     if owns(l_kitchen, %this) then
       printcr(d_entr_short)
     else
       printcr(d_entr_short1)

   t_exa
     if owns(l_kitchen, %this) then
       print(d_entr_long)
     else
       print(d_entr_long1)
     endif
     if testflag(f_open) then
       print(" The door is open. ")
     else print(" The door is closed. ")
     endif
     # print info about window and keyhole
     if testflag(o_kitchen_window.f_broken) then
       print(d_no_window)
     else
       print(o_kitchen_window.d_entr_short)
     endif
     printcr("In [the] [o_kitchen_door] is [a] [o_keyhole_door].")
     contents(o_keyhole_door)

   t_unlock
     if not(owns(o_player, o_rusty_key)) and not(owns(o_keyhole_door, o_rusty_key)) then
       printcr("(picking up the rusty key first).")
       move(o_rusty_key, o_player)
     endif
     # verb prologue will check if already unlocked
     if not(owns(o_keyhole_door, o_rusty_key)) then
       printcr("(putting the rusty key in the keyhole.")
     endif
     printcr("Ok, the kitchen door is now unlocked.")
     clearflag(f_locked)

   t_open
     # test for already open is done by verb prologue
     if not(testflag(f_locked)) then
       printcr("Ok, the kitchen door is now open")
       setflag(f_open)
       newexit(l_kitchen, north, l_garden)
     else
       printcr("The door seems to be locked.")
     
   t_close
     # test for already closed is done by verb prologue
     printcr("Ok, the kitchen door is now closed.")
     clearflag(f_open)
     blockexit(l_kitchen, n)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_kitchen_window
 DESCRIPTIONS
   d_sys           "the kitchen window"

   d_entr_long     "In the upper half of the door is a window."

   d_entr_short    "In the upper half of the door is a window."

   d_exa           "The window is made of glass, which somehow doesn't /
                    surprise you."

   d_smash_no      "You smash the window with your fist, but with no /
                    success. You need something heavy to break the /
                    window."

   d_broken        "\nScattered over the floor is a broken window that /
                    once was a part of the door."

   d_look_glass    "Through the window you see the garden. At the far /
                    north end, there is a garden shed. You push your /
                    face to the window and try to look down but can't /
                    see right behind the door. If you could only stick /
                    your face further through."

   d_look_no_glass "Because the window is no longer there, you can stick /
                    your head through the hole. There's a rusty key in /
                    the outside of the keyhole!"

   d_climb         "You don't fit through the window. It's way too small (or /
                    you are too big)."

 CONTAINED in o_kitchen_door

 FLAGS
   f_broken = 0

 TRIGGERS
   "look through [o_kitchen_window]"               -> t_look_through
   "break [o_kitchen_window]"                      -> t_break_no
   "break [o_kitchen_window] with [o_spec]"        -> t_break
   "throw [o_subject] [prepos] [o_kitchen_window]" -> t_throw
   "climb through [o_kitchen_window]"              -> t_climb
   "go through [o_kitchen_window]"                 -> t_climb
   
   t_entrance
     if testflag(f_broken) then
       printcr(d_broken)
     
   t_look_through
     if testflag(f_broken) then
       printcr(d_look_no_glass)
       clearflag(o_rusty_key.f_hidden)
     else
       printcr(d_look_glass)

   t_break_no
     printcr(d_smash_no)
     
   # break and throw cannot be the same trigger because they
   # have their subject and specifier reversed.
   t_break
     print("You throw [the] [o_spec] at the window")
     if not(testflag(o_spec.f_heavy)) then
       printcr(", but it bounces back. It obviously isn't /
                heavy enough.")
       move(o_spec, l_kitchen)
     else
       printcr(" and it goes straight through. The window /
                is shattered all over the floor. One of the /
                glass fragments is a bit larger than the rest.")
       move(o_spec, l_garden)
       setflag(f_broken)
       move(%this, l_kitchen)
       move(o_fragment, l_kitchen)
     endif

   t_throw
     # may only work for 'at' and 'through'
     if equal(%prepos, at) OR equal(%prepos, through) then
       print("You throw [the] [o_subject] at the window")
       if not(testflag(o_subject.f_heavy)) then
         printcr(", but it bounces back. It obviously isn't /
                  heavy enough.")
         move(o_subject, l_kitchen)
       else
         printcr(" and it goes straight through. The window /
                  is shattered all over the floor. One of the /
                  glass fragments is a bit larger than the rest.")
         move(o_subject, l_garden)
         setflag(f_broken)
         move(%this, l_kitchen)
         move(o_fragment, l_kitchen)
       endif
     else
       nomatch()

   t_climb
    printcr(d_climb)
    disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_keyhole_door
 DESCRIPTIONS
   d_sys  "the keyhole"

   d_peek "You peek through the keyhole but you cannot see a thing. /
           something on the other side of the keyhole blocks your view."

   d_look "You see the garden. At the far east end, there is a /
           garden shed."

 CONTAINED in o_kitchen_door

 TRIGGERS
   "examine [o_keyhole_door]"      -> t_look_through
   "look through [o_keyhole_door]" -> t_look_through

   t_entrance
     # don't print there is a keyhole when entering the room
     agree()

   t_look_through
     if owns(o_keyhole_door, o_rusty_key) then
       if cansee(o_player, o_rusty_key) then
         printcr("You can't, since there is a key in the keyhole.")
       else
         printcr(d_peek)
       endif
     else
       printcr(d_look)
     endif
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_rusty_key
 DESCRIPTIONS
   d_sys        "the rusty key"

   d_entr_long  "On the floor is [a] [o_rusty_key]."

   d_entr_short "On the floor is [a] [o_rusty_key]."

   d_exa        "An old rusty metal key."

 CONTAINED in o_keyhole_door

 FLAGS
   f_takeable = 1
   f_cuttable = 1   # they may use the hacksaw on it
   f_hidden   = 1   # key is in the other side of the keyhole

 TRIGGERS
   "inventory" -> t_i

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_fragment
 DESCRIPTIONS
   d_sys        "the glass fragment", "the shard", "the splinter"

   d_entr_long  "There is [a] [o_fragment] here."

   d_entr_short "There is [a] [o_fragment] here."

   d_exa        "The fragment is about 5 inches long and has a sharp edge."

   d_carpet     "You cut the carpet along its sides and it comes loose /
                 from the floor, revealing a trapdoor!"

 CONTAINED in l_storage

 FLAGS
   f_takeable = 1

 TRIGGERS
   "inventory"                        -> t_i
   "cut [o_carpet] with [o_fragment]" -> t_cut

   t_cut
     if not(owns(o_player, %this)) then
       printcr("(picking up the fragment first).")
     endif
     if not(testflag(o_carpet.f_cut)) then
       setflag(o_carpet.f_cut)
       move(o_trapdoor, l_chest_room)
       move(o_carpet, o_player)
       setflag(o_carpet.f_bypass)
       printcr(d_carpet)
     else
       printcr("You already did that.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_toaster
 DESCRIPTIONS
   d_sys        "the old toaster"

   d_entr_long  "There's a [o_toaster] here."

   d_entr_short "There's a [o_toaster] here."

   d_exa        "a [o_toaster], quite heavy. The power cord has been cut off."

 CONTAINED in l_kitchen
 FLAGS
   f_takeable  = 1
   f_heavy     = 1

 TRIGGERS
   "inventory" -> t_i

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_stairs
 DESCRIPTIONS
   d_sys        "the stairs", "the staircase", "the steps"

   d_exa        "It's a wooden staircase. There are 15 steps."

   d_refer      "\nYou can refer to a particular step with 'step <number>'."

   d_cant_see   "It's hard to get a good view from here. If you were halfway /
                 up the stairs you would have a better view."

   d_exa_hollow "It looks just like a staircase with one /
                 step that sounds hollow when stepped on."

   d_count      "There are 15 steps. You can refer to a particular step with /
                'step <number>'."

   d_which      "If you want to do something to a specific step, please refer to /
                 the step as 'step <number>'."

 CONTAINED in l_hallway_south

 FLAGS
   f_exa      = 0  # Not yet examined.
   f_referred = 0

 TRIGGERS
   "examine [o_stairs]" -> t_exa
   "look at [o_stairs]" -> t_exa
   "count [o_stairs]"   -> t_count

   t_entrance
     agree()  # Must execute t_entrance for contained objects (steps).

   t_exa
     if (equal(l_location, l_hallway_south) OR equal(l_location, l_upstairs))
         AND not(testflag(f_exa)) then
       printcr(d_cant_see)
     else
       # we are halfway
       # if they have not yet heard the hollow sound, we don't mention it
       if testflag(l_upstairs.f_seenbefore) then
         setflag(f_exa)
         print(d_exa_hollow)
         if not(testflag(f_referred)) then
           printcr(d_refer)
           setflag(f_referred)
         else
           print("\n")
       else
         print(d_exa)
         setflag(f_referred)
         printcr(d_refer)

   t_count
     printcr(d_count)
     disagree()

  t_default
    if equal(o_subject, o_stairs) then
      printcr(d_which)
      disagree()
    else
      nomatch()  # this is important for default verb code

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_step
 DESCRIPTIONS
   d_sys        "the step"

   d_exa        "There's a tiny button on the side of the step."

   d_15         "There are are only 15 steps."

   d_moved_11   "Step 11 has disappeared, revealing a passage down."

 CONTAINED in o_stairs

 FLAGS
   f_swap = 1  # always print the d_sys last referred to by the user

 TRIGGERS
   "examine [o_step] [ord]" -> t_exa_step

  t_entrance
    agree()
    
  t_exa
    if not(trigger(o_stairs.t_exa)) then
      disagree()

  t_exa_step
    if (equal(l_location, l_hallway_south) OR equal(l_location, l_upstairs))
         AND not(testflag(o_stairs.f_exa)) then
      printcr(o_stairs.d_cant_see)
      disagree() # stop
    endif
      
    if lt(%ord, 1) or gt(%ord, 15) then
      printcr("Steps are numbered from 1 to 15.")
    else
      # step 11 gives access to the closet
      if equal(%ord, 11) then
        if not(testflag(o_button.f_pressed)) then
          printcr(d_exa)
          clearflag(o_button.f_hidden)
        else
          printcr(d_moved_11)
      else
        printcr("You see nothing special about step [ord].")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_button
 DESCRIPTIONS
  d_sys        "the button"

  d_exa        "A round button in the same color as the stairs. You have to look /
                really close to notice it."

  d_entr_short "\nThere's a tiny button on the side of step 11."

  d_press      "As you press the button, step 11 retracts a bit, lowers /
                about an inch and then slides backwards out of sight, /
                revealing a passage down into the closet!"

 CONTAINED in l_halfway

 FLAGS
  f_hidden   = 1
  f_pressed  = 0

 TRIGGERS
  "examine [o_stairs]" -> t_exa_stairs
  "press [o_button]"   -> t_press

  t_entrance
    if not(testflag(f_hidden)) then
      # the button is visible
      if not(testflag(f_pressed)) then
        printcr(d_entr_short)
      else
        printcr(o_step.d_moved_11)

  t_exa_stairs
   if not(testflag(f_hidden)) then
     printcr(d_entr_short)
    
  t_press
    if testflag(f_pressed) then
      printcr("Nothing happens.")
    else
      printcr(d_press)
      o_player.r_score += 50
      printcr("")
      printcr("(Your score just went up by 50 points).")
      setflag(f_pressed)
      blockexit(l_halfway, d)
      newexit(l_halfway, d, l_closet)
    endif
    disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_closet_door
 DESCRIPTIONS
   d_sys        "the closet door"

   d_entr_long "To the [r_direction] is a door that gives access /
                to [r_access]."     

   d_entr_short "To the [r_direction] is a door that gives access /
                 to [r_access]."

   d_exa        "[the] [o_closet_door] seems to be locked."

   d_closet     "a closet under the stairs"

   d_living     "the living room"

   d_no_key     "How? This Fred guy has the key and I doubt that there's /
                 more than one key."

   d_no_unlock  "[the] [o_spec] does not fit."

 CONTAINED in l_living_middle

 FLAGS
   f_openable = 1
   f_lockable = 1
   f_locked   = 1

 ATTRIBUTES
   r_direction = east
   r_access    = d_closet

 TRIGGERS
   "open [o_closet_door]"                 -> t_locked
   "unlock [o_closet_door]"               -> t_unlock
   "unlock [o_closet_door] with [o_spec]" -> t_unlock_key

   t_locked
    printcr(d_entr_long)

   t_unlock
     printcr(d_no_key)

   t_unlock_key
     printcr(d_no_unlock)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_carpet
 DESCRIPTIONS
   d_sys        "the old carpet"

   d_entr_long  "On the floor is an [o_carpet]."

   d_entr_short "On the floor is an [o_carpet]."

   d_exa        "The carpet doesn't seem very expensive. It just /
                 about covers the floor. On a closer examination, it /
                 turns out that its sides are glued to the floor."

   d_cut        "You use the [o_fragment] to cut along the glued /
                 sides of the carpet. You grab the the middle part /
                 of the carpet that now is no longer attached to /
                 the floor and lift it. Removing the carpet /
                 reveals a trapdoor in the floor!."

   d_no_move    "The carpet wonn't move. On closer examination /
                 you find that its edges are glued to the floor."

   d_exa_moved  "It's just an old carpet with the edges cut off /
                 by a sharp object."

 CONTAINED in l_closet

 FLAGS
    f_takeable = 1
    f_moveable = 1
    f_cuttable = 1
    f_cut      = 0

  TRIGGERS
    "inventory"                        -> t_i
    "examine [o_carpet]"               -> t_exa
    "lift [o_carpet]"                  -> t_move
    "get [o_carpet]"                   -> t_get
    "move [o_carpet]"                  -> t_move
    "cut [o_carpet] with [o_fragment]" -> t_cut

  t_entrance
    if equal(owner(%this), l_closet) then
      if testflag(o_trapdoor.f_hidden) then
        printcr("On the floor is [a] [o_carpet].")
      else
        printcr("In one of the corners is a cut [o_carpet].")
      endif
    else
      nomatch()

  t_exa
    if not(testflag(f_cut)) then
      nomatch()
    else
      printcr(d_exa_moved)

  t_get
    if not(testflag(f_cut)) then
      printcr(d_no_move)
    else
      nomatch()

  t_move
    if testflag(f_cut) then
      printcr("You already cut the carpet loose.")
    else
      printcr(d_no_move)

  t_cut
    if not(testflag(f_cut)) then
      printcr(d_cut)
      setflag(f_cut)
      clearflag(o_trapdoor.f_hidden)
      move(o_carpet, o_player)
    else
      printcr("You already cut the carpet.")
    endif
    disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_trapdoor
 DESCRIPTIONS
   d_sys             "the trapdoor", "the trap door"

   d_entr_closet     "In the middle of the floor is a [o_trapdoor], "

   d_entr_chest_room "In the ceiling is a closed [o_trapdoor]."

   d_entr_exa        "The trapdoor is made of laminated wood. It seems large /
                      enough for a person to fit through.."

   d_open            "The trapdoor gives access to a space below. Through /
                      the open trapdoor you see a stairway leading down."

 CONTAINED in l_closet

 FLAGS
   f_hidden   = 1
   f_openable = 1

 TRIGGERS
   "open [o_trapdoor]"  -> t_open
   "close [o_trapdoor]" -> t_close

   # trap door can be either in closet or chest room

   t_entrance
     if equal(l_location, l_closet) then printcr("\nIn closet\n\n")
       if not(testflag(f_hidden)) then
         print(d_entr_closet)
         setflag(f_seenbefore)
         if testflag(f_open) then
           printcr("which is open.")
           # player cannot see the flames
           if not(testflag(o_flames.f_extinguished)) then
             printcr(o_flames.d_flames)
             starttimer(m_heat)  # will count down to 0
           endif
         else
           printcr("which is closed.")
         endif
       endif
     else
       # in the chest room
       printcr(d_entr_chest_room)
     endif

   t_exit
     if equal(l_location, l_closet) then
       if testflag(o_flames.f_extinguished) then
         # stop and reset the heat timer
         stoptimer(m_heat)
         m_heat = 3
       endif
     endif

   t_open
     if equal(l_location, l_chest_room) then
       printcr("There is no way to open the trap door from this side.")
       disagree()
     endif
     setflag(f_open)
     print(d_open)
     if not(testflag(o_flames.f_extinguished)) then
       starttimer(m_heat)
       printcr(o_flames.d_flames)
     endif
     if cansee(o_player, o_water_closet) then
       print(o_drain_pipe_closet.d_pour)
       printcr(o_drain_pipe_closet.d_pour_in_cellar)
       if not(testflag(o_flames.f_extinguished)) then
         printcr(o_flames.d_extinguish)
         setflag(o_flames.f_extinguished)
         stoptimer(m_heat)
         move(o_flames, l_storage)

   t_close
     if not(testflag(o_flames.f_extinguished)) then
       printcr("It's less hot now. This feels much better.")
       stoptimer(m_heat)
       m_heat = 3
     else
       printcr("closed.")
     endif
     clearflag(f_open)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_drain_pipe_bedroom
 DESCRIPTIONS
   d_sys        "the drain pipe", "the drain"


   d_entr_long  "Attached to the wall is a drain pipe."

   d_entr_short "Attached to the wall is a drain pipe."

   d_exa        "The drain pipe emerges from the sink and disappears in /
                 the floor."

   d_no_cut     "It makes little sense to cut the drain pipe here."

 CONTAINED in l_bedroom

 FLAGS
   f_cuttable = 1

 TRIGGERS
   "cut [o_drain_pipe_bedroom] with [o_hacksaw]" -> t_cut

   t_cut
     printcr(d_no_cut)
     
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_drain_pipe_closet
 DESCRIPTIONS
   d_sys             "the drain pipe", "the drain"

   d_entr            "Attached to the wall is a drain pipe."

   d_exa             "The drainpipe comes down where the ceiling meets /
                      the west wall, goes vertically down the west /
                      wall and disappears in the floor."

   d_cut             " About halfway up the wall, the pipe has been cut."

   d_cut_again       "You try to cut the pipe (again), but the hacksaw has /
                      become blunt after you used it the first time."

   d_pour            "Water pours out of the upper half of the broken pipe /
                      on the floor, "

   d_pour_to_hallway "where it disappears under the closet door into the hallway."

   d_pour_in_cellar  "through the open trapdoor straight into the cellar."

 CONTAINED in l_closet

 FLAGS
   f_cuttable = 1
   f_cut      = 0  # not yet cut.

 TRIGGERS
   "examine [o_drain_pipe_closet]"              -> t_exa
   "cut [o_drain_pipe_closet] with [o_hacksaw]" -> t_cut

   t_entrance
     print(d_entr)
     if testflag(f_cut) then
       printcr(d_cut)
       if testflag(o_tap.f_open) then
         print(d_pour)
         if testflag(o_trapdoor.f_open) then
           printcr(d_pour_in_cellar)
         else
           printcr(d_pour_to_hallway)
         endif
       endif
     else
       if testflag(o_tap.f_open) then
         printcr("You hear water running through the pipe.")
       
   t_exa
     if not(testflag(f_cut)) then
       printcr(d_exa)
     else
       print(d_cut)
         if testflag(o_tap.f_open) then
           print(d_pour)
           if testflag(o_trapdoor.f_open) then
             printcr(d_pour_in_cellar)
           else
             printcr(d_pour_to_hallway)
           endif
         endif
     endif
     
   t_cut
     if not(testflag(f_cut)) then
       setflag(f_cut)
       setflag(o_hacksaw.f_worn)
       printcr("You cut the pipe about halfway above the floor.")
       if testflag(o_tap.f_open) then
         print(d_pour)
         clearflag(o_water_closet.f_hidden)
         if not(testflag(o_trapdoor.f_open)) then
           printcr(d_pour_to_hallway)
         else
           printcr(d_pour_in_cellar)
           printcr(o_flames.d_extinguish)
           stoptimer(m_heat)
           move(o_flames, l_storage)
         endif
       endif
     else
       printcr(d_cut_again)
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_flames
 DESCRIPTIONS
   d_sys        "the flames", "the fire"

   d_exa        "Because of the heat you cannot get close enough for /
                 a good examination."

   d_flames     "A tremendous heat is coming through the open trapdoor. /
                 You look down and see a dark red glow deep down in /
                 the cellar."

   d_extinguish "As soon as the water touches the flames, you hear a loud hissing /
                 sound, followed by the appearance of lots of steam. After a /
                 while, the hissing gets less until it completely stops. The fire /
                 has died.\n It seems safe to go down into the cellar now."

   d_burn       "You throw [the] [o_subject] into [the] [o_flames]. The heat "
                "completely desintegratesit and it is gone forever."

 CONTAINED in l_chest_room

 FLAGS
   f_extinguished = 0

 TRIGGERS
   "extinguish [o_flames]"           -> t_extinguish
   "throw [o_subject] in [o_flames]" -> t_burn
   "burn [o_subject]"                -> t_burn

   t_entrance
     agree()

   t_extinguish
     printcr("It's up to you to find a way how to do that.")

   t_burn
     printcr(d_burn)
     move(o_subject, l_storage)  # remove from the game

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_hacksaw
 DESCRIPTIONS
   d_sys        "the hacksaw", "the saw"

   d_entr_long  "There is a [o_hacksaw] here."

   d_entr_short "There is a [o_hacksaw] here."

   d_exa        "This is just an ordinary hacksaw. It can be used /
                 to saw metal objects. The saw looks a bit worn, /
                 but it probably will last for one more saw job."

   d_no_saw     "The saw is pretty worn. It will probably last for /
                 one more saw job and cutting [the] [o_spec] is /
                 unlikely to be that job."

   d_worn       "The saw is completely worn out. Whatever you are going to /
                 do with it, it won't be a saw job."

 CONTAINED in l_shed

 FLAGS
   f_takeable = 1
   f_worn     = 0

 TRIGGERS
   "inventory"                        -> t_i
   "examine [o_hacksaw]"              -> t_exa
   "saw [o_subject] with [o_hacksaw]" -> t_saw

   t_exa
     if testflag(f_worn) then
       printcr(d_worn)
     else
       printcr(d_exa)
     endif
     disagree()

   t_saw
     # the drain pipe and the grating will reply themselves
     # everything else is handled in this trigger
     if not(equal(o_subject, o_drain_pipe_closet) or equal(o_subject, o_grating)) then
       if testflag(f_worn) then
         printcr(d_worn)
       else
         printcr(d_no_saw)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_tap
 DESCRIPTIONS
   d_sys        "the water tap"

   d_exa        "It's a water tap for cold water."

   d_open       "As you turn the tap to open it, water starts /
                 pouring into the sink."

   d_extinguish "After a little while, you faintly here a hissing /
                 sound, coming from somewhere below."

 CONTAINED in l_bedroom

 FLAGS
   f_openable = 1  # for open prologue

 TRIGGERS
   "examine [o_tap]"  -> t_exa
   "open [o_tap]"     -> t_open
   "close [o_tap]"    -> t_close
   "turn [o_tap]"     -> t_turn
   "turn on [o_tap]"  -> t_open
   "turn off [o_tap]" -> t_close
   
   t_entrance
     # tap is handled by sink, because we want 
     # to execute the sink t_entrance first
     agree()
     
   t_exa
     if testflag(f_open) then
       printcr("Water is pouring out of the tap into the sink.")
     else
       printcr("The tap is closed.")
     endif
     disagree()
     
   t_open
     if testflag(f_open) then
       printcr("The water is already running.")
     else
       setflag(f_open)
       clearflag(o_water_bedroom.f_hidden)
       if testflag(o_drain_pipe_closet.f_cut) then
         clearflag(o_water_closet.f_hidden)
         if not(testflag(o_trapdoor.f_open)) then
           # put water in the living room
           clearflag(o_water_living.f_hidden)
         endif
       endif
       printcr(d_open)
       if not(testflag(o_flames.f_extinguished)) and 
         testflag(o_trapdoor.f_open) and testflag(o_drain_pipe_closet.f_cut) then
         setflag(o_flames.f_extinguished)
         stoptimer(m_heat)
         move(o_flames, l_storage)
         printcr(d_extinguish)
       endif
     endif

   t_close
     if not(testflag(f_open)) then
       printcr("It's already closed.")
     else
       clearflag(f_open)
       setflag(o_water_bedroom.f_hidden)
       setflag(o_water_closet.f_hidden)
       # water in hallway north remains
       printcr("The waterflow stops when you close the tap.")
     
   t_turn
     if testflag(f_open) then
       if not(trigger(t_close)) then
         disagree()
       endif
     else
       if not(trigger(t_open)) then
         disagree()
       endif
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_sink
 DESCRIPTIONS
   d_sys        "the sink"

   d_entr_long  "There is a sink mounted to the wall. Above the sink /
                 is a water tap."

   d_entr_short "There is a sink mounted to the wall. Above the sink /
                 is a water tap."

   d_exa        "The sink is connected to a drain pipe, which disappears /
                 into the floor."

 CONTAINED in l_bedroom
 
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_bedroom
 DESCRIPTIONS
   d_sys        "the water"

   d_entr_long  "Water is running from the tap into the sink."

   d_entr_short "Water is running from the tap into the sink."

   d_exa        "Just plain ordinary water."

 CONTAINED in l_bedroom

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_bedroom]"     -> t_get
   "drink [o_water_bedroom]"   -> t_drink

   t_get
     printcr("You have nothing with you that can hold the water.")

   t_drink
     printcr("That's refreshing! You didn't realize you were thirsty.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_closet
 DESCRIPTIONS
   d_sys      "the water"

   d_exa      "Just plain ordinary water."

   d_no_drink "It's better not to drink from the floor. if /
               you are thirsty, better go to the tap in /
               the bedroom for some fresh water."

 CONTAINED in l_closet

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_closet]"     -> t_get
   "drink [o_water_closet]"   -> t_drink

   t_entrance
     agree()   # handled by closet

   t_get
     printcr("You have nothing with you that can hold the water.")

   t_drink
     printcr(d_no_drink)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_living
 DESCRIPTIONS
   d_sys        "the water"

   d_entr_long  "From underneath the closet door, water /
                 is coming into the living room."

   d_entr_short "From underneath the closet door, water /
                 is coming into the living room."

   d_exa        "Just plain ordinary water."

   d_no_drink   "It's better not to drink from the floor. if /
                 you are thirsty, better go to the tap in /
                 the bedroom for some fresh water."

 CONTAINED in l_living_middle

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_living]"   -> t_get
   "drink [o_water_living]" -> t_drink

   t_get
     printcr("You have nothing with you that can hold the water.")

   t_drink
     printcr(d_no_drink)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_dials

 DESCRIPTIONS
  d_sys "the colored dials"

 CONTAINED in l_dial_room

 FLAGS
  f_hidden   = 1 # must be invisible
  f_bypass   = 1 # must also work when not visible

 TRIGGERS
   "examine [o_dials]"  -> t_exa_dials
   "use [o_dials]"      -> t_exa_dials
   "[action] [o_dials]" -> t_individual

  t_entrance
    agree()      # do not use default t_entrance code
 
  t_exit         # do not use default t_exit code
    agree()

  t_exa_dials
    printbold("\n[o_red_dial]: ")
    printcr(o_red_dial.d_exa)
    printbold("\n[o_green_dial]: ")
    printcr(o_green_dial.d_exa)
    printbold("\n[o_blue_dial]: ")
    printcr(o_blue_dial.d_exa)
    
  t_individual
    if not(equal(%action, examine)) then
      printcr("In order to [action] [the] [o_dials], you must address them individually.")
    disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_door

 DESCRIPTIONS
   d_sys        "the smooth door"
   d_entr_long  "\n\nHardly visible in the south wall is [a] [o_door]. You /
                 almost missed it.\n"

   d_entr_short "\n\nIn the south wall is [a] [o_door]\n."

   d_exa        "The door fits seamlessly into the wall. You don't see how /
                 you could ever open it manually. There is a large 8 printed /
                 on the door."

   d_look_under "There's light on the other side of [the] [o_door]"

   d_dontgetit  "Really, you cannot open this door manually."

 CONTAINED in l_dial_room

 FLAGS
   f_open         = 0
   f_tried_before = 0

 TRIGGERS
   "s"                   -> t_south
   "open [o_door]"       -> t_open
   "look"                -> t_entrance
   "look under [o_door]" -> t_look_under

   t_entrance
     if testflag(f_hidden) then
       print("\n")
       printcr("There is a passage in the south wall.")
     else
       #clearflag(l_location.f_seenbefore)
       nomatch()
     endif

   t_exa_south
     if trigger(t_entrance) then
       disagree()
     else
       disagree()

   t_south
     if not(testflag(f_open)) then
       printcr("You must find a way to open [the] [o_door] first.")
     else
       nomatch()     

   t_open
     if not(testflag(f_tried_before)) then
       setflag(f_tried_before)
       printcr(d_exa)
     else
       printcr(d_dontgetit)

   t_look_under
     printcr(d_look_under)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_south_wall

 DESCRIPTIONS
   d_sys     "the south wall"
             # south wall is a separate object because of the
             # door in the dial room (in the south wall),
             # the ladder in the alcove (south wall) and
             # the inscription in the escape hall

   d_passage "There is a passage in the south wall."

   d_alcove  "There is [a] [o_ladder] attached to the south wall."

 CONTAINED in o_player

 TRIGGERS
   "examine [o_south_wall]" -> t_exa
   "climb [o_south_wall]"   -> t_climb

   t_entrance
     agree()

   t_exa
     if owns(l_dial_room, %this, 0) then
       if testflag(o_door.f_open) then
         printcr(d_passage)
       else
         printcr(o_door.d_entr_long)
     else
       if owns(l_alcove, %this, 0) then
         printcr(d_alcove)
       else
         if owns(l_escape_hallway, %this, 0) then
           printcr(o_inscription.d_exa)
         else
           if trigger(o_generic_wall.t_exa) then
             agree()

   t_climb
     if equal(l_location, l_alcove) then
       if trigger(o_ladder.t_climb) then
         disagree()
       endif
     else
       nomatch()

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_chest

 DESCRIPTIONS
   d_sys         "the chest"

   d_entr_long   "There is [a] [o_chest] here."

   d_entr_short  "There is [a] [o_chest] here."

   d_exa         "The chest looks very old and worn."

   d_locked      "You try to open [the] [o_chest] but find that it is locked."

   d_take        "You try to take [the] [o_chest] but it is mounted to the /
                  floor. It would have been too heavy to carry around anyway,"

   d_icon_open    "icons\\\\Chest open.Png"
   d_icon_closed  "icons\\\\Chest closed.Png"

 CONTAINED in l_chest_room

 FLAGS
   f_openable  = 1
   f_lockable  = 1
   f_locked    = 1
   f_opaque    = 1
   f_takeable  = 0
   f_container = 1

 ATTRIBUTES
   r_ifi_icon = d_icon_closed

 TRIGGERS
   "open [o_chest]"                     -> t_open_chest
   "close [o_chest]"                    -> t_close_chest
   "look in [o_chest]"                  -> t_look_in
   "examine [o_chest]"                  -> t_exa
   "take [o_chest]"                     -> t_take
   "unlock [o_chest]"                   -> t_unlock
   "unlock [o_chest] with [o_key]"      -> t_unlock
   "put [o_subject] [prepos] [o_chest]" -> t_put

   t_entrance
     if not(owns(l_location, o_chest) and cansee(o_actor, o_chest)) then
       agree()
     endif
     setflag(f_seenbefore)
     print("There is [a] [o_chest] here, which is ")
     if testflag(f_open) then
       printcr("open.")
     else
       printcr("closed.")
     endif
     agree()
  
   t_exa
     printcr(d_exa)
     print("On the front of [the] [o_chest] is [a] [o_keyhole_chest].")
     if owns(o_keyhole_chest, o_key) then
       printcr(" with [a] [o_key] in it.")
     else
       printcr(".")
     endif
     print("[the] [o_chest] is")
     if testflag(f_open) then
       printcr(" open.")
       indent(2)
       contents(o_chest)
       indent(-2)
     else
       printcr(" closed.")
     endif
     agree()

   t_open_chest
     if runverb() then endif
     if testflag(o_chest.f_open) then
       # cannot test for runverb() because may return disagree()
       l_chest_room.r_ifi_picture = l_chest_room.d_picture_open
     endif

   t_close_chest
     if runverb() then
       l_chest_room.r_ifi_picture = l_chest_room.d_picture_closed

   t_look_in
     if not(testflag(f_open)) then
       if not(testflag(f_locked)) then
         printcr("Opening [the] [o_chest] first...")
         setflag(f_open)
         clearflag(f_opaque)
         contents(%this)
       else
         printcr(d_locked)
       endif
     else
       contents(%this)
     endif
     agree()

   t_unlock
     if owns(o_player, o_key) then
       if not(testflag(f_locked)) then
         printcr("[the] [o_chest] is already unlocked.")
       else
         if equal(o_spec, %none) then
           printcr("(with [the] [o_key]).")
         endif
         printcr("You put [the] [o_key] into [the] [o_keyhole_chest] and turn it.")
         printcr("Ok, the chest is now unlocked.")
         move(o_key, o_keyhole_chest)
         clearflag(f_locked)
       endif
     else
       if owns(o_keyhole_chest, o_key) then
         printcr("You reach for [the] [o_key] that is in [the] /
                  [o_keyhole_chest] and turn it to unlock [the] [o_chest].")
         clearflag(f_locked)
       else
         printcr("But you don't have the key...")
       endif
     endif
     agree()

   t_take
     printcr(d_take)
     printcr("On second thought, you try to open [the] [o_chest].")
     if (try(l_location, 0, "open [o_chest]")) then
       agree()
     
   t_put
     # this trigger must be executed after the 
     # trigger from o_subject.
     
     if testflag(f_locked) then
       printcr("[the] [o_chest] seems to be locked.")
     else     
       if not(testflag(f_open)) then
         printcr("(opening [the] [o_chest] first).")
         setflag(f_open)
         clearflag(f_opaque)
       endif
       move(o_subject, o_chest)
       o_subject.r_preposition = %prepos
       clearflag(o_subject.f_bypass)
     endif
     agree() # for lamp
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_keyhole_chest

 DESCRIPTIONS
   d_sys        "the keyhole", "the lock"

 CONTAINED in l_chest_room

 TRIGGERS
   "put [o_subject] in [o_keyhole_chest]" -> t_put

   t_put
     if not(equal(o_subject, o_key)) then
       printcr("Better try a key...")
     endif
     # subject = key will be handled by t_put trigger from o_key
     agree()

   t_entrance  # avoid printing an extra <CR> by default t_entrance
     agree() 

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_key

 DESCRIPTIONS
   d_sys        "an old brass key"

   d_entr_long  "There is [a] [o_key] here."

   d_entr_short "There is [a] [o_key] here."

   d_exa        "It's just [a] [o_key]."

   d_cannot_go  "The moment you want to enter the room you feel there is /
                 some force holding you back. [the] [o_key] vibrates slightly."

   d_throw      "You throw [the] [o_key] to the [dir], but as it's about to /
                 leave the room it bounces back on what seems an invisible /
                 shield and lands on the floor."

   d_icon       "icons\\\\Brass key.Png"

 CONTAINED in o_vault

 FLAGS
   f_takeable = 1

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "put [o_key] in [o_keyhole_chest]" -> t_put
   "throw [o_key] [dir]"        -> t_throw
   "throw [o_key] to  [dir]"    -> t_throw

   t_exit
     # if the player has the key he may not enter the chest room
     if owns(o_player, %this) and ((equal(l_location, l_dial_room) AND equal(%dir, w)) 
                             OR (equal(l_location, l_passageway) AND equal(%dir, n))) then
       printcr(d_cannot_go)
       o_player.r_key_blocked += 1   # must try at least 3 times until Fred helps
       disagree()
     else
       agree()

   t_put
     if owns(o_player, o_key) then
       printcr("You put [the] [o_key] into [the] [o_keyhole_chest].")
       move(o_key, o_keyhole_chest)
     else
       printcr("But you don't have the key!")
     endif
     agree()
     
   t_throw
     # check if player has the key is done by verb prologue
     if (equal(l_location, l_dial_room) AND equal(%dir, w)) OR
        (equal(l_location, l_passageway) AND equal(%dir, n)) then
       move(o_key, l_location)
       printcr(d_throw)
     else
       nomatch()   # let verb default code handle this
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_rope

 DESCRIPTIONS
   d_sys "the rope"
   d_entr_long  "There is a long piece of [o_rope] here."

   d_entr_short "There is a piece of [o_rope] here."

   d_exa        "The rope is about 4 meters long."

   d_take       "You pull [the] [o_rope] and try to take it, but it /
                 does not give in. It seems to be attached to /
                 something."

   d_no_time    "[the] [o_npc] looks at you. We don't have time for /
                 this. We need to get you out of here!"

   d_tie        "Ok [the] [o_rope] is now tied to [o_spec]."

   d_dangling   "There is [a] [o_rope] dangling from [the] [o_hole] /
                 in the ceiling."

   d_pull       "You pull [the] [o_rope], but it doesn't give in. /
                 Apparently, the hook it is tied to is stuck /
                 behind something."

   d_icon       "icons\\\\Rope.Png"

 CONTAINED in o_chest

 FLAGS
   f_takeable = 1
   f_fixed    = 0
   f_dangling = 0

ATTRIBUTES
   r_tied_to  = %none
   r_ifi_icon = d_icon
   r_dummy    = %none

 TRIGGERS
   "look"                         -> t_look
   "inventory"                    -> t_i
   "examine [o_rope]"             -> t_exa
   "take [o_rope]"                -> t_take
   "pull [o_rope]"                -> t_pull
   "tie [o_rope] to [o_spec]"     -> t_tie
   "untie [o_rope]"               -> t_untie
   "untie [o_rope] from [o_spec]" -> t_untie_from

   t_entrance
     if not(equal(r_tied_to, %none)) then
       if cansee(o_player, o_rope) and owns(owner(o_player), o_rope) then
         printcr("There is [a] [o_rope] tied to [the] [o_rope.r_tied_to].")
       endif
     else
       if testflag(f_dangling) then
         printcr(d_dangling)
       else
         nomatch() # use default t_entrance

   t_exit
     # check if the rope is not attached to something immobile
     # location alcove will handle this by itself
     if equal(o_rope.r_tied_to, %none) or equal(l_location, l_alcove) then
       agree()
     endif
     r_dummy = o_rope.r_tied_to        # o_rope.r_tied_to.f_fixed does not work
     if testflag(r_dummy.f_fixed) then
       printcr("(dropping [the] [o_rope] first).\n")
       move(o_rope, owner(o_actor))
     endif
     agree()

   t_exa
     if not(equal(r_tied_to, %none)) then
       printcr("[the] [o_rope] is tied to [the] [o_rope.r_tied_to].")
     else
       nomatch()

   t_i
     if owns(o_player, %this) then
       indent()
       print("[a] [o_rope]")
       if equal(r_tied_to, %none) then
         printcr(".")
       else
         print(", tied to the")
         print(r_tied_to)
         printcr(".")
     else
       nomatch()

   t_look
     if testflag(f_dangling) then
       printcr("There is [a] [o_rope] dangling from [the] [o_hole].")
     else
       nomatch() # execute common trigger
     endif
     agree()

   t_take
     if owns(o_npc, %this) then
       printcr(d_no_time)
     else
       if testflag(f_dangling) then
         printcr(d_take)
       else
         nomatch()
       endif
     endif

   t_pull
     if testflag(f_dangling) then
       printcr(d_pull)
     else
       if owns(o_npc, o_rope) then
         printcr(d_no_time)
       else
         printcr("You pull [the] [o_rope]. But why?")
       endif
     endif
     agree()

   t_tie
     if equal(o_spec, o_lever) then
       # will be handled by the lever object
       nomatch()
     endif
     if testflag(o_spec.f_tieable) then
       if not(equal(r_tied_to, o_spec)) then
         r_tied_to = o_spec
         printcr("Ok, the [o_rope] is now tied to the [o_spec].")
       else
         printcr("But the [o_rope] is already tied to the [o_spec].")
         disagree()
       endif
     else
       # let verb handle this one, therefore return nomatch()
       nomatch()
     endif

   t_untie
     if equal(o_rope.r_tied_to, %none) then
       printcr("But the [o_rope] isn't tied to anything.")

   t_untie_from
     if not(equal(o_rope.r_tied_to, o_spec)) then
       printcr("But the [o_rope] is not tied to [the] [o_spec].")

   t_tie_to_hook
     r_tied_to = o_hook

   t_no_tied_to
     r_tied_to = %none

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_hook

 DESCRIPTIONS
   d_sys         "the hook", "the eye"

   d_entr_long   "There is [a] [o_hook] here"

   d_entr_short  "There is [a] [o_hook] here."

   d_exa         "This is a metal hook, about two feet long. On one side "
                 "is an eye to tie something to."

   d_fred_enters "Just as you are about to throw [the] [o_hook],all of a /
                  sudden [the] [o_npc] rushes into the room and shouts /
                  at you..... "

   d_throw_1     "Don't throw that [o_hook]! If it gets lost you'll never /
                  escape!"

   d_throw_2     "[the] [o_npc] holds your arm... I wouldn't do that if /
                  I were you. You really need that hook to get out of here."

   d_icon        "icons\\\\Hook.Png"

 CONTAINED in l_escape_room

 FLAGS
   f_takeable = 1
   f_fixed    = 0

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "take [o_hook]"                   -> t_take
   "throw [o_hook] through [o_hole]" -> t_throw

   t_throw
     if not(equal(o_rope.r_tied_to, %this)) then
       if not(equal(owner(o_npc), l_location)) then
         move(o_npc, l_location)
         print(d_fred_enters)
         printcr(d_throw_1)
       else
         # Fred is in the room
         printcr(d_throw_2)

   t_take
     if owns(o_npc, %this) then
       printcr("[the] [o_npc] looks at you. We don't have time for /
                this. We need to get you out of here!")
     else
       nomatch()  # let verb code handle this
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_hole

 DESCRIPTIONS
   d_sys        "the hole"

   d_entr_long  "There is [a] [o_hole] in the ceiling."

   d_entr_short "There is [a] [o_hole] in the ceiling."

   d_exa        "[the] [o_hole] seems large enough to climb through. /
                 if only you could reach it..."

 CONTAINED in l_escape_room

 # There are no local flags.

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_ladder
 DESCRIPTIONS
   d_sys   "metal ladder"

   d_entr_alcove  "Attached to the south wall is a [o_ladder]."

   d_entr_grating "Attached to the floor is a ladder."

   d_entr_other   "There is a [o_ladder] here."

   d_exa_alcove   "The ladder is about 7 ft long."

   d_locked       "The [o_ladder] is firmly attached to the "

   d_climb        "You climb the ladder and go up to the..."

 CONTAINED in l_alcove

 FLAGS
   f_takeable = 1

 TRIGGERS
   "examine [o_ladder]"   -> t_exa
   "get [o_ladder]"       -> t_get
   "drop [o_ladder]"      -> t_drop
   "climb [o_ladder]"     -> t_climb
   "climb [o_south_wall]" -> t_climb
   "go up"                -> t_climb

   t_entrance
     if equal(owner(o_ladder), l_alcove) then
       printcr(d_entr_alcove)
     endif
     if equal(owner(o_ladder), l_east_of_grating) and not(testflag(o_clamp.f_open)) then
       printcr(d_entr_grating)

   t_exa
     printcr(d_exa)
     if not(testflag(o_clamp.f_open)) then
       if trigger(t_clamped) then
         disagree() 

   t_get
     if testflag(o_clamp.f_open) then
       nomatch()
     else
       if trigger(t_clamped) then
         disagree()

   t_clamped
       printcr(d_locked)
       if equal(owner(o_ladder), l_alcove) then
         print(o_south_wall)
       else
         print("floor")
       endif
       printcr(" by a [o_clamp].")

   t_climb
     if equal(l_location, l_alcove) then
       printcr(d_climb)
       move(o_player, up)
       entrance(l_location)  # move updates current location

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_clamp
 DESCRIPTIONS
   d_sys      "the clamp"

   d_exa      "The clamp is "

   d_no_close "The [o_clamp] won't close. You decide not to bother about it, /
               because you don't want it closed anyway."

 CONTAINED in l_alcove

 FLAGS
  f_openable = 1
  f_lockable = 1
  f_locked   = 1

 TRIGGERS
   "examine [o_clamp]" -> t_exa
   "close [o_clamp]"   -> t_close

   t_exa
     print(d_exa)
     if testflag(f_locked) then
       printcr("closed and locked.")
     else
       if testflag(f_open) then
         printcr("open")
       else
         printcr("closed.")

   t_close
     printcr(d_no_close)
       

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_lever
 DESCRIPTIONS
   d_sys        "the lever"

   d_entr_long  "In the west wall is [a] [o_lever]. It is currently in the " 

   d_entr_short "There is a lever in the [o_west_wall].\n"

   d_exa        "The lever is made of wood, about 1 ft long and 2 inches /
                 thick. About 1 inch from the top it has a circular /
                 recession, half an inch deep.\n"
                "The lever can be up or down. It is currently "

   d_tie        "The [o_rope] fits nicely into the recession at the top of /
                 the [o_lever]. It won't slide off that easy now."

 CONTAINED in l_alcove

 FLAGS
   f_up = 1

 TRIGGERS
   "examine [o_lever]"         -> t_exa
   "tie [o_rope] to [o_lever]" -> t_tie

   t_entrance
     if not(testflag(f_seenbefore)) then
       setflag(f_seenbefore)
       print(d_entr_long)
       if testflag(f_up) then
         print("up ")
       else
         print("down ")
       endif
       printcr("position.")

   t_exa
     printcr(d_exa)
     if testflag(f_up) then
       printcr("up.")
     else
       printcr("down.")

   t_tie
     printcr(d_tie)

END_OBJ
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
$OBJECT o_vault
 DESCRIPTIONS
   d_sys        "the metal vault"

   d_entr_long  "There is [a] [o_vault] here. It's about three feet high, /
                 two feet wide and one feet deep.The vault looks pretty /
                 new and you can see it's very heavy."

   d_entr_short "There is [a] [o_vault] here."

   d_exa        "On [the] [o_vault] is [a] [o_keypad]."

   d_vault_closed "icons\\\\Vault closed.Png"
   d_vault_open   "icons\\\\Vault open.Png"

 CONTAINED in
   l_vault_room

 FLAGS
   f_openable  = 1
   f_lockable  = 1
   f_locked    = 1
   f_opaque    = 1
   f_takeable  = 0
   f_container = 1

 ATTRIBUTES
   r_ifi_icon = d_vault_closed

 TRIGGERS
   "examine [o_vault]"                  -> t_exa
   "look in the [o_vault]"              -> t_exa
   "put [o_subject] [prepos] [o_vault]" -> t_put
   "unlock [o_vault]"                   -> t_unlock
   "close [o_vault]"                    -> t_close
   "open [o_vault]"                     -> t_open
   
   t_entrance
     if not(owns(l_location, o_vault) and cansee(o_actor, o_vault)) then
       agree()
     endif
     setflag(f_seenbefore)
     print("There is [a] [o_vault] here, which is ")
     if testflag(f_open) then
       printcr("open.")
     else
       printcr("closed.")
     endif
     agree()
  
   t_exa
     printcr(d_exa)
     print("[the] [o_vault] is")
     if testflag(f_open) then
       printcr(" open.")
       indent(2)
       indent()
       contents(o_vault)
       indent(-2)
     else
       printcr(" closed.")
     endif
     agree()

   t_put
     # this trigger must be executed after the 
     # trigger from o_subject.
     
     if not(testflag(f_open)) then
       printcr("[the] [o_vault] is closed.")
     else     
       move(o_subject, o_vault)
       printcr("You put the [o_subject] [prepos] [the] [o_vault].")
       o_subject.r_preposition = %prepos
       clearflag(o_subject.f_bypass)
     agree() # for lamp

   t_unlock
     if testflag(f_seenbefore) then
       printcr("Maybe examine [the] [o_vault] first?")
     else
       printcr("Just enter the correct number on [the] [o_keypad].")

   t_close
     printcr("You close the vault door and hear a click.")
     setflag(f_opaque)
     clearflag(f_open)
     setflag(f_locked)
     o_keypad.r_set_to = 0
     r_ifi_icon = d_vault_closed
     l_vault_room.r_ifi_picture = l_vault_room.d_picture_closed

   t_open
     # we let this handle by the verb default code, but need to do
     # something extra first. So we must catch this user input.
     if testflag(o_player.f_cheater) then
       print("\n")
       printcr("**** You are cheating. Don't expect to find a watch now ****")
       print("\n")
       clearflag(o_player.f_cheater) # display this message only once
     endif
     if runverb() then endif
     if testflag(f_open) then
       # cannot test for runverb() because may return disagree()
       r_ifi_icon = d_vault_open
       l_vault_room.r_ifi_picture = l_vault_room.d_picture_open
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_keypad

 DESCRIPTIONS
   d_sys        "the keypad"

   d_entr_long  ""

   d_entr_short ""

   d_exa        "The [o_keypad] is a numerical keypad with keys from 0 /
                 through 9. In the upper part of the keypad is a section that /
                 reads: [r_set_to]."

 CONTAINED on o_vault

 FLAGS
   f_bypass = 1

 ATTRIBUTES
   r_set_to = 0

 TRIGGERS
   "set [o_keypad] to [value]"   -> t_set
   "enter [value]"               -> t_set
   "enter [value] on [o_keypad]" -> t_set
   "close [o_vault]"             -> t_reset
     
   t_set
     if testflag(f_open) then
       printcr("[the] [o_vault] door must be closed first.")
       agree() #exit the trigger here
     endif
     r_set_to = %value
     if equal(%value, 5489) then
       printcr("you hear a click from inside the vault.")
       clearflag(o_vault.f_locked)
       # check if the player is cheating with the vault code
       if (not(owns(o_npc, o_watch))) then
         # yes, he's cheating, because Fred doesnt have the watch yet.
         move(o_watch, o_npc)
         setflag(o_player.f_cheater)
       endif
     else
       printcr("Nothing happens.")
     endif                              # not necessary
     agree()                            # not necessary

   t_reset
     r_set_to = 0
     clearflag(f_open)
     setflag(f_locked)
     printcr("[the] [o_keypad] beeps once.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_watch

 DESCRIPTIONS
   d_sys  "the golden watch"

   d_exa  "[o_npc] is wearing [the] [o_watch]. He won't let you near it."

   d_icon "icons\\\\Watch.Png"

 CONTAINED in o_vault

 FLAGS
   f_takeable = 1

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "take [o_watch]" -> t_take

   t_entrance
     if owns(o_npc, %this) then
       agree()
     else
       nomatch()

   t_take
     if owns(o_npc, %this) then
       if equal(o_subject, o_all) then
         print("Watch: ")
       endif
       printcr("[the] [o_npc] won't let you have it.")
     else
       # let the verb handle it
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_lamp

 DESCRIPTIONS
   d_sys      "the lamp", "the light", "the flashlight"

   d_donthave "You don't have [the] [o_lamp]."

   d_lit      "[the] [o_lamp] is lit. It has power for [m_battery] more /
               moves. Because this is a sample story you may recharge the /
               lamp with the 'charge'command."

   d_empty    "The lamp just went off (use charge to reset it.)"

   d_lamp_on  "icons\\\\Lamp on.Png"
   d_lamp_off "icons\\\\Lamp off.Png"

 CONTAINED in l_chest_room

 FLAGS
   f_lit      = 0
   f_swap     = 1
   f_takeable = 1
   f_tieable  = 1
   f_bypass   = 1     # must be able to turn it on in the dark
   f_moveable = 1

 ATTRIBUTES
   r_ifi_icon = d_lamp_off

 TRIGGERS
   "i"                 -> t_i
   "charge [o_lamp]"   -> t_charge
   "light [o_lamp]"    -> t_light
   "turn on [o_lamp]"  -> t_light
   "turn [o_lamp] on"  -> t_light
   "turn off [o_lamp]" -> t_off
   "turn [o_lamp] off" -> t_off
   "examine [o_lamp]"  -> t_exa
   "use [o_lamp]"      -> t_use

   t_entrance
     if cansee(o_player, o_lamp) then
       setflag(f_seenbefore)
       if owns(l_location, o_lamp) then
         print("There is [a] [o_lamp] ")
         if testflag(f_lit) then
           print("(providing light) ")
         endif
         printcr("here.")
       else
         if not(owns(o_player, o_lamp)) then
           indent()
           print("There is [a] [o_lamp] ")
           if testflag(f_lit) then
             print("(providing light) ")
           endif
           print(o_lamp.r_preposition)
           print(" the ")
           printcr(owner(o_lamp))
       endif
     endif
     agree()
          
   t_i
     if owns(o_player, o_lamp) then
       indent()
       print("[a] [o_lamp]")
       if testflag(f_lit) then
         printcr(", providing light")
       else
         printcr(".")
     else
       nomatch()
     
   t_charge
     settimer(m_battery, 250)
     starttimer(m_battery)
     setflag(f_lit)
     disagree()
     
   t_light
     if not(owns(o_actor, o_lamp)) then
       printcr(d_donthave)
     else
       if not(testflag(o_lamp.f_lit)) then
         if not(equal(m_battery, 0)) then
           setflag(o_lamp.f_lit)
           starttimer(m_battery)
           entrance(l_location)
           r_ifi_icon = d_lamp_on
         else
           printcr("Nothing happens.")
       else     # lamp is lit
         printcr("But the [o_lamp] is already lit.")
       endif
     endif
     disagree()
     
   t_off
     if NOT(owns(o_actor, o_lamp)) then
       printcr(d_donthave)
     else
       if NOT(testflag(o_lamp.f_lit)) then
         printcr("The lamp is already off.")
       else
         clearflag(f_lit)
         stoptimer(m_battery)
         r_ifi_icon = d_lamp_off
         if not(islit(o_actor)) then
           printcr("It is now pitch black.")
         endif
       endif
     endif
     disagree()

   t_empty
     if cansee(o_player, o_lamp) then
       printcr(d_empty)
     endif
     clearflag(o_lamp.f_lit)
     stoptimer(m_battery)

   t_exa
     if testflag(f_lit) then
       printcr(d_lit)
     else
       printcr("[the] [o_lamp] is currently turned off.")

  t_use
    if equal(m_battery, 0) then
      if trigger(t_charge) then endif
    else
      nomatch()

END_OBJ
#-------------------------------------------------------------------------------


# The following objects are used in the dial puzzle.
# Each object has a timer associated with it


#-------------------------------------------------------------------------------
$OBJECT o_red_dial

 DESCRIPTIONS
   d_sys "the red dial"

   d_exa "This is a red circular plate. It looks like a clock dial with one /
          hand, with the numbers 0 through 9 printed at equal distances /
          around the edge. The number 8 is highlighted. There is [a] [o_red_hand] /
          on the dial, pointing towards the number [m_red_dial]."

 CONTAINED in l_dial_room

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_red_dial)
       settimer(m_red_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_red_button

 DESCRIPTIONS
   d_sys "the red button"

   d_exa "[the] [o_red_button] has a diameter of about 2 inches, it is /
          positioned under the [o_red_dial]."
         "In the button is an engraving that says: delta = 1."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 ATTRIBUTES

 TRIGGERS
   "press [o_red_button]"   -> t_press
   "press [o_black_button]" -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       if testflag(f_pressed) then
         # They may not stop the hand once it's noving
         printcr("Nothing happens. The hand keeps moving.")
       else
         setflag(f_pressed)
         starttimer(m_red_dial)
         printcr("[the] [o_red_hand] starts moving.")
       endif
     endif

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       clearflag(f_pressed)       
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_red_hand

 DESCRIPTIONS
   d_sys "the red hand"

   d_exa "[the] [o_red_hand] points to the number [m_red_dial]."

 CONTAINED on o_red_dial

 ATTRIBUTES

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_print_value
     m_red_dial = m_red_dial rem 10
     if testflag(o_red_button.f_pressed) and cansee(o_player, %this) then
       printcr("The red hand is pointing towards the [m_red_dial].")
     endif
     m_red_hand = 0

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_red_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_dial

 DESCRIPTIONS
   d_sys "the green dial"

   d_exa "This is a green circular plate. It looks like a clock dial with one /
          hand, with the numbers 0 throug 9 printed at equal distances around /
          the edge. The number 8 is highlighted. There is a [o_green_hand] on /
          the dial, pointing towards the number [m_green_dial]."


 CONTAINED in l_dial_room

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_green_dial)
       settimer(m_green_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_button

 DESCRIPTIONS
   d_sys "the green button"

   d_exa "[the] [o_green_button] has a diameter of about 2 inches, it is /
          positioned under the [o_green_dial]."
         "In the button is an engraving that says: delta = 2."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 ATTRIBUTES

 TRIGGERS
   "press [o_green_button]" -> t_press
   "press [o_black_button]" -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
        else
       if testflag(f_pressed) then
         # They may not stop the hand once it's noving
         printcr("Nothing happens. The hand keeps moving.")
       else
         setflag(f_pressed)
         starttimer(m_green_dial)
         printcr("The [o_green_hand] starts moving.")
       endif
      endif
      agree()

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       clearflag(f_pressed)       
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_hand

 DESCRIPTIONS  
   d_sys "the green hand"

   d_exa "[the] [o_green_hand] points to the number [m_green_dial]."

 CONTAINED on o_green_dial

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_print_value
     m_green_dial = m_green_dial rem 10
     if testflag(o_green_button.f_pressed) and cansee(o_player, %this) then
       printcr("The green hand is pointing towards the [m_green_dial].")
     endif
     m_green_hand = 0

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_green_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_dial

 DESCRIPTIONS
   d_sys "the blue dial"

   d_exa "This is a blue circular plate. It looks like a clock dial with one /
          hand, with the numbers 0 throug 9 printed at equal distances around /
          the edge. The number 8 is highlighted. There is a [o_blue_hand] on /
          the dial, pointing towards the number [m_blue_dial]."

 CONTAINED in l_dial_room

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_blue_dial)
       settimer(m_blue_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_button

 DESCRIPTIONS
   d_sys "the blue button"

   d_exa "[the] [o_blue_button] has a diameter of about 2 inches, it is /
          positioned under the [o_blue_dial]."
         "In the button is an engraving that says: delta = 3."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 TRIGGERS
   "press [o_blue_button]"   -> t_press
   "press [o_black_button]"  -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       if testflag(f_pressed) then
         # They may not stop the hand once it's noving
         printcr("Nothing happens. The hand keeps moving.")
       else
         setflag(f_pressed)
         starttimer(m_blue_dial)
         printcr("The [o_blue_hand] starts moving.")
       endif
   endif

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       clearflag(f_pressed)       
     endif
     agree()
 
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_hand

 DESCRIPTIONS
   d_sys "the blue hand"

   d_exa "the [o_blue_hand] points to the number [m_blue_dial]."

 CONTAINED on o_blue_dial

 TRIGGERS
   "press [o_black_button]" -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_print_value
     m_blue_dial = m_blue_dial rem 10
     if testflag(o_blue_button.f_pressed) and cansee(o_player, %this) then
       printcr("The blue hand is pointing towards the [m_blue_dial].")
     endif
     m_blue_hand = 0

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_blue_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_black_button

 DESCRIPTIONS
   d_sys        "the black button"

   d_exa        "[the] [o_black_button] is engraved with the word RESET."

 CONTAINED in l_dial_room

 TRIGGERS
   t_entrance
     setflag(f_seenbefore)
     agree()
    
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_inscription
 DESCRIPTIONS
   d_sys        "the inscription"

   # descriptions are printed by l_escape_hallway

   d_exa        "The inscription reads:\n\n /
                 ***************************\n /
                 * Adventurer Tom was here *\n /
                 ***************************\n\n"

   d_hmmm       "hmmm... where did you see that name before?\n"

   d_cannot_see "You cannot get a good view of the inscription from your /
                 current location."

 CONTAINED in l_escape_hallway  # initial location

 FLAGS
   f_first_read = 1

 TRIGGERS
   "read [o_inscription]"    -> t_exa
   "examine [o_inscription]" -> t_exa

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_exa
     if equal(l_location, l_escape_hallway) then
       printcr(d_cannot_see)
     else
       # inscription is in the dark place
       printcr(d_exa)
       if testflag(f_first_read) then
         clearflag(f_first_read)
         printcr(d_hmmm)
       endif

END_OBJ
#-------------------------------------------------------------------------------


#########################################################
# Some scenery objects to make game play more realistic #
#########################################################

#-------------------------------------------------------------------------------
$OBJECT o_generic_wall

 # We set flag f_swap, so this object's printed description will
 # be set to the one that the player's input matched with

 DESCRIPTIONS
   d_sys   "the north wall", "the east wall"
           # south wall is a separate object because of the door in the dial 
           # room (in the south wall) and the ladder in the alcove (south wall)

           # west wall is a separate object because of the lever in the alcove
           # and the row of photos in the 3 living room objects.

   d_exa_1 "It looks just like a wall, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "A wall, allright."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_swap    = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "examine [o_generic_wall]" -> t_exa

   t_entrance
     agree()

   t_exa
     r_examine = rnd(1,3)
     if equal(r_examine, 1) then
       printcr(d_exa_1)
     else
       if equal(r_examine, 2) then
         printcr(d_exa_2)
       else
         printcr(d_exa_3)

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_generic_ceiling
 DESCRIPTIONS
   d_sys   "the ceiling"

   d_exa_1 "It looks just like the ceiling, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "The ceiling, allright."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "examine [o_generic_ceiling]" -> t_exa

   t_entrance
     agree()

   t_exa
     r_examine = rnd(1,3)
     if equal(r_examine, 1) then
       printcr(d_exa_1)
     else
       if equal(r_examine, 2) then
         printcr(d_exa_2)
       else
         printcr(d_exa_3)

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_generic_floor
 DESCRIPTIONS
   d_sys "the floor"

   d_ladder "Clamped to the floor is a [o_ladder]."

   d_exa_1 "It looks just like a floor, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "The floor, allright."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "x [o_generic_floor] " -> t_exa

   t_entrance  # don't call common t_entrance
     agree()

   t_exa
     if equal(l_location, l_closet) then
       if owns(l_closet, o_carpet) OR not(testflag(o_trapdoor.f_hidden)) then
         # do nothing, carpet and/or trapdoor will print a message
         agree()
       else
         # let verb print default message
         nomatch()
     else
       if equal(l_location, l_east_of_grating) then
         if owns(l_location, o_ladder) and not(testflag(o_clamp.f_open)) then
           printcr(d_ladder)
           agree()
         endif
       else
         #default reply
         r_examine = rnd(1,3)
         if equal(r_examine, 1) then
           printcr(d_exa_1)
         else
           if equal(r_examine, 2) then
             printcr(d_exa_2)
           else
             printcr(d_exa_3)

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------
