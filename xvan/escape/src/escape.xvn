
#======================================
# Copyright (c) 2019 Marnix van den Bos
#======================================

#======================================
# Story for XVAN 2.3.4
#======================================

#======================================
# Story info 
#======================================

TITLE         "Escape!"
VERSION       "1.19"
AUTHOR        "Marnix van den Bos"
CREDITS       "type 'credits' on command line."
ORGANIZATION  "XVAN"
COVERTEXT     "An XVAN story"
BACKIMAGE     "images\\\\coverimage.jpg"  # need '\\' in json string
PRIMARY_COLOR "orange"

#===============================
# Use the XVAN and IFI Libraries
#===============================

$insert "XVAN Library v1-3.lib"
$insert "IFI Library.lib"

#==========================
# Story specific includes 
#==========================

$insert "my-includes\\my-includes.xvn"

#==========================
# Locations part
#==========================

#-------------------------------------------------------------------------------
$LOCATION l_hallway_south
 DESCRIPTIONS

   d_picture    "images\\\\Grating.Png"

   d_sys        "the south hallway"

   d_entr_long  "You are in the south hallway. To the north are stairs leading /
                 up. To the west is a passage to the living room and a passage /
                 to the east is blocked by a [o_grating].\n"

   d_entr_short "Exits are west and north//up. A passage to the east is blocked /
                 by a [o_grating].\n"

   d_blocked    "That way is blocked by the [o_grating]."

 EXITS
   n -> l_halfway
   u -> l_halfway
   w -> l_living_south

 FLAGS
   f_seenbefore = 1    # for ifi-xvan, reset in t_init

 ATTRIBUTES
  r_ifi_gx       = 1   # map coordinates
  r_ifi_gy       = 5
  r_ifi_picture  = d_picture
  r_ifi_maplevel = 1

 TRIGGERS
   "east"    -> t_east
   "ifi_map" -> t_ifi_place  # to draw the map

   t_entrance
     clearflag(o_north_wall.f_bypass)  # no north wall, but stairs
     move(o_stairs, %this)  # must be able to refer to stairs
     nomatch()

   t_east
     printcr(d_blocked)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_hallway_north
 DESCRIPTIONS
   d_sys        "the north hallway"

   d_entr_long  "You are in the north hallway. To the west is a passage to the /
                 living room. The hallway continues north to the kitchen.\n"

   d_entr_short "Exits are to the north and west."

 EXITS
   n -> l_kitchen
   w -> l_living_north

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 3
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_south
 DESCRIPTIONS
   d_sys        "the south part of the living room", "the living room"

   d_entr_long  "This is the living room. It's completely abandoned. The /
                 living room continues to the north.\n"
                "There is an exit to the hallway to the east.\n"

   d_entr_short "The hallway is to the east and the living room continues to /
                 the north.\n"

 EXITS
   e -> l_hallway_south
   n -> l_living_middle

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "north"          -> t_north
   "x [o_west_wall]" -> t_exa_wall
   "ifi_map"         -> t_ifi_place

   t_entrance
     clearflag(o_north_wall.f_bypass) # no north wall
     nomatch()

   t_exit
     setflag(o_north_wall.f_bypass)

   t_north
     # must be able to refer to the closet door
     o_closet_door.r_direction = east
     if testflag(l_closet.f_seenbefore) then
       o_closet_door.r_access    = o_closet_door.d_closet_the
     else
       o_closet_door.r_access    = o_closet_door.d_closet_a
     endif
     move(o_closet_door, l_living_middle)
     nomatch()

   t_exa_wall
     print(o_row_photos.d_entr_long)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_middle
 DESCRIPTIONS
   d_sys        "the middle part of the living room", "the living room"

   d_entr_long  "You are in the middle part of the living room. The living /
                 room continues to the north and south.\n"

   d_entr_short "The living room continues to the north and south.\n"

 EXITS
   n -> l_living_north
   s -> l_living_south

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 4
  r_ifi_maplevel = 1

 TRIGGERS
   "east"            -> t_east
   "x [o_west_wall]" -> t_exa_wall
   "ifi_map"         -> t_ifi_place

   t_entrance
     # we want to execute all t_entrance triggers before we print Fred's text
     if runcommon() then
       synchronize(%this, t_entrance, f_any, 1, 0)
       if not(testflag(o_npc.f_seenbefore)) then
         setflag(o_npc.f_seenbefore)
         printcr("\nHit enter...\n")
         hitanykey()
         printcr(o_npc.d_not_met_before)
         move(o_npc, l_dial_room)
       endif
     endif
     clearflag(o_north_wall.f_bypass) # no north wall
     clearflag(o_south_wall.f_bypass)
     disagree()

   t_exit
     setflag(o_north_wall.f_bypass)
     setflag(o_south_wall.f_bypass)

   t_east
     printcr("the [o_closet_door] is closed.")
     disagree()

   t_exa_wall
     print(o_row_photos.d_entr_long)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_living_north
 DESCRIPTIONS
   d_sys        "the north part of the living room", "the living room"

   d_entr_long  "This is the north part of the living room. It's completely /
                 abandoned. There is an exit to the east and the room /
                 continues to the south.\n"

   d_entr_short "There is an exit to the east and the room continues to the /
                 south.\n"

 EXITS
   s -> l_living_middle
   e -> l_hallway_north

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 3
  r_ifi_maplevel = 1

 TRIGGERS
   "x [o_west_wall]" -> t_exa_wall
   "ifi_map"         -> t_ifi_place

   t_entrance
     clearflag(o_south_wall.f_bypass) # no south wall
     nomatch()

   t_exit
     setflag(o_south_wall.f_bypass)

   t_exa_wall
     print(o_row_photos.d_entr_long)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_kitchen
 DESCRIPTIONS
   d_sys        "the kitchen"

   d_entr_long  "This is the kitchen. Just as the living room, it's also /
                 completely abandoned. The only thing that is left is a /
                 [o_counter].\n"
                 "The hallway is to the south.\n"

   d_entr_short "The exit to the hallway is to the south.\n"

 EXITS
   s -> l_hallway_north

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 2
  r_ifi_maplevel = 1

 TRIGGERS
   "n"       -> t_north
   "look"    -> t_look    # for when they are on the counter
   "ifi_map" -> t_ifi_place

  t_entrance
    move(o_kitchen_door, %this)  # must be able to refer to the door
    l_json.r_maptext = o_player.d_maptext_house
    nomatch()

   t_north
     if not(testflag(o_kitchen_door.f_open)) then
       printcr("(opening the kitchen door first).\n")
       if not(try(l_location, 0, 1, "open [o_kitchen_door]")) then
         disagree()
       else
         nomatch()

   t_look
     if owns(o_counter, o_player) then
       printcr("(on the counter).")
       entrance(l_kitchen)
     else
       nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_garden
 DESCRIPTIONS
   d_picture    "images\\\\Shed.jpg"

   d_sys        "the garden", "the hedges", "the hedge"

   d_entr_long  "You are in the garden at the back of the house. East and west /
                 are hedges. To the north is a garden shed.\n"

   d_entr_short "To the north is a shed and a door to the south leads back /
                 into the kitchen.\n"

   d_hedges     "The hedges are very thick. You cannot go through them (actually "
                "they are a boundary of the game world)."

 EXITS
   n -> l_shed

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 1
  r_ifi_picture  = d_picture
  r_ifi_maplevel = 1

 TRIGGERS
  "east"    -> t_hedges
  "west"    -> t_hedges
  "south"   -> t_south
  "ifi_map" -> t_ifi_place

  t_entrance
    clearflag(o_north_wall.f_bypass)    # no walls and floor here
    clearflag(o_east_wall.f_bypass)
    clearflag(o_south_wall.f_bypass)
    clearflag(o_west_wall.f_bypass)
    clearflag(o_generic_ceiling.f_bypass)
    move(o_kitchen_door, %this)  # must be able to refer to the door
    l_json.r_maptext = o_player.d_maptext_outside
    nomatch()

  t_exit
    setflag(o_north_wall.f_bypass)
    setflag(o_east_wall.f_bypass)
    setflag(o_south_wall.f_bypass)
    setflag(o_west_wall.f_bypass)
    setflag(o_generic_ceiling.f_bypass)

  t_hedges
    printcr(d_hedges)

   t_south
     if not(testflag(o_kitchen_door.f_open)) then
       printcr("(opening the kitchen door first).\n")
       if not(try(l_location, 0, 1, "open [o_kitchen_door]")) then
         disagree()
       else
         nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_shed
 DESCRIPTIONS
   d_sys        "the garden shed"

   d_entr_long  "You are now in the garden shed. The shed hasn't been cleaned /
                 for a long time. Maybe never. On the walls you see the nails /
                 that were used to hang the garden utensils on. Almost all of /
                 them are gone now.\n"

   d_entr_short "The exit is to the south\n."

 EXITS
   s -> l_garden

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 0
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_halfway
 DESCRIPTIONS
   d_sys        "Halfway"

   d_entr_long  "You are now halfway up the stairs. The stairs continue up /
                 to the north and down to the south.\n"

   d_entr_short "The stairs continue up to the north and down to the south.\n"

   d_up_closed  "When you walk farther up the stairs one of the steps makes /
                 a hollow sound. You try to pinpoint it but can only narrow /
                 the source down to somewhere around step 10.\n"

   d_up_open    "You carefully step over step 11, so you don't fall down /
                 into the closet.\n"

 EXITS
   n -> l_upstairs
   u -> l_upstairs
   s -> l_hallway_south
   d -> l_hallway_south

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 4
  r_ifi_maplevel = 2

 TRIGGERS
   "up"      -> t_up
   "north"   -> t_up
   "down"    -> t_down
   "ifi_map" -> t_ifi_place
   
   t_entrance
     printcrbold(%this)
     setflag(f_seenbefore)
     print(d_entr_long)
     move(o_stairs, %this)  # must be able to refer to stairs
     clearflag(o_north_wall.f_bypass)  # no north and south wall
     clearflag(o_south_wall.f_bypass)
     agree()

   t_exit
     setflag(o_north_wall.f_bypass)
     setflag(o_south_wall.f_bypass)

   t_up
       if testflag(o_button.f_pressed) then
       # step 11 is open
       printcr(d_up_open)
     else
       printcr(d_up_closed)

   t_down
     # must be able to refer to the closet door
     o_closet_door.r_direction = west
     o_closet_door.r_access    = o_closet_door.d_living
     move(o_closet_door, l_closet)
     nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_upstairs
 DESCRIPTIONS
   d_sys         "Upstairs"

   d_entr_long   "You are upstairs. Behind you, the [o_stairs] lead down. /
                  There is an exit to the west.\n"

   d_entr_short  "The [o_stairs] lead down and there is an exit to the west.\n"

   d_down_closed "When you walk down, one of the steps makes a hollow sound. /
                  You try to pinpoint it but can only narrow the source down /
                  to somewhere around step 10.\n"

   d_down_open  "You carefully step over step 11, so you don't fall down /
                 into the closet.\n"

 EXITS
   s -> l_halfway
   d -> l_halfway
   w -> l_bathroom

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 3
  r_ifi_maplevel = 3

 TRIGGERS
   "down"      -> t_down
   "south"     -> t_down
   "look down" -> t_look_down
   "ifi_map"   -> t_ifi_place
   
   t_entrance
     move(o_stairs, %this) # must be able to refer to stairs
     nomatch()

   t_down
     if testflag(o_button.f_pressed) then
       # step 11 is open
       printcr(d_down_open)
     else
       printcr(d_down_closed)

   t_look_down
     printcr("The [o_stairs] lead down to the south hallway.")

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_bathroom
 DESCRIPTIONS
   d_picture    "images\\\\Sink.Png"

   d_sys        "the bathroom"

   d_entr_long  "This location used to be a bathroom a long time ago. But /
                 now, most of the fixtures have been removed. All that remains /
                 is a [o_sink], mounted to the wall. Above the sink is a water /
                 tap.\n"

   d_entr_short "Mounted to the wall are a water tap and a sink. The exit is /
                 to the east.\n"

 EXITS
   e -> l_upstairs

 ATTRIBUTES
  r_ifi_gx       = 0
  r_ifi_gy       = 3
  r_ifi_maplevel = 3
  r_ifi_picture  = d_picture

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_entrance
    printcrbold(%this)
     if not(testflag(f_seenbefore)) or testflag(o_player.f_verbose) then
       # first visit or verbose mode
       setflag(f_seenbefore)
       printcr(d_entr_long)
     endif

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_closet
 DESCRIPTIONS
   d_sys      "the closet"

   d_entr     "You are in a dark closet below the staircase. "

   d_leave    "\nThe heat is getting too much for you. You hurry back up to /
               the stairs where it is cooler.\n"

 EXITS
   u -> l_halfway
   d -> l_cellar

 ATTRIBUTES
  r_ifi_gx       = 1
  r_ifi_gy       = 4
  r_ifi_maplevel = 1

 TRIGGERS
   "up"                     -> t_up
   "down"                   -> t_down
   "west"                   -> t_west
   "throw [o_subject] down" -> t_throw_d
   "x [o_generic_floor]"    -> t_exa_floor
   "ifi_map"                -> t_ifi_place
   
   t_entrance
     printcrbold(%this)
     setflag(f_seenbefore)
     print(d_entr)
     if not(testflag(o_trapdoor.f_hidden)) then
       printcr("Visible exits are up and down.")
     else
       printcr("The only visible exit is up.")
     endif

   t_up
     stoptimer(m_heat)
     m_heat = 3
     nomatch()
     
   t_down
     if testflag(o_trapdoor.f_hidden) then
       printcr("There is no obvious exit leading down.")
       disagree()
     else
       if not(testflag(o_trapdoor.f_open)) then
         printcr("The trapdoor is closed.")
         disagree()
       else
         move(o_trapdoor, l_cellar)
         nomatch()  # let o_player.t_move handle this

   t_west
     printcr("The [o_closet_door] is closed.")
     disagree()

   t_throw_d
     if cansee(o_player, o_flames) then
       if try(l_location, 0, 0, "throw [o_subject] in [o_flames]") then endif

   t_exa_floor
     entrance(o_trapdoor)
     entrance(o_carpet)

   t_leave
     # timer m_heat has fired
     stoptimer(m_heat)
     m_heat = 3
     printcr(d_leave)
     move(o_player, u)
     entrance(l_halfway)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_cellar
 DESCRIPTIONS
   d_picture_closed "images\\\\Chestroom closed.Png"
   d_picture_open   "images\\\\Chestroom open.Png"

   d_sys          "the cellar"

   d_entr_long    "In the [o_lamp]'s light, you see that you are in a /
                   small dark room. An exit is to the east and there is a /
                   closed [o_trapdoor] in the [o_generic_ceiling].\n"

   d_entr_short   "An exit leads east.\n"

   d_burning      "You walk down the stairs. Down below, you see the red glow /
                   of a fire. As you walk down further, it gets hotter and /
                   hotter. You realize you will be fried if you continue and /
                   you hurry back to the [l_closet].\n"

   d_not_burning  "There is still a lot of smoke, but through the clearing /
                   haze you can make out an old chest and an exit to the /
                   east.\n\n"
                  "On the chest is [a] [o_lamp].\n\n"
                  "Above you, the trap door slams shut. It is now pitch black."

   d_no_go        "When you want to exit the room, you feel there is a force /
                   holding you back. The [o_brass_key] vibrates slightly."

   d_exa_trapdoor "This side of the trapdoor is completely smooth. There's /
                   no way to open it from this side."

   d_no_tie       "There's nothing to tie the rope to."

   d_no_push      "It's locked and will remain so."

 EXITS
   u -> l_closet
   e -> l_dial_room

 FLAGS
   f_tried_before = 0

 ATTRIBUTES
   r_ifi_gx       = 1
   r_ifi_gy       = 4
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture_closed

 TRIGGERS
   "go east"                      -> t_go
   "examine [o_generic_ceiling]"  -> t_exa_ceiling
   "examine [o_trapdoor]"         -> t_exa
   "tie [o_rope] to [o_trapdoor]" -> t_tie
   "push [o_trapdoor]"            -> t_push
   "pull [o_trapdoor]"            -> t_push
   "ifi_map"                      -> t_ifi_place

   t_entrance
     if equal(%dir, d) then
       # they came from the closet      
       if testflag(o_flames.f_extinguished) then
         printcr(d_not_burning)
         blockexit(%this, up)
         clearflag(o_trapdoor.f_open)
         clearflag(o_npc.f_seenbefore)  # Fred must print one-time message
         clearflag(o_player.f_lit)  # here below, it's darkness
         if owns(%this, o_carpet, 0) and testflag(o_carpet.f_soaked) then
           starttimer(m_carpet)
         endif
         l_json.r_maptext = o_player.d_maptext_basement
         disagree()
       else
         if not(testflag(f_tried_before)) then
           setflag(f_tried_before)
           printcr(d_burning)
         else
           printcr("There's flames down there, remember?")
         endif
         move(o_player, u)
         move(o_trapdoor, l_closet)
       endif
       agree()
     else
       if not(runcommon()) then
         disagree()
       endif

   t_go
     if owns(o_player, o_brass_key) and not(testflag(o_chest.f_solved)) then
       printcr(d_no_go)
       disagree()        # stop further processing. If we omit this,
                         # the user will be moved to the dial room
                         # with the key and cannot return
     else
       nomatch()         # act as if there was no match.

   t_exa_ceiling
     printcr("There is a closed trap door in the ceiling.")
     disagree()        # important, otherwise ceiling object will also reply.

   t_exa
     printcr(d_exa_trapdoor)
     disagree()

   t_tie
     printcr(d_no_tie)
     disagree()

   t_push
     printcr(d_no_push)
     disagree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_dial_room
 DESCRIPTIONS
   d_picture       "images\\\\Dialroom.Png"

   d_sys           "the dial room"

   d_entr_long     "This is a room with exits leading west, southwest /
                    and northeast.\n"
                   "On the wall are three dials: [a] [o_red_dial], [a] /
                    [o_green_dial] and [a] [o_blue_dial].\n"
                   "Below the dials are [a] [o_red_button], a [o_green_button] /
                    and [a] [o_blue_button]. In the buttons are engravings.\n\n"
                   "There is also [a] [o_black_button] here, with an engraving.\n"

   d_entr_short    "Exits are west, southwest and northeast.\n"

   d_solved_dials1 "You hear a squeaking noise. Looking at the [o_dials], you /
                    see that all three hands point to the number 8. At the /
                    same time, the door in the south wall moves back a few /
                    inches and turns 180 degrees, revealing a wooden ladder /
                    on its other side. Then the door retracts further, moving /
                    the ladder out of sight. What remains is a small alcove /
                    to the south."

   d_solved_dials2 "You hear a squeaking noise. It looks like it's coming from [the] /
                    [l_dial_room]. Maybe you better check it out..."

 EXITS
   w  -> l_cellar
   sw -> l_passageway
   ne -> l_secure_room

 FLAGS
   f_solved_dials   = 0

 ATTRIBUTES
   r_ifi_gx       = 2
   r_ifi_gy       = 4
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture

 TRIGGERS
   "x [o_south_wall]" ->  t_exa_wall
   "ifi_map"          -> t_ifi_place

   t_exa_wall
     # do this at location level because o_south_wall object
     # may not get this action record
     if trigger(o_door.t_entrance) then endif
     disagree()

   t_exit
     # restore the south wall
     move(o_south_wall, o_player)
     agree()

   t_check_dials
     # This trigger is fired each move by timer m_check_dials, until the
     # dial puzzle is solved.
     
     # Dials count from 0 to 9, so correct the timer value when necessary

     #######################################################################################
     # one solution: press green button, press red button, wait, press blue button, wait 5 #
     #######################################################################################

     # now check if they solved the puzzle
     if equal(m_red_dial, 8) and equal (m_green_dial, 8) and equal (m_blue_dial,8) then
       newexit(l_dial_room, south, l_alcove)
       setflag(o_door.f_open)
       move(o_south_wall, o_player)
       
       # Hide the door, so it will no longer get action records. We want
       # the door to stop responding to entrance and exit and so on.
       # We can also not hide the door but then we have to redefine
       # all its common triggers with a check whether it's opened.
       setflag(o_door.f_hidden)

       setflag(f_solved_dials)
       stoptimer(m_red_dial)
       stoptimer(m_green_dial)
       stoptimer(m_blue_dial)
       stoptimer(m_red_hand)
       stoptimer(m_green_hand)
       stoptimer(m_blue_hand)
       stoptimer(m_check_dials)     # no more checking, they solved it

       setflag(o_door.f_hidden)     # hide the door
       
       if owns(%this, o_player) then
         # player is in the room
         printcr("")
         printcr(d_solved_dials1)
       else
         printcr(d_solved_dials2)
       endif
       setflag(o_ladder.f_seenbefore)
       # increase the score
       printcr("")
       printcritalic(o_player.d_score_50)
       o_player.r_score += 50
     endif
     # reset m_check_dials for next check
     m_check_dials = 0
     settimer(m_check_dials, 0)
     agree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_passageway
 DESCRIPTIONS
   d_picture     "images\\\\Passageway.Png"

   d_sys         "a passageway"

   d_entr_long   "This is a small passageway, with exits leading north and /
                  northeast.\n"

   d_entr_short  "Exits are to the north and northeast.\n"

 EXITS
   n  -> l_cellar
   ne -> l_dial_room

 ATTRIBUTES
   r_ifi_gx       = 1
   r_ifi_gy       = 5
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture

 TRIGGERS
   "ifi_map" -> t_ifi_place

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_secure_room

 DESCRIPTIONS
   d_picture_closed "images\\\\Vaultroom closed.Png"
   d_picture_open   "images\\\\Vaultroom open.Png"

   d_sys            "the secure room"

   d_entr_long      "This is a room with an exit leading south.\n"

   d_entr_short     "The way out is to the south.\n"

 EXITS
   s -> l_dial_room

 FLAGS
   f_lit            = 1   # otherwise Fred cannot see the safe when he is alone
   f_player_visited = 0   # player has not been here yet

 ATTRIBUTES
   r_ifi_gx       = 3
   r_ifi_gy       = 3
   r_ifi_maplevel = 0
   r_ifi_picture  = d_picture_closed

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_exit
     setflag(f_player_visited)     

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_alcove
 DESCRIPTIONS
   d_sys        "the alcove"

   d_entr_long  "You are in the alcove, a pretty narrow space. The way back /
                 to the dial room is to the north.\n"

   d_entr_short "an exit is to the north.\n"

   d_look       "You see light coming in."

   d_climb      "You climb the ladder and go up to the...\n"

 EXITS
   u -> l_east_of_grating
   n -> l_dial_room

 ATTRIBUTES
   r_ifi_gx       = 2
   r_ifi_gy       = 5
   r_ifi_maplevel = 0

 TRIGGERS
   "look up"              -> t_look
   "x [o_south_wall]"     -> t_exa_south
   "x [o_west_wall]"      -> t_exa_west
   "climb [o_ladder]"     -> t_climb
   "climb [o_south_wall]" -> t_climb
   "go up"                -> t_climb
   "ifi_map"              -> t_ifi_place

   t_entrance
     l_json.r_maptext = o_player.d_maptext_basement
     clearflag(o_south_wall.f_bypass)  # no south wall
     if valdir(%this, up) then
       setflag(f_lit)
       if runcommon() then
         printcr("Light is coming in from above.")
       endif
     else
       nomatch()

   t_exa_south
     # do this at location level because o_south_wall object
     # may not get this action record
     if trigger(o_ladder.t_entrance) then endif
     disagree()

   t_exa_west
     # do this at location level because o_south_wall object
     # may not get this action record
     if trigger(o_lever.t_entrance) then endif
     disagree()

   t_climb
     if exit(l_location) and valdir(l_location, up) then
       printcr(d_climb)
       move(o_player, up)
       move(o_grating, l_east_of_grating)
       entrance(l_location)  # move updates current location
     else
       nomatch()

   t_exit
     setflag(o_south_wall.f_bypass)
     if equal(%dir, u) and valdir(l_location, u) then
       move(o_lever, u)

   t_look
     if valdir(%this, up) then
       printcr("You see light coming in.")
     else
       if trigger(o_generic_ceiling.t_exa) then endif

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_east_of_grating
 DESCRIPTIONS
   d_sys         "East of grating"

   d_entr_long   "You are on the other side of the grating, which blocks your /
                  way west. A corridor leads east.\n"

   d_entr_short  "A passage to the west is blocked by a [o_grating].\n"

   d_entr_add1   "\nYou can go back down to the alcove."

   d_pull_ladder "You firmly pull the rope, but the ladder does not give /
                  in. You hear the lever clicking, though."

   d_close       "You firmly pull the [o_rope]. You feel the lever switching /
                  into the up position. The alcove's south wall swings up /
                  and latches. Fortunately, the rope slipped off the lever /
                  just before the wall closed.\n\nYou hear a faint click /
                  from within the clamp."

   d_blocked     "That way is blocked by the [o_grating]."
                  
 EXITS
   d -> l_alcove
   e -> l_escape_hallway

 FLAGS
   f_lit           = 1
   f_solved_ladder = 0

 ATTRIBUTES
  r_ifi_gx       = 2
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "west"                -> t_west
   "pull [o_rope]"       -> t_pull
   "x [o_generic_floor]" -> t_exa
   "ifi_map"             -> t_ifi_place

   t_entrance
     l_json.r_maptext = o_player.d_maptext_house
     if runcommon() then
       if valdir(%this, down) then
         printcr(d_entr_add1)

   t_exit
     if equal(%dir, d) then
       move(o_lever, d)

   t_west
     printcr(d_blocked)

   t_exa
     if owns(l_location, o_ladder) and not(testflag(o_clamp.f_open)) then
       printcr(o_ladder.d_entr_grating)

   t_pull
     if equal(o_rope.r_tied_to, o_ladder) then
       if not(testflag(o_clamp.f_open)) then
         printcr(d_pull_ladder)
         disagree()  # to prevent rope from replying
       else
         nomatch()  # let verb handle oit
       endif
     else
     if equal(o_rope.r_tied_to, o_lever) then
       printcr(d_close)
       blockexit(%this, down)
       move(o_ladder, %this)
       move(o_clamp, %this)
       move(o_rope, o_player)  # in case the rope was on the floor
       clearflag(o_clamp.f_locked)
       o_rope.r_tied_to = %none
       setflag(f_solved_ladder)
       move(o_npc, l_circular_room)
       o_npc.r_loc_next = l_east_of_grating
       disagree()  # to prevent rope from replying
     endif

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_escape_hallway
 DESCRIPTIONS
   d_sys        "the west escape hallway"

   d_entr_long  "You are in an east-west hallway. To the west, the hallway /
                 leads back to the grating. Other exits are to the east and /
                 to the south.\n"

   d_entr_short "Exits are to the east, west and south.\n"

 EXITS
  w -> l_east_of_grating
  s -> l_dark_place_1
  e -> l_escape_hallway2

 FLAGS
   f_lit = 1

 ATTRIBUTES
  r_ifi_gx       = 3
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_entrance
     clearflag(o_east_wall.f_bypass)  # no east and west wall
     clearflag(o_west_wall.f_bypass)
     nomatch()

   t_exit
     setflag(o_east_wall.f_bypass)
     setflag(o_west_wall.f_bypass)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_escape_hallway2
 DESCRIPTIONS
   d_sys        "the east escape hallway"

   d_entr_long  "You are in an east-west hallway. It's a pass-through between /
                 locations. No more, no less...\n"

   d_entr_short "There are exits to the east and west.\n"

 EXITS
  w -> l_escape_hallway
  e -> l_circular_room

 FLAGS
   f_lit = 1

 ATTRIBUTES
  r_ifi_gx       = 4
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "ifi_map" -> t_ifi_place

   t_entrance
     clearflag(o_west_wall.f_bypass)
     nomatch()

   t_exit
     setflag(o_west_wall.f_bypass)

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_dark_place_1
 DESCRIPTIONS
   d_sys        "the dark place"

   d_entr_long  "You are in a dark place. It is dimly lit, with an /
                 exit back to the north where you came from. The room /
                 extents to the south.\n\nOne of the walls has a large mural /
                 painted on it.\n\nYou can also make out three buttons way /
                 back on the south wall."

   d_entr_short "Exits are to the north and the south."

   d_lamp       "\nStrangely enough, turning on the [o_lamp] doesn't make a /
                 difference."

 EXITS
   n -> l_escape_hallway
   s -> l_button_room

 FLAGS
   f_lit = 1

 ATTRIBUTES
  r_ifi_gx       = 3
  r_ifi_gy       = 6
  r_ifi_maplevel = 1

 TRIGGERS
   "turn on [o_lamp]" -> t_light
   "ifi_map"          -> t_ifi_place

   t_light
     if trigger(o_lamp.t_light) then
       printcr(d_lamp)
     endif
     disagree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_button_room
 DESCRIPTIONS
   d_sys        "the room with the buttons"

   d_entr_long  "A dimly lit room that is completely empty. On the south wall /
                 are three buttons, below [a] [o_display].\n"

   d_entr_short "On the south wall are three buttons, below [a] [o_display].\n"

 EXITS
   n -> l_dark_place_1

 FLAGS
   f_lit    = 1
   f_solved = 0

 ATTRIBUTES
  r_ifi_gx       = 3
  r_ifi_gy       = 7
  r_ifi_maplevel = 1

 TRIGGERS
   "turn on [o_lamp]" -> l_dark_place_1.t_light
   "ifi_map"          -> t_ifi_place

   t_entrance
     move(o_xyz_buttons, %this)
     if runcommon() then
       if valdir(%this, e) then
         printcr("\nA exit to the east leads into a brightly lit room.")

   t_exit
     if equal(%dir, n) then
       move(o_xyz_buttons, n)
     else
       nomatch()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_computer_room
 DECRIPTIONS
  d_sys        "the computer room"

  d_entr_long  "You are in a small clean room. Everything is clean /
                and white. Mounted to a wall is a large computer screen with /
                two scroll buttons.\n"

  d_entr_short "Mounted to the wall is a large computer screen.\n"

  d_first_entr "When you enter, the wall behind you closes seamlessly. You /
                realize that you are trapped.\n"

  d_nogo       "You can't go [dir]. In fact, there are no visible exits at all."

 FLAGS
   f_lit          = 1
   f_first_entry  = 1

 ATTRIBUTES
   r_ifi_gx       = 4
   r_ifi_gy       = 7
   r_ifi_maplevel = 1

 TRIGGERS
   "[dir]"    -> t_nogo
   "getmeout" -> t_cheat   # This is how they can get out
   "ifi_map"  -> t_ifi_place

   t_entrance
     if testflag(f_first_entry) then
       printcr(d_first_entr)
       clearflag(f_first_entry)
     endif
     nomatch()
     
   t_nogo
     if not(valdir(%this, west)) then
       # they haven't solved the computer room puzzle yet
       printcr(d_nogo)
     else
       nomatch()

   t_cheat
     printcr("\nNote to self: remove cheatcode in final version.")
     newexit(%this, west, l_button_room)
     move(o_player, west)

END_LOC
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
$LOCATION l_circular_room
 DESCRIPTIONS
   d_sys        "the circular room"

   d_entr_long  "\n\n               ooooooo\n"
                "           oo           oo\n"
                "          o    snake      o\n"
                "   <==   oo               oo   ==>\n"
                "         o-------(@)-------o\n"
                "         oo               oo\n"
                "          o     pit       o       N\n"
                "           oo           oo      W + E\n"
                "               ooooooo            S\n\n"
                "A room in the shape of a circle. Its diameter from wall to /
                 wall is 10 ft (3 m), about the length of the ladder. Actually, /
                 it is only half a room. The lower half of the circle is /
                 a 12 ft (4 m) deep [o_pit].\nAn exit leads to the east.\n"
                "\nIn the middle of the room is a [o_disk].\n"

   d_entr_short "A circular shaped room with a wooden disk in the center. /
                 The lower half of the room is a pit.\n"

 EXITS
   w -> l_escape_hallway2
   e -> l_escape_room

 FLAGS
   f_lit = 1

 ATTRIBUTES
  r_ifi_gx       = 5
  r_ifi_gy       = 5
  r_ifi_maplevel = 1

 TRIGGERS
   "x [o_south_wall]"          -> t_exa
   "south"                     -> o_chute.t_south
   "throw [o_npc] in [o_pit]"  -> t_throw
   "push [o_npc] in [o_pit]"   -> t_throw
   "feed [o_npc] to [o_snake]" -> t_feed
   "ifi_map"                   -> t_ifi_place

   t_entrance
     if owns(o_pit, o_player) then
       # player is in the pit object
       agree()
     else
       nomatch()

   t_exa
     if equal(owner(o_player), o_pit) then
       if trigger(o_chute.t_exa) then endif
       disagree()
     else
       nomatch()

   t_throw
     printcr("fred wouldn't agree. And he's a lot bigger than you.")
     disagree()

   t_feed
     printcr("The snake looks at you with disgust and shakes its head.")
     disagree()

   t_look
     agree()  # handled by object o_pit

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_escape_room

 DESCRIPTIONS
   d_picture     "images\\\\Escaperoom.Png"

   d_sys         "the escape room"

   d_entr_long   "You've reached the Escape Room. In the [o_generic_ceiling] /
                  is a [o_escape_hole] through which you can see the blue /
                  skies. Next to the hole is a [o_ring].\n\n"
                 "To the west is the exit and there is a [o_chute] in the /
                  [o_south_wall].\n"
                 "Above the [o_chute] is an [o_inscription].\n"

   d_entr_short  "There are exits to the west and south. In the /
                  [o_generic_ceiling] is a [o_escape_hole]. Next to the /
                  hole is a [o_ring].\n"

   d_exit        "You enter the [o_chute] and start sliding down... The /
                  chute makes a 180 degree turn and spits you out ...\n"

   d_no_ladder   "Not a good idea. You took the ladder out of the pit, /
                  remember?"

   d_no_climb    "The ladder is not long enough to reach the hole."

 EXITS
   w -> l_circular_room

 FLAGS
   f_lit = 1

 ATTRIBUTES
   r_ifi_gx       = 6
   r_ifi_gy       = 5
   r_ifi_picture  = d_picture
   r_ifi_maplevel = 1

 TRIGGERS
   "south"                                  -> t_south
   "down"                                   -> t_south
   "enter [o_chute]"                        -> t_south
   "up"                                     -> t_up
   "look up"                                -> t_look_up
   "x [o_south_wall]"                       -> t_exa
   "climb [o_ladder]"                       -> t_climb
   "ifi_map"                                -> t_ifi_place

   t_entrance
     move(o_chute, %this)
     setflag(o_chute.f_seenbefore)
     if testflag(o_rope.f_dangling) then
       stoptimer(m_gloves)
     endif
     nomatch()

   t_exit
     if testflag(o_gloves.f_worn) then
       starttimer(m_gloves)

   t_exa
     # we must do this at the location level to prevent
     # o_south_wall to call its default trigger
     if trigger(o_inscription.t_exa) then endif
     if trigger(o_chute.t_exa) then endif
     disagree()

   t_up
     if owns(%this, o_ladder) and not(equal(o_ladder.r_put_against, %none)) then
       printcr("(by climbing the ladder).")
       printcr(d_no_climb)
       disagree()
     endif
     if not(valdir(%this, u)) then
       printcr("The [o_escape_hole] is out of your reach.")
     else
       if trigger(o_rope.t_climb) then endif
       disagree()

   t_look_up
     printcr("There is [a] [o_escape_hole] in the ceiling.")
     agree()

   t_south
     if not(owns(o_pit, o_ladder)) then
       printcr(d_no_ladder)
       disagree()
     endif
     printcr(d_exit)
     move(o_player, o_pit)
     # move Fred to escape room for endgame
     move(o_npc, l_escape_room)
     stoptimer(m_npc)
     setflag(o_npc.f_endgame)
     if trigger(o_pit.t_look) then
       move(o_chute, o_pit)
       # prevent chute from responding because it will now be in the pit
       disagree()

   t_climb
     if equal(o_ladder.r_put_against, %none) then
       nomatch()  # let the ladder handle this
     else
       printcr(d_no_climb)
       disagree()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_exit
 DESCRIPTIONS
   d_picture    "images\\\\Exit.Png"

   d_sys        "the roof"

   d_entr_1     "You're on the roof of the house, basking in sunshine. In /
                 the far distance, you see green meadows and a small river /
                 meandering through the meadows.\n\n"
                "Closer by, you see the garden, surrounded by hedges."

   d_entr_2     "Next to the garden shed you see a large snake, warming /
                 itself in the sunshine. It raises its head and you could /
                 have sworn it winked at you..."

   d_west       "You notice an exit down to the west that you didn't see /
                 before."

   d_fred_calls "\nYou hear Fred calling you from below in the /
                 [l_escape_room]."

   d_give_watch "Looking down the hole, you see Fred looking back at you. /
                 \"Congratulations, you made it out of here. As a reward, I /
                 will give you this fine watch.\" Fred takes the watch off /
                 his wrist and ties it to the other end of the rope. \"This /
                 is for you. It was nice meeting you! I hope you enjoyed this /
                 little sample XVAN game. I'll go now and wait for the next /
                 adventurer.\"\n\n"
                "Fred leaves the room and you hear him mumble \"...frame his /
                 picture and hang it on the wall...\"."

   d_rope       "Looking down the hole, you see that Fred is gone. The /
                 [o_watch] is tied to the end of the rope."

   d_no_pull    "The rope seems to be stuck. It's as if someone in the /
                 [l_escape_room] is blocking it."

   d_pull       "Slowly, so the watch won't fall off, you pull up the rope. /
                 You untie the watch and put it on your wrist. When you move /
                 your arm, the [o_watch] sparkles in the sunshine. It really /
                 is a beautiful watch.\n\n"

   d_exit       "You can't help but feel a bit sorry for Fred. He has to /
                 stay in this small story. But, you tell yourself, /
                 he seems to like it here, and you ask yourself whether he /
                 would be able to survive in the real world outside his /
                 28 locations.\n\n"

                "You see a ladder to the west that you didn't notice before /
                 and climb down to the front of the house."

                "\n\n\n==== You have escaped! ====\n\n\n"
                "Your score is [o_player.r_score] out of /
                 [o_player.r_max_score] points, in [m_moves] moves."
                "\n\n-- thank you for playing --\n\n"  

 FLAGS
   f_lit       = 1
   f_fred_gone = 0
   f_scored    = 0

 ATTRIBUTES
   r_ifi_gx       = 2
   r_ifi_gy       = 1
   r_ifi_picture  = d_picture
   r_ifi_maplevel = 2

 TRIGGERS
   "look down"               -> t_look_down
   "x [o_escape_hole]"       -> t_look_down
   "look in [o_escape_hole]" -> t_look_down
   "pull [o_rope]"           -> t_pull
   "get [o_rope]"            -> t_pull
   "untie [o_rope]"          -> t_pull
   "go down"                 -> t_down
   "go west"                 -> t_west
   "ifi_map"                 -> t_ifi_place

   t_entrance
     move(o_escape_hole, %this)  # must be able to refer to hole
     clearflag(o_endgame_scenery.f_hidden)
     clearflag(o_npc_endgame.f_hidden)
     setflag(l_shed.f_hidden)  # to avoid anbiguities with scope all_locs
     setflag(o_npc.f_hidden)
     setflag(o_snake.f_hidden)
     setflag(f_seenbefore)
     clearflag(o_north_wall.f_hidden)
     clearflag(o_east_wall.f_hidden)
     clearflag(o_south_wall.f_hidden)
     clearflag(o_west_wall.f_hidden)
     clearflag(o_generic_ceiling.f_hidden)
     printcrbold(d_entr_short)
     printcr(d_entr_1)
     printcr(d_entr_2)
     if not(testflag(f_scored)) then
       printcritalic(o_player.d_score_50)
       o_player.r_score += 50
       setflag(f_scored)
     endif
     if not(testflag(f_fred_gone)) then
       printcr(d_fred_calls)
     endif
     move(o_rope, %this)  # must be able to refer to the rope
     clearflag(o_rope.f_dangling)
     agree()

   t_down
     printcr("You've just escaped from there. There's no need to go back...")

   t_west
     printcr("That would make this sample story too large...")

   t_look_down
     if not(testflag(f_fred_gone)) then
       printcr(d_give_watch)
       move(o_npc, l_storage)
       setflag(f_fred_gone)
     else
       printcr(d_rope)

   t_pull
     if not(testflag(f_fred_gone)) then
       printcr(d_no_pull)
       disagree()         # o_rope also has a t_pull trigger
     else
       printcr(d_pull)
       printcr(d_exit)
       printcr("\nHit enter...\n")
       hitanykey()
       clearscreen()
       background(black)
       quit()

END_LOC
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$LOCATION l_storage
 # This location is used to store objects that are removed
 # from the story. It is not accessible to the player
 DESCRIPTIONS
   d_sys "Storage"

END_LOC
#-------------------------------------------------------------------------------

#======================
# OBJECTS part
#======================

#-------------------------------------------------------------------------------
$OBJECT o_player
 # The o_player object is mandatory and represents the human player.
 DESCRIPTIONS
   d_sys   "You", "me", "I", "head"

   d_exa   "The average adventurer.\n"

   d_ask   "\"I've seen many adventurers trying to escape from here.\n /
            Don't disappoint me...\""

   d_why   "Fred looks at you and then seems to decide. \"You are the /
            protagonist in another IF work, created by the development team. /
            The dev team is also responsible for this game we're in right /
            now. When they needed a new tester at some point, they decided /
            to weazle you in this game with the fake mail so they did not /
            have to create a tester from scratch.\n\nI don't approve what /
            they did but, hey, your code is pretty robust so let's give it /
            a try, shall we?\n\nSo your goal is to escape from this house. /
            It's up to you how. If you can make it to the exit without the /
            world crashing, the final test for this project is considered /
            successful.\""

   d_init0 "You shouldn't have clicked on that link...\n\n"
           "The mail only contained a link. The sender was \"the dev team\".\n\n"
           "You don't know any dev team. All alarm bells should have gone /
            off. But you clicked on that link.\n\n"
           "And now look where it got you...\n"

   d_init1 "\n\nYou are in a house, a very strange house. It is like you are /
            in all rooms at the same time. You can see a kitchen and a /
            bathroom, but you can also see through them. The house merges /
            with the outside world. It is like your surroundings are not yet /
            finished.\n\nYou faintly see a garden, hedges and meadows. /
            Looking down, you can also make out blue, red and green objects /
            in the near distance and a shiny object that looks like gold.\n\n"
           "Very weird...\n\n"
           "Someone walks into the room. A big nondescript guy. He is carrying /
            a tablet. When he sees you, he looks surprised and a bit confused.\n"

   d_init2 "\"What's going on? Who put you in here already? The world isn't even /
            finished yet. They all know that the player object should only be /
            enabled during the final test cases and regression tests. We're /
            not that far yet!\""
           "\n\n\"I've just about had it with this dev team!\"\n\n"
           "He looks at you and smiles. \"I'm sorry, buddy. This shouldn't have /
            happened. I am going to fix this right away.\"\n\n"
           "After a few swipes on the tablet screen, he starts typing. You hear /
            him mumbling something about \"commenting out\" and "
           "\"recompiling\".\n\n"
           "And then everything goes black again....\n"

   d_credits "\n\n       ********************\n"
             "       * You must Escape! *\n"
             "       *  An escape game  *\n"
             "       ********************\n"

   d_score_50 "\n\nYour score just went up by 50 points!"

   d_cut      "Technically speaking, committing suicide would count as an /
               escape. But that is not the intent of this game."

   d_no_route "There is no known route from [the] [l_location] to [the] /
               [o_subject]."

   d_help     "We don't offer 'help'. If you are really stuck or want to /
               cheat, check the source code at:\n/
               https:////gitlab.com//Boardedfrontdoor//escape//blob//master//escape.xvn."

   d_save_cheat "\nFred tilts his head and looks at you. \"Come on buddy... This is /
                 so obvious. At least wait a couple of moves before you pull /
                 something like that.\"\n"

   d_maptext_basement "Basement"
   d_maptext_house    "House"
   d_maptext_outside  "Outside"
   d_maptext_escape   "Escape! level"

 CONTAINED in l_hallway_south

 FLAGS
   f_lit         = 1
   f_seenbefore  = 1
   f_alive       = 1
   f_quenched    = 0
   f_may_save    = 1
   f_verbose     = 0
   f_first       = 1
   f_fixed       = 0
   f_any         = 0  # exclude from t_reveal
   f_verb_help   = 1
   f_exits       = 0  # for the 'exits' command

 ATTRIBUTES
   r_is           = are
   r_have         = have
   r_do           = do
   r_nr_to_reveal = 0
   r_next_dir     = %none
   r_dest         = %none
   r_random       = 0
   r_score        = 0
   r_max_score    = 250  # 5 times 50
   r_key_blocked  = 0

 TRIGGERS
   "why am [o_player] here"          -> t_why
   "where am [o_player]"             -> t_where
   "[o_npc], why am [o_player] here" -> t_why
   "[dir]"                           -> t_move
   "go to [dir]"                     -> t_move
   "goto [o_subject]"                -> t_goto
   "ask [o_npc] about [o_player]"    -> t_ask
   "cut [o_player] with [o_spec]"    -> t_cut
   "help"                            -> t_help
   "save"                            -> t_save

   t_entrance
     agree()

   t_entrance_dark
     agree()

   t_exit
     agree()

   t_init
     # This trigger initializes things. It is started by timer
     # m_init that goes off right away.

     l_json.r_maptext      = d_maptext_house
     l_json.r_ifi_maplevel = 1

     # send map title to gui
     if try(l_json, 0, 0, "ifi_map") then endif

     background(blue)       # blue background with white text
     printcr(d_init0)       # print opening message
     printcr("Hit enter...\n")
     hitanykey()
     clearscreen()

     printcr(d_init1)
     printcr("Hit enter...\n")
     hitanykey()
     clearscreen()

     printcr("\n\n[d_init2]")

     printcr("Hit enter...\n")
     hitanykey()
     clearscreen()
     printitalic("[d_credits]\n\n")

     # restore f_seenbefore for south hallway (was set to 1 for ifi-xvan
     clearflag(l_hallway_south.f_seenbefore)

     entrance(owner(%this)) # act as if the player just entered the room
     stoptimer(m_init)      # served its purpose
     starttimer(m_moves)    # start counting moves

   t_move
     if valdir(l_location, %dir) then
       # it's a valid direction
       if exit(l_location) then
         # no object objects to the player leaving the room
         move(o_player, %dir) # move updates current location
         entrance(l_location)
       endif
     else
       nomatch()  # let other objects or verb default code react.
     endif
     agree()

   t_where
     print("[o_player.r_preposition] [the]")
     print(owner(o_player))
     printcr(".")

   t_why
     if cansee(o_player, o_npc) then
       printcr(d_why)
     else
       printcr("You'll have to ask that to someone from the staff.")

   t_cut
     if testflag(o_spec.f_cutter) then
       printcr(d_cut)
     else
       nomatch()

   t_help
     printcr(d_help)
     disagree()

  t_save
     o_dial_puzzle.r_turns -= m_moves
     if equal(o_dial_puzzle.r_turns, 0) then
       printcr(d_save_cheat)
       disagree()
     else
       nomatch()

   t_goto
     print("\n")
     printcr("-----------------------------------")
     if equal(l_location, o_subject) then
       # we have arrived
       notimers()
       agree()
     endif
     r_next_dir = firstdir(l_location, o_subject)
     if equal(r_next_dir, %none) then
       printcr(d_no_route)
       disagree()
     else
       # we need r_dest to check if no one blocked the move and agreed anyway
       r_dest = dest(l_location, r_next_dir)
       if trigger(t_go) then
         if trigger(t_goto) then
           agree()
         else
           disagree()
         endif
       else
         disagree()

   t_go
     if equal(r_next_dir, n) then 
       if try(l_location, 0, 1, "go n") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, s) then 
       if try(l_location, 0, 1, "go s") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, e) then 
       if try(l_location, 0, 1,"go e") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, w) then 
       if try(l_location, 0, 1, "go w") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, ne) then 
       if try(l_location, 0, 1, "go ne") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, nw) then 
       if try(l_location, 0, 1, "go nw") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, se) then 
       if try(l_location, 0, 1, "go se") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, sw) then 
       if try(l_location, 0, 1, "go sw") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, u) then 
       if try(l_location, 0, 1, "go u") and equal(l_location, r_dest) then agree() else disagree() endif
     endif
     if equal(r_next_dir, d) then 
       if try(l_location, 0, 1, "go d") and equal(l_location, r_dest) then agree() else disagree() endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_npc
 DESCRIPTIONS
   d_sys             "Fred", "the nondescript guy"
   d_exa             "He's just a nondescript guy"  # no '.'
   d_entr            "Fred enters the room."
   d_leave           "Fred leaves the room."

   d_ask             "\"I'm walking around to see how you do and make notes /
                      about things we can improve. You may also ask me /
                      about things whose purpose is unclear. Just say 'ask /
                      Fred about <thing>'\"."

   d_not_met_before  "\n\nSomeone walks into the room. A big nondescript guy, /
                      carrying a tablet. He looks vaguely familiar, but you /
                      can't remember when or where you've met before. He /
                      starts talking to you.\n"
                     "\"Hi there, you must be the new adventurer. I'm Fred. /
                      I'm a non-player character. I live here. Although this /
                      is a small story with only a few locations, I like it /
                      here. It's my home.\n\n"
                     "\"Your goal is to escape from this story. In order to /
                      pull that off, you will need my help. You may ask me /
                      about things and I might give a clue. I can also perform /
                      actions for you.\n\n"
                     "\"Oh, before I forget...\" Fred raises his tablet and /
                      takes a picture of you.\n\n"
                     "\"Hope to see you soon, buddy.\" Fred pulls a key from /
                      his pocket and opens the closet door. He looks at you /
                      and smiles:\n\n\"Happy adventuring!\"\n\n/
                      Fred steps into the closet. You hear the sound of the /
                      door being locked and after some time there's a sound of /
                      squeaking hinges, followed by a slam.\n\n"
                     "You are alone again."

   d_met_again       "\n[o_npc] is here. He looks happy to see you. \"Hey /
                      buddy, so glad you made it this far\". He pulls out his /
                      tablet and starts typing. \"I'll award you 50 /
                      points for your achievements. But you're not there yet. /
                      There's more to do before you can get out of here,\" /
                      he says.\n\n"
                     "\"I'll be walking around here between locations. If you /
                      want me to stay, say 'Fred, wait'. To let me go again, /
                      say 'Fred, go'. Otherwise, I'll stay forever, and /
                      you may need me in another room. You may also ask me /
                      about things. Just say 'Fred, tell me about something' /
                      or 'ask Fred about something'.\".\n\n"
                     "\"Happy adventuring!\"."

   d_why             "I'm here to monitor your progress and make notes about /
                      things to improve in the final release of Escape!"

   d_where           "He said he was going to the cellar to meet you there."

   d_cut             "\"Don't be stupid. They would respawn me instantly\"."

   d_throw_hook      "With an impressive swing, Fred throws the [o_hook] /
                      at the ceiling, where it clasps to the [o_ring]."

   d_no_throw        "Fred looks at you. \"I thought you would have figured it /
                      out by now. Throwing the hook at this moment is not a /
                      good idea. Nice rope, by the way.\""

   d_rope_attach     "\nSince the [o_rope] is tied to the hook, it follows /
                      the hook."

   d_dangling        "The [o_rope] is dangling from the ceiling."

   d_sees_safe1     "\nYou hear a voice in one of the other rooms saying /
                      \"Hey, there's the good old safe. I almost forgot it /
                      was there. Hope I can remember the code. It was /
                      something like 5489. Yes! I never forget numbers.\""

   d_sees_safe2     "[o_npc] sees [the] [o_safe] and says \"Hey, there's the /
                      good old safe. I almost forgot it was there. Maybe I /
                      can remember the code. It was something like 5489. I'll /
                      try that. Yes! I never forget numbers.\""

   d_takes_watch1    "The voice continues. \"Oh my, that's a beautiful watch /
                      in there!\""

   d_takes_watch2    "Opening the safe reveals [a] [o_watch]. Before you /
                      can do anything, [o_npc] snatches the watch out of /
                      the safe, puts it around his wrist and slams the /
                      safe door shut. Just before the safe closed, you /
                      caught a glimpse of something reddish brown."

   d_key             "\nFred looks at you carefully. \"Ah, I see you've got [the] /
                      [o_brass_key]! /
                      Also noticed you got some trouble getting into the /
                      cellar with the key. Hmmm, what's going on here?\"\n\n"
                     "Fred takes his tablet from one of his pockets and starts swiping /
                      on the screen. \"I must first find this story's source file. /
                      They always store them in different places. Ah, got it! Let's /
                      check the source to see see what they did this time.\n"
                     "Oh no, they gave the player's code an extra check. /
                      You'll never be able to enter the cellar when you /
                      carry the key. But maybe I can remove the check\". /
                      Fred's typing on the screen. \"Hmmm, this should work.\n\n"
                     "\"Darn! They made the file read only. They must have /
                      found out I helped the guy that was here last week. /
                      This is not going to work. "
                     "\"Oh, wait! It's only the player code that checks for /
                      the brass key when entering the cellar. My npc code /
                      doesn't. So... Well, you do the math, buddy...\""

   d_give_key        "Fred looks at you and smiles from ear to ear. \"Cool! You /
                      figured it out. I'll meet you in [the] [l_cellar].\" /
                      Fred takes the key and wanders off..."

   d_fred_curious    "\nFred says \"let's open the [o_chest] so we can see /
                      what's in it!!\""

   d_take_rope_hook  "As the [o_rope] is tied to the [o_hook], [o_npc] takes /
                      both the rope and the hook."

   d_refuse_rope     "Fred is about to accept the gift, but seeing that the /
                      [o_rope] is tied to [the] [o_rope.r_tied_to], Fred /
                      refuses your offer: \"It's not going to work that /
                      way.\""

   d_confused        "[o_npc] looks at you, confused. \"I already have the"

   d_specific        "You have to be more specific about where you want to /
                      throw the hook."

   d_icon            "icons\\\\Fred.Png"

CONTAINED in l_storage

FLAGS
   f_alive            = 1
   f_will_take_key    = 0
   f_solved_brass_key = 0
   f_endgame          = 0
   f_open_chest       = 0

 ATTRIBUTES
   r_last_loc    = l_escape_room
   r_last_dir    = %none
   r_loc_next    = l_dial_room
   r_prev_route  = %none
   r_rem         = 0
   r_ifi_icon    = d_icon

 TRIGGERS
   "examine [o_npc]"                                  -> t_exa
   "ask [o_npc] about [o_npc]"                        -> t_ask
   "cut [o_npc] with [o_spec]"                        -> t_cut
   "where is [o_npc]"                                 -> t_where
   "[o_npc], tell [o_player] about [o_spec]"          -> t_tell_subject
   "give [o_rope] to [o_npc]"                         -> t_give_rope
   "give [o_hook] to [o_npc]"                         -> t_give_hook
   "give [o_brass_key] to [o_npc]"                    -> t_give_key
   "give [o_subject] to [o_npc]"                      -> t_give
   "[o_npc], why are [o_player] here"                 -> t_why  # 'you' maps to player
   "[o_npc], lift [o_player]"                         -> t_lift
   "[o_npc], wait"                                    -> t_wait
   "[o_npc], stay"                                    -> t_no_dog
   "[o_npc], go"                                      -> t_go
   "[o_npc], tie [o_rope] to [o_hook]"                -> t_tie
   "[o_npc], tie [o_hook] to [o_rope]"                -> t_tie
   "[o_npc], throw [o_hook]"                          -> t_more_specific
   "[o_npc], throw [o_hook] at [o_generic_ceiling]"   -> t_throw
   "[o_npc], throw [o_hook] [prepos] [o_escape_hole]" -> t_throw
   "[o_npc], throw [o_hook] [prepos] [o_ring]"        -> t_throw
   "[o_npc], open [o_chest]"                          -> t_open_chest
   "[o_npc], unlock [o_chest]"                        -> t_open_chest
   "[o_npc], [action] [o_subject]"                    -> t_wont_help
   "[o_npc], [action] [o_subject] [prepos] [o_spec]"  -> t_wont_help
   "ifi_people"                                       -> t_ifi_people

   t_entrance
     if cansee(o_player, o_npc) then
       if not(testflag(f_seenbefore)) then
         print(d_met_again)
         o_player.r_score += 50
         starttimer(m_npc)
         starttimer(m_housekeeping)
         setflag(f_seenbefore)
       else
         if equal(m_npc, 1) then
           print("\n")
           print(d_entr)
         else
           print("\nFred is here.")
         endif
       endif
       if owns(o_npc, o_watch) then
         printcr(" On his wrist is a beautiful [o_watch].")
       else
         print("\n")
       endif
     endif

   t_housekeeping  # triggered every move
     # check for dial puzzle hint
     if gt(o_dial_puzzle.r_times_pressed, 2) and not(testflag(o_dial_puzzle.f_may_ask)) and
        cansee(o_npc, o_player) then
       printcr(o_dial_puzzle.d_help)
       o_dial_puzzle.r_turns = m_moves + 0  # otherwise r_turns will be the moves timer
       setflag(o_dial_puzzle.f_may_ask)
     endif
     # check for accepting the key
     if gt(o_player.r_key_blocked, 1) and not(testflag(f_will_take_key)) and
        not(testflag(f_solved_brass_key)) and cansee(o_npc, o_player) and
        owns(o_player, o_brass_key) then
       printcr(d_key)
       setflag(f_will_take_key)
     endif

   t_exa
     print("[d_exa].")
     o_player.r_nr_to_reveal = count(%this, f_any, 1)
     if equal(o_player.r_nr_to_reveal, 0) then
       agree()
     endif
     print("\nFred is carrying ")
     setflag(o_player.f_first)
     synchronize(%this, t_reveal, f_any, 1)
     agree() # must use agree() here, because synchronize() returns a value.

   t_cut
     if testflag(o_spec.f_cutter) then
       printcr(d_cut)
     else
      nomatch()

   t_where
     if not(cansee(o_player, o_npc)) and owns(o_npc, o_brass_key) then
       printcr(d_where)
     else
       nomatch()

   t_tell_subject
     # all relevant asks are handled by the applicable object
     if try(l_location, 0, 0, "ask [o_npc] about [o_spec]") then endif

   t_move
     # Trigger for moving around Fred.
     # Initially Fred travels between the dial room and the passageway.
     # After the player has been in the secure room and left it, Fred
     # will travel between the dial room and the secure room.
     # After solving the ladder puzzle, Fred will travel between the 
     # east of grating room and the circular room.
     # When the escape room is accessible (after solving the groove puzzle), Fred
     # will travel between the escape room and the east of grating room.

     # if the player gave fred the key, Fred will move to the cellar and 
     # stay there until the player takes the key again.

     if equal(owner(o_npc), r_loc_next) then
       # Fred is at his destination
       if equal(owner(o_npc), l_cellar) then
         # this is the brass key scenario
         if owns(o_npc, o_brass_key) then
           r_rem = m_moves rem 2
           if cansee(o_npc, o_player) then
             if equal(r_rem, 0) then
               printcr(d_fred_curious)
             endif
             printcr("Fred offers you the key.")
             # stay in the cellar until the player opened the chest
             settimer(m_npc, 0)
             agree()
           endif
         else
           # player has the key or it's on the floor or so.
           if not(testflag(o_chest.f_solved)) then
             r_rem = m_moves rem 2
             if cansee(o_npc, o_player) then
               if equal(r_rem, 0) then
                 #print every third move
                 printcr(d_fred_curious)
               endif
             #stay in the room
             settimer(m_npc, 0)
             agree()
             endif
           else
             # player unlocked and opened the chest
             # continue with Fred's route from before he got the key
             r_loc_next = r_prev_route
           endif
         endif
              
       else         
         if equal(r_loc_next, l_secure_room) then
           # This is the secure room <-> dial room scenario
           r_loc_next = l_dial_room

           # We're in the secure room, Fred takes the watch if he hasn't done so already
           # Check if Fred can see the safe and doesn't have the watch yet
           if cansee(o_npc, o_safe) and not(owns(o_npc, o_watch)) then
             setflag(o_watch.f_seenbefore)
             if cansee(o_player, o_safe) then
               printcr(d_sees_safe2)
               printcr(d_takes_watch2)
             else
               printcr(d_sees_safe1)
               printcr(d_takes_watch1)
             endif
             move(o_watch, o_npc, on)
           endif
         else
           if equal(r_loc_next, l_escape_room) or equal(r_loc_next, l_circular_room) then
             # this is the escape room <-> eat of grating room or the 
             # circular room <-> east of grating room scenario
             r_loc_next = l_east_of_grating
           else
             if equal(r_loc_next, l_east_of_grating) then
               if testflag(l_east_of_grating.f_solved_ladder) then
                 # this is the east of grating <-> escape room scenario
                 r_loc_next = l_escape_room
               else
                 # east_of_grating <-> circular room scenario
                 r_loc_next = l_circular_room
               endif
             else
               if equal(r_loc_next, l_dial_room) then
                 # either dial room <-> passageway or dial room <-> secure room scenario
                 if testflag(l_secure_room.f_player_visited) then
                   # Fred may open the safe and take the watch
                   # This is the dial room <-> secure room scenario
                   r_loc_next = l_secure_room
                 else
                   # this is the dial room <-> passageway scenario
                   r_loc_next = l_passageway
                 endif
               else
                 # last option, Fred is in the passageway, the passageway <-> dial room scenario
                 r_loc_next = l_dial_room
               endif
             endif
           endif
         endif
       endif
     endif
     if cansee(o_player, o_npc) then
       print("\n")
       printcr(d_leave)
     endif               # assumes there is a path to destination

     if not(equal(r_loc_next, owner(o_npc))) then
       # if equal, then loc_next is current location and goto() will give a no route msg
       goto(o_npc, r_loc_next)
     endif
     if trigger(t_entrance) then
       settimer(m_npc, 0)
       agree()

   t_wait # tells fred to stop moving around
     if testflag(f_endgame) or testflag(f_open_chest) then
       printcr("\"I'm not going anywhere.\"")
     else
       printcr("\"Huh? Ok, I'll wait, then.\"")
       stoptimer(m_npc)

   t_no_dog
     printcr("\"I'm not a dog\".")
     printcritalic("\n(Fred wants to be taken seriously, use 'wait' instead).")
     disagree()
   
   t_go # tells Fred to start moving again
     if testflag(f_endgame) or testflag(f_open_chest) then
       printcr("\"I think I'll stay. You need me now.\"")
     else
       printcr("\"Ok, see you around. Bye!\"")
       settimer(m_npc, 0) # in case it stopped at value 1
       starttimer(m_npc)

   t_tie
     if equal(owner(o_npc), owner(o_hook)) then
       printcr("Fred picks up the hook first.")
       move(o_hook, o_npc)
     endif
     if equal(owner(o_npc), owner(o_rope)) then
       printcr("Fred picks up the rope first.")
       move(o_rope, o_npc)
     endif
     if owns(o_npc, o_hook) then
       if owns(o_npc, o_rope) then
         o_rope.r_tied_to = o_hook
         printcr("The rope is now tied to the hook.")
       else
         printcr("\"I don't have the [o_rope].\"")
     else
       printcr("\"I don't have the [o_hook].\"")

   t_give_rope
     if owns(o_npc, o_rope) then
       printcr("[d_confused] [o_rope]\".")
       disagree()
     endif
     if equal(o_rope.r_tied_to, %none) then
       printcr("[o_npc] takes the [o_rope].")
       move(o_rope, o_npc)
     else
       if equal(o_rope.r_tied_to, o_hook) then
         printcr(d_take_rope_hook)
         move(o_rope, o_npc)
         move(o_hook, o_npc)
       else
         printcr(d_refuse_rope)

   t_give_hook
     if owns(o_npc, o_rope) then
       printcr("[d_confused] [o_hook]\".")
       disagree()
     endif
     printcr("[o_npc] takes the [o_hook].")
     move(o_hook, o_npc)
     if equal(o_rope.r_tied_to, o_hook) then
       printcr(d_take_rope_hook)
       move(o_rope, o_npc)

   t_give_key
     if testflag(o_chest.f_locked) and not(testflag(f_solved_brass_key)) then
       if testflag(f_will_take_key) then
         printcr(d_give_key)
         move(o_brass_key, o_npc)
         clearflag(f_will_take_key)
         setflag(f_solved_brass_key)
         setflag(f_open_chest)  # make sure Fred stays in the cellar
         # Fred will now go to the cellar, so save his current target location
         r_prev_route = r_loc_next
         r_loc_next   = l_cellar
         # in case Fred was told to wait, cancel the wait
         starttimer(m_npc)
       else
         printcr("\"[o_npc] looks at you suspiciously. What's up? Just go and open [the] [o_chest].\"")
       endif
     else
       printcr("\"We already did that.\"")
     agree()

   t_open_chest
     printcr("Nope, you must do that yourself.")
     
   t_give
     if not(equal(o_subject, o_all)) then
       printcr("I won't be needing [a] [o_subject]. But thanks for offering.")
     else
       nomatch()  # let o_all handle it

   t_why
     printcr(d_why)

   t_lift
     if equal(l_location, l_escape_room) then
       printcr("\"You must be kidding. The [o_escape_hole] is too far away\".")
     else
       printcr("\"I don't think so\".")

   t_give_watch
     if owns(o_npc, o_watch) then
       printcr("\"Not yet...\"")
     else
       printcr("\"What watch?\"")
     endif

   t_more_specific
     printcr(d_specific)
 
   t_throw
     if equal(o_rope.r_tied_to, o_hook) then
       if not(owns(o_npc, o_hook)) then
         printcr("[o_npc] takes the [o_hook] first]")
       endif
       printcr(d_throw_hook)
       move(o_hook, l_storage) # remove the hook from the story
       newexit(l_escape_room, u, l_exit)
       move(o_rope, l_escape_room)
       setflag(o_rope.f_dangling)
       printcr(d_rope_attach)
       printcr("\n[d_dangling]")
       if not(trigger(o_rope.t_no_tied_to)) then
         disagree()
       endif
     else
       printcr(d_no_throw)
     endif

   t_wont_help
     printcr("That won't help in getting you out of here.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_npc_endgame
 DESCRIPTIONS
   d_sys      "Fred", "the nondescript guy"

   d_exa      "He's just a nondescript guy."

   d_listen   "\"Hey buddy, I'm down here! Look down!\""

 CONTAINED in l_exit

 FLAGS
   f_alive  = 1
   f_hidden = 1  # to avoid disambiguation with scope all_locs

 TRIGGERS
   "listen to [o_npc_endgame]"          -> t_listen
   "listen"                             -> t_listen
   "ask [o_npc_endgame] about [o_spec]" -> t_listen
   "x [o_npc_endgame]"                  -> l_exit.t_look_down
   "look at [o_npc_endgame]"            -> l_exit.t_look_down
   "where is [o_npc_endgame]"           -> t_where

   t_entrance
     agree()

   t_listen
     if not(testflag(l_exit.f_fred_gone)) then
       printcr(d_listen)
     else
       nomatch()

   t_where
     if not(testflag(l_exit.f_fred_gone)) then
       printcr("He's down here in the escape room. Look down.")
     else
       printcr("He's gone.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_grating
 DESCRIPTIONS
   d_sys        "the metal grating", "the metal bars", "the metal bar",
                "the metal grate"

   d_exa        "The grating is made of a number of steel bars, each /
                 approximately 4 inches thick. You tap on the bars and /
                 they are all massive. You conclude that this grating is /
                 here to stay.\n"

   d_ask        "\"The toughest grating you've ever seen\"."

   d_nobreak    "Your earlier examination of the [o_grating] yielded that /
                 it cannot be destroyed, remember?"

   d_look_east  "You can make out a hole in the floor behind the grating."

   d_look_west  "Looking through [the] [o_grating], you see the south hallway /
                 where your adventure started."

   d_look_north "Behind the grating is the escape hallway."

   d_through   "There is too little space between the bars."

   d_nosaw     "Trying to cut these massive bars with an almost worn /
                [o_hacksaw] would destroy the saw and render it useless. /
                Better save it to saw something else."

 CONTAINED in l_hallway_south

 FLAGS
   f_cuttable = 1

 TRIGGERS
   "ask [o_npc] about [o_grating]"         -> t_ask
   "break [o_grating]"                     -> t_break
   "break [o_grating] with [o_spec]"       -> t_break
   "cut [o_grating] with [o_hacksaw]"      -> t_cut
   "look through [o_grating]"              -> t_look_through
   "go through [o_grating]"                -> t_through
   "put [o_subject] through [o_grating]"   -> t_through
   "slide [o_subject] through [o_grating]" -> t_through

   t_entrance
     agree()

   t_break
     if testflag(f_seenbefore) then
       printcr(d_nobreak)
     else
       printcr("It is too strong to break.")

   t_cut
     if testflag(o_hacksaw.f_worn) then
       printcr(o_hacksaw.d_worn)
     else
       printcr(d_nosaw)

   t_look_through
     if equal(l_location, l_hallway_south) then
       printcr(d_look_east)
     else
       if equal(l_location, l_east_of_grating) then
         printcr(d_look_west)
       else
         printcr(d_look_north)

   t_through
     printcr(d_through)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_row_photos
 DESCRIPTIONS
   d_sys        "the row of photos", "the photos", "the hall of fame"

   d_entr_long  "\nMounted to the west wall is a [o_row_photos].\n"

   d_entr_short "\nMounted to the west wall is a [o_row_photos].\n"

   d_exa        "Each photo is a portrait of a person, framed and fixed to /
                 the wall (the photo, not the person).\n"

   d_ask        "\"It's sort of a hall of fame\"."

   d_good_look  "From your current position you only have a good view of the photos"

 CONTAINED in l_living_south

 FLAGS
   f_referred = 0

 ATTRIBUTES
   r_dest = %none

 TRIGGERS
   "examine [o_row_photos]"           -> t_exa
   "ask [o_npc] about [o_row_photos]" -> t_ask
   "get [o_row_photos]"               -> t_take  # name it t_take in case of 'take all'
   "count [o_row_photos]"             -> t_count

   t_exit
    r_dest = dest(%this, %dir)
    if equal(r_dest, l_living_north) or
       equal(r_dest, l_living_middle) or 
       equal(r_dest, l_living_south) then
       move(%this, r_dest)
    endif

   t_exa
    if runverb() then
      print(o_row_photos.d_good_look)
      if equal(l_location, l_living_south) then printcr(" 1 and 2.") endif
      if equal(l_location, l_living_middle) then printcr(" 3 and 4.") endif
      if equal(l_location, l_living_north) then printcr(" 5 and 6.") endif
      if not(testflag(f_referred)) then
        printcr(o_photo.d_exa_1)
      endif
    endif

   t_take
     printcr("The photos are firmly attached to the wall.")
     disagree()

   t_count
     printcr("There are 6 photos.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_photo
 DESCRIPTIONS
   d_sys      "the photo", "the picture", "the frame"

   d_specific "You have to be more specific about which photo you want to /
               [action]."

   d_exa_1    "\nYou can refer to a particular photo with \"photo <number>.\""

   d_photo_1  "A photo of a man. Inscribed in the frame is the text \"Adventurer /
               Rick. He did not make it.\""

   d_photo_2  "A photo of a man. Inscribed in the frame is the text \"Adventurer /
               Mike. He made it with a full score.\""

   d_photo_3  "A photo of a woman. Inscribed in the frame is the text \"Adventurer /
               Shirley. She made it with a full score.\""

   d_photo_4  "A photo of a man. Inscribed in the frame is the text \"Adventurer /
               Tom. He did not make it\"."

   d_photo_5  "A photo of a woman. Inscribed in the frame is the text \"Adventurer /
               Jessica. She made it.\""

   d_photo_6  "This is an empty frame. There's no photo in it."

 CONTAINED in l_living_south

 FLAGS
   f_referred = 0

 ATTRIBUTES
   r_dest = %none

 TRIGGERS
   "count [o_photo]"                   -> o_row_photos.t_count
   "[action] [o_photo]"                -> t_specific
   "[action] [prepos] [o_photo]"       -> t_specific
   "examine [o_photo] [ord]"           -> t_exa
   "ask [o_npc] about [o_photo]"       -> o_row_photos.t_ask
   "ask [o_npc] about [o_photo] [ord]" -> o_row_photos.t_ask
   "get [o_photo] [ord]"               -> t_take
   "look at [o_photo] [ord]"           -> t_exa
   "look [prepos] [o_photo] [ord]"     -> t_look_prepos

   t_entrance
     agree()

   t_exit
    r_dest = dest(%this, %dir)
    if equal(r_dest, l_living_north) or
       equal(r_dest, l_living_middle) or 
       equal(r_dest, l_living_south) then
       move(%this, r_dest)
    endif

   t_specific
    printcr(d_specific)
    printcr(d_exa_1)
    disagree()

   t_exa
    if lt(%ord, 1) or gt(%ord, 6) then
      printcr("There are only 6 photos, numbered from 1 to 6.")
      disagree()
    endif
    if equal(l_location, l_living_south) then
      if equal(%ord, 1) then printcr(d_photo_1) disagree() endif
      if equal(%ord, 2) then printcr(d_photo_2) disagree() endif
      printcr("[o_row_photos.d_good_look] 1 and 2.")
      disagree()
    endif
    if equal(l_location, l_living_middle) then
      if equal(%ord, 3) then printcr(d_photo_3) disagree() endif
      if equal(%ord, 4) then printcr(d_photo_4) disagree() endif
      printcr("[o_row_photos.d_good_look] 3 and 4.")
      disagree()
    endif
    if equal(l_location, l_living_north) then
      if equal(%ord, 5) then printcr(d_photo_5) disagree() endif
      if equal(%ord, 6) then printcr(d_photo_6) disagree() endif
      printcr("[o_row_photos.d_good_look] 5 and 6.")
      disagree()
    endif

   t_take
     printcr("The photo is firmly attached to the wall.")
     disagree()

   t_look_prepos
    if lt(%ord, 1) or gt(%ord, 6) then
      printcr("There are only 6 photos, numbered from 1 to 6.")
      disagree()
     else
       printcr("There is nothing [prepos] photo [ord].")
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_counter
 DESCRIPTIONS
   d_sys "the counter", "the top"

   d_exa  "It's just the counter top. All cupboards have been removed."

 CONTAINED in l_kitchen

 FLAGS
   f_supporter = 1  # may sit on it and put stuff on it

 TRIGGERS
   "examine [o_counter]"            -> t_exa
   "sit on [o_counter]"             -> t_sit
   "climb [o_counter]"              -> t_sit
   "climb on [o_counter]"           -> t_sit
   "get on [o_counter]"             -> t_sit
   "get off [o_counter]"            -> t_off
   "get off"                        -> t_off

   t_exa
     printcr(d_exa)
     contents(%this)

   t_sit
     if not(owns(o_counter, o_player)) then
       move(o_player, o_counter, on)
       printcr("You are now sitting on the [o_counter].")
     else
       printcr("You already are.")

  t_off
    printcr("You are standing on your feet again.")
    move(o_player, l_kitchen)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_kitchen_door
 DESCRIPTIONS
   d_sys       "the door", "the kitchen door"

   d_exa       "The door is made of wood; it gives access to the garden."

   d_exa1      "The door is made of wood; it leads back into the kitchen."

   d_entr      "\nTo the north is a door that leads to the garden."

   d_entr1     "\nTo the south is a door that leads to the kitchen."

   d_no_window " In the upper half of the door is an opening where /
                a window used to be."

 CONTAINED in l_kitchen

 FLAGS
   f_openable = 1
   f_lockable = 1
   f_locked   = 1

 ATTRIBUTES
   r_key = o_rusty_key

 TRIGGERS
   "examine [o_kitchen_door]"                 -> t_exa
   "look [prepos] [o_kitchen_door]"           -> o_kitchen_window.t_look_through
   "put [o_player] [prepos] [o_kitchen_door]" -> o_kitchen_window.t_look_through
   "open [o_kitchen_door]"                    -> t_open
   "open [o_kitchen_door] with [o_rusty_key]" -> t_open_key
   "close [o_kitchen_door]"                   -> t_close

   t_entrance
     if owns(l_kitchen, %this) then
       printcr(d_entr)
     else
       printcr(d_entr1)

   t_exa
     if owns(l_kitchen, %this) then
       print(d_exa)
     else
       print(d_exa1)
     endif
     print(" and it is currently ")
     if testflag(f_open) then
       printcr("open.")
     else print("closed.")
     endif
     # print info about window and keyhole
     if testflag(o_kitchen_window.f_broken) then
       print(d_no_window)
     else
       print(o_kitchen_window.d_entr_short)
     endif
     printcr("\nAbout halfway in the door is a [o_keyhole_door].")
     contents(o_keyhole_door)

   t_open
     if testflag(f_open) then
       printcr("But the door is already open.")
       disagree()
     endif
     if not(testflag(f_locked)) then
       printcr("Ok, the kitchen door is now open.")
       setflag(f_open)
       newexit(l_kitchen, north, l_garden)
       newexit(l_garden, south, l_kitchen)
     else
       printcr("The door seems to be locked.")
       disagree()

   t_open_key
     if testflag(f_open) then
       printcr("But the door is already open.")
       disagree()
     endif
     if not(testflag(f_locked)) then
       printcr("(the door isn't locked).")
     else
       if not(try(l_location, 1, 1, "unlock [o_kitchen_door] with [o_rusty_key]")) then
         disagree()
     endif
     if trigger(t_open) then endif
     
   t_close
     if not(testflag(f_open)) then
       printcr("But the door is already closed.")
       disagree()
     endif
     printcr("Ok, the kitchen door is now closed.")
     clearflag(f_open)
     blockexit(l_kitchen, n)
     blockexit(l_garden, s)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_kitchen_window
 DESCRIPTIONS
   d_sys           "the window"

   d_entr_long     "\nThere is a [o_kitchen_window] in the upper half of /
                    the [o_kitchen_door].\n"

   d_entr_short    "\nThere is a [o_kitchen_window] in the upper half of /
                    the [o_door].\n"

   d_exa           "The window is made of glass, which somehow doesn't /
                    surprise you.\n"

   d_smash_no      "You bang on the window with your fist, but with no /
                    success. You need something heavy to break the /
                    window."

   d_broken        "\nScattered over the floor is a broken window that /
                    once was a part of the door."

   d_look_glass    "Through the window you see the garden. At the far /
                    north end, there is a garden shed. You push your /
                    face to the window and try to look down but can't /
                    see right behind the door. If you could only stick /
                    your face further through."

   d_look_no_glass "Because the window is no longer there, you can stick /
                    your head through the opening.\n"

   d_climb         "You don't fit through the opening. It's way too small (or /
                    you are too big)."

   d_scattered     "It's scattered all over the floor."

   d_get           "The [o_kitchen_window] is firmly mounted in the /
                    [o_kitchen_door]. You won't be able to get it out in /
                    one piece."

 CONTAINED in o_kitchen_door

 FLAGS
   f_broken = 0

 TRIGGERS
   "x [o_kitchen_window]"                          -> t_exa
   "get [o_kitchen_window]"                        -> t_get
   "look [prepos] [o_kitchen_window]"              -> t_look_through
   "put [o_player] [prepos] [o_kitchen_window]"    -> t_look_through
#   "look outside"                                 -> t_look_outside
   "look north"                                    -> t_look_outside
   "break [o_kitchen_window]"                      -> t_break_no
   "break [o_kitchen_window] with [o_spec]"        -> t_break
   "throw [o_subject] [prepos] [o_kitchen_window]" -> t_throw
   "throw [o_subject] [prepos] [o_kitchen_door]"   -> t_throw
   "climb through [o_kitchen_window]"              -> t_climb
   "go through [o_kitchen_window]"                 -> t_climb
   
   t_entrance
     if testflag(f_broken) then
       printcr(d_broken)
     else
       print(d_entr_long)

   t_exa
     if testflag(f_broken) then
       printcr(d_scattered)
     else
       nomatch()

   t_get
     if testflag(f_broken) then
       print("[d_scattered] You might hurt yourself.")
       disagree()
     else
       printcr(d_get)

   t_look_outside
     if try(l_location, 1, 0, "look through [o_kitchen_window]") then endif

   t_look_through
     if equal(%prepos, in) or equal(%prepos, out) or 
        equal(%prepos, through) or equal(%prepos, %none) then
       if testflag(f_broken) then
         printcr(d_look_no_glass)
         if equal(l_location, l_kitchen) then
           # looking outside from the kitchen
           if testflag(o_rusty_key.f_hidden) then
             # first time after breaking the glass
             clearflag(o_rusty_key.f_hidden)
             setflag(o_rusty_key.f_seenbefore)
             printcr("There's a rusty key in the outside of the keyhole!")
           else
             printcr("Through the opening you see the garden.")
         else
           # looking inside the kitchen from the garden
           printcr(l_kitchen.d_entr_long)
       else
       printcr(d_look_glass)
     else
       nomatch()

   t_break_no
     printcr(d_smash_no)
     
   # break and throw cannot be the same trigger because they
   # have their subject and specifier reversed.

   t_break
     print("You throw [the] [o_spec] at the window")
     if not(testflag(o_spec.f_heavy)) then
       printcr(", but it bounces back. It obviously isn't /
                heavy enough.")
       move(o_spec, l_kitchen, in)
     else
       printcr(", and it goes straight through. The window /
                is shattered all over the floor. One of the /
                glass fragments is a bit larger than the rest.")
       move(o_spec, l_garden, in)
       setflag(f_broken)
       move(%this, l_kitchen)
       move(o_fragment, l_kitchen)
       setflag(o_fragment.f_seenbefore)
       clearflag(o_opening.f_hidden)
     endif

   t_throw
     # may only work for 'at' and 'through'
     if equal(%prepos, at) or equal(%prepos, through) then
       if try(l_location, 0, 0, "break [o_kitchen_window] with [o_subject]") then agree() endif
     else
       nomatch()

   t_climb
    if testflag(f_broken) then
      printcr(d_climb)
      disagree()
    else
      printcr("The window is in your way.")
      disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_opening
 DESCRIPTIONS
   d_sys       "the opening"

 CONTAINED in o_kitchen_door

 FLAGS
   f_hidden = 1
   f_any    = 0

 TRIGGERS
   "x [o_opening]"                       -> o_kitchen_window.t_look_through
   "look [prepos] [o_opening]"           -> o_kitchen_window.t_look_through
   "put [o_player] [prepos] [o_opening]" -> o_kitchen_window.t_look_through
   "climb through [o_opening]"           -> o_kitchen_window.t_climb
   "go through [o_opening]"              -> o_kitchen_window.t_climb

   t_entrance
     agree()

END_OBJ       

#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_keyhole_door
 DESCRIPTIONS
   d_sys  "the rusty keyhole"

   d_peek "You peek through the keyhole but cannot see a thing. /
           something in the other side of the keyhole blocks your view."

   d_look "You see the garden. At the far east end, there is a /
           garden shed."

   d_poke "You put your finger in the [o_keyhole_door] and feel there's /
           something inserted from the other side. However, you can't /
           push it out. It's locked in somehow."

 CONTAINED in o_kitchen_door

 FLAGS
   f_container = 1
   f_open      = 1

 TRIGGERS
   "examine [o_keyhole_door]"            -> t_look_through
   "look through [o_keyhole_door]"       -> t_look_through
   "look in [o_keyhole_door]"            -> t_look_through      
   "poke [o_keyhole_door]"               -> t_poke
   "put [o_subject] in [o_keyhole_door]" -> t_put_in

   t_entrance
     # don't print there is a keyhole when entering the room
     agree()

   t_look_through
     if owns(o_keyhole_door, o_rusty_key) then
       if cansee(o_player, o_rusty_key) then
         printcr("You can't, since there is a key in the keyhole.")
       else
         printcr(d_peek)
       endif
     else
       printcr(d_look)
     endif
     disagree()

   t_poke
     if owns(o_keyhole_door, o_rusty_key) then
       printcr(d_poke)
     else
       printcr("There's nothing in there.")

   t_put_in
     if not(equal(o_subject, o_kitchen_door.r_key)) then
       printcr("That won't fit.")
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_rusty_key
 DESCRIPTIONS
   d_sys        "the rusty key"

   d_entr_long  "There is [a] [o_rusty_key] here.\n"

   d_entr_short "There is [a] [o_rusty_key] here. \n"

   d_exa        "An old rusty metal key.\n"

   d_ask        "\"You already used that key on the kitchen door\"."

 CONTAINED in o_keyhole_door

 FLAGS
   f_takeable = 1
   f_cuttable = 1   # they may use the hacksaw on it
   f_fixed    = 0
   f_hidden   = 1   # initially the key is in the other side of the keyhole
   f_garden   = 1   # initially in the garden side of the lock

 TRIGGERS
   "inventory"                             -> t_i
   "put [o_rusty_key] in [o_keyhole_door]" -> t_put_key
   "turn [o_rusty_key]"                    -> t_turn
   "ask [o_npc] about [o_rusty_key]"       -> t_ask

   t_entrance
     if owns(o_keyhole_door, %this) and 
        ((equal(l_location, l_garden) and not(testflag(f_garden))) or
         (equal(l_location, l_kitchen) and testflag(f_garden))) then
       agree()
     else
       nomatch()

   t_put_key
     if runverb() then
       if owns(l_garden, o_player) then
         setflag(f_garden)
       else
         clearflag(f_garden)

   t_turn
     # only works when the key is in the kitchen door keyhole
     if owns(o_keyhole_door, %this) then
       # player and key must be on the same side of the kitchen door
       if (testflag(f_garden) and owns(l_garden, o_player)) or
          (not(testflag(f_garden)) and owns(l_kitchen, o_player, 0)) then
         if testflag(o_kitchen_door.f_locked) then
           printcr("The kitchen door is now unlocked.")
           clearflag(o_kitchen_door.f_locked)
         else
           if testflag(o_kitchen_door.f_open) then
             printcr("(closing the kitchen door first).")
             clearflag(o_kitchen_door.f_open)
           endif
           printcr("The kitchen door is now locked.")
           setflag(o_kitchen_door.f_locked)
         endif
       else
         printcr("The key is in the other side of the door.")
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_fragment
 DESCRIPTIONS
   d_sys        "the glass fragment", "the shard", "the splinter"

   d_entr_long  "There is [a] [o_fragment] here.\n"

   d_entr_short "There is [a] [o_fragment] here.\n"

   d_exa        "The fragment is about 6 inches (15 cm) long and has a sharp /
                 edge over the full length. If you use it to cut something, /
                 you will probably hurt yourself when you apply force.\n"

   d_ask        "\"Be careful with it. Don't cut yourself - or me -  with it\"."

 CONTAINED in l_storage

 FLAGS
   f_cutter   = 1
   f_takeable = 1
   f_wrapped  = 0
   f_needed   = 1
   f_swap     = 1

 TRIGGERS
   "inventory"                      -> t_i
   "x [o_fragment]"                 -> t_exa
   "ask [o_npc] about [o_fragment]" -> t_ask

   t_i
     if owns(o_player, %this) then
       indent()
       print("[a] [this]")
       if testflag(f_wrapped) then
         printcr(", partly wrapped with cotton tape")
       else
         printcr("")
     else
       nomatch()

   t_exa
     if testflag(f_wrapped) then
       printcr(o_cotton.d_exa)
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_tape
 DESCRIPTIONS
   d_sys        "the roll of cotton tape", "the cotton tape"

   d_entr_long  "\nThere is a [o_tape] here.\n"

   d_entr_short "\nThere is a [o_tape] here.\n"

   d_exa        "It's a roll of cotton tape that can be used to wrap around /
                 the handle of a tool or a tennis racket for better grip. /
                 There's just enough tape on the roll for one more application."

   d_wrap       "Carefully, you wrap the tape around the [o_fragment], /
                 covering about half of it. You should be able to cut with /
                 it without hurting yourself, now."

   d_no_wrap    "There's only enough tape for one use. So pick the subject /
                 carefully if you want to get out of here."

  CONTAINED in l_shed

  FLAGS
    f_takeable = 1

  TRIGGERS
    "inventory"                     -> t_i
    "wrap [o_tape] around [o_spec]" -> t_wrap
    "apply [o_tape] to [o_spec]"    -> t_wrap
    "use [o_tape] on [o_spec]"      -> t_wrap

    t_wrap
      if equal(o_spec, o_fragment) then
        printcr(d_wrap)
        setflag(o_fragment.f_wrapped)
        move(o_roll, owner(o_tape))
        move(o_tape, l_storage)
        clearflag(o_tape.f_seenbefore)  # for disambiguation for 'where'
        move(o_cotton, o_fragment, on)
        setflag(o_cotton.f_seenbefore)
      else
        printcr(d_no_wrap)
        disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_roll
 DESCRIPTIONS
   d_sys        "the empty roll"

   d_entr_long  "\nThere is an [o_roll] here.\n"

   d_entr_short "\nThere is an [o_roll] here.\n"

   d_exa        "It used to be a roll of cotton tape. But now /
                 it's just an empty roll."

 CONTAINED in l_storage

 FLAGS
   f_takeable = 1

 TRIGGERS
   "inventory" -> t_i

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_cotton
 DESCRIPTIONS
   d_sys    "the cotton tape"

   d_exa    "The cotton is firmly stuck to the [o_fragment] which makes it /
             usable to cut things."

   d_action "The glue is very strong. There's no way to get the cotton off /
             the [o_fragment] again."

 CONTAINED in l_storage

 FLAGS
   f_takeable = 1
   f_moveable = 1  # for 'remove' verb

 TRIGGERS
   "[action] [o_cotton]" -> t_action

   t_entrance
     agree()

   t_action
     if equal(%action, examine) then
       nomatch()
     else
       printcr(d_action)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_toaster
 DESCRIPTIONS
   d_sys        "the old toaster"

   d_entr_long  "\nThere's [a] [o_toaster] here.\n"

   d_entr_short "\nThere's [a] [o_toaster] here.\n"

   d_exa        "A [o_toaster], quite heavy. There's no power cord. It has /
                 been cut off.\n"

 CONTAINED on o_counter
 FLAGS
   f_takeable  = 1
   f_heavy     = 1

 TRIGGERS
   "inventory" -> t_i

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_sticky_note
 DESCRIPTIONS
   d_sys        "the sticky note"

   d_entr_long  "\nOn one of the hedges is a [o_sticky_note].\n"

   d_entr_short "\nOn one of the hedges is a [o_sticky_note].\n"

   d_exa        "The note reads:\n\n"
                "  # note to self from dev team\n"
                "  # check with Fred:\n"
                "  # what do we use for game world boundaries?\n"
                "  # chose hedges now, but can change if necessary."

   d_ask        "Fred looks at you wearily. \"Oh, not the dev team again /
                 We call them the mess team here. They always leave stuff /
                 lying around. The other day they forgot to comment out the /
                 player character during early world tests. Luckily I found /
                 out and was able to fix it just in time\"."

   d_no_take_1  "You grab the note. But on second thought you stick it back /
                 because it looks important. You decide to just ask Fred /
                 about it when you see him again."

   d_no_take_2  "We already did that part. Now you've wasted a move."

 CONTAINED in l_garden

 FLAGS
   f_takeable = 1
   f_tried    = 0

 TRIGGERS
   "take [o_sticky_note]"              -> t_take
   "read [o_sticky_note]"              -> t_read
   "ask [o_npc] about [o_sticky_note]" -> t_ask

   t_take
     if testflag(f_tried) then
       printcr(d_no_take_2)
       disagree()
     else
       printcr(d_no_take_1)
       setflag(f_tried)

   t_read
     printcr(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_stairs
 DESCRIPTIONS
   d_sys        "the stairs", "the staircase", "the steps", "the stair"

   d_exa        "It's a wooden staircase. There are 15 steps."

   d_refer      "\nYou can refer to a particular step with 'step <number>'."

   d_cant_see   "It's hard to get a good view from here. If you were /
                 halfway up the stairs, you would have a better view."

   d_exa_hollow "It looks just like a 15 step staircase with one step that /
                 sounds hollow when stepped on."

   d_count      "There are 15 steps. You can refer to a particular step with /
                'step <number>'."

   d_which      "If you want to do something to a specific step, please refer to /
                 the step as 'step <number>'."

 CONTAINED in l_hallway_south

 FLAGS
   f_exa      = 0  # Not yet examined.
   f_referred = 0

 TRIGGERS
   "examine [o_stairs]" -> t_exa
   "look at [o_stairs]" -> t_exa
   "count [o_stairs]"   -> t_count

   t_entrance
     agree()  # Must execute t_entrance for contained objects (steps).

   t_exa
     if (equal(l_location, l_hallway_south) OR equal(l_location, l_upstairs))
         AND not(testflag(f_exa)) then
       printcr(d_cant_see)
     else
       # we are halfway
       # if they have not yet heard the hollow sound, we don't mention it
       if testflag(l_upstairs.f_seenbefore) then
         setflag(f_exa)
         print(d_exa_hollow)
         if not(testflag(f_referred)) then
           printcr(d_refer)
           setflag(f_referred)
         else
           print("\n")
       else
         print(d_exa)
         setflag(f_referred)
         printcr(d_refer)

   t_count
     printcr(d_count)
     disagree()

  t_default
    if equal(o_subject, o_stairs) then
      printcr(d_which)
      disagree()
    else
      nomatch()  # this is important for default verb code

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_step
 DESCRIPTIONS
   d_sys        "the step"

   d_exa        "There's a tiny button on the side of the step."

   d_15         "There are are only 15 steps."

   d_moved_11   "\nStep 11 has disappeared, revealing a passage down."

 CONTAINED in o_stairs

 FLAGS
   f_swap = 1  # always print the d_sys last referred to by the user

 TRIGGERS
   "examine [o_step] [ord]"  -> t_exa_step
   "look at [o_step] [ord]"  -> t_exa_step
   "knock on [o_step] [ord]" -> t_knock
   "kick [o_step] [ord]"     -> t_knock

   t_entrance
     agree()
    
   t_exa
     if not(trigger(o_stairs.t_exa)) then
       disagree()

   t_exa_step
     if (equal(l_location, l_hallway_south) OR equal(l_location, l_upstairs))
          AND not(testflag(o_stairs.f_exa)) then
       printcr(o_stairs.d_cant_see)
       disagree() # stop
     endif
      
     if lt(%ord, 1) or gt(%ord, 15) then
       printcr("Steps are numbered from 1 to 15.")
     else
       # step 11 gives access to the closet
       if equal(%ord, 11) then
         if not(testflag(o_button.f_pressed)) then
           printcr(d_exa)
           clearflag(o_button.f_hidden)
           o_it.r_it = o_button
           clearflag(o_it.f_update_it)
         else
           printcr(d_moved_11)
       else
         printcr("You see nothing special about step [ord].")

   t_knock
     if equal(%ord, 11) then
       printcr("There is a hollow sound!")
     else
       printcr("It sounds massive.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_button
 DESCRIPTIONS
  d_sys        "the tiny button"

  d_exa        "A round button in the same color as the stairs. You have to look /
                really close to notice it.\n"

  d_entr_short "\nThere's a tiny button on the side of step 11."

  d_press      "As you press the button, step 11 retracts a bit, lowers /
                about an inch and then slides backwards out of sight, /
                revealing a passage down into the closet!"

 CONTAINED in l_halfway

 FLAGS
  f_hidden   = 1
  f_pressed  = 0

 TRIGGERS
  "examine [o_stairs]" -> t_exa_stairs
  "press [o_button]"   -> t_press

  t_entrance
    if not(testflag(f_hidden)) then
      # the button is visible
      if not(testflag(f_pressed)) then
        printcr(d_entr_short)
      else
        printcr(o_step.d_moved_11)

  t_exa_stairs
   if not(testflag(f_hidden)) then
     printcr(d_entr_short)
    
  t_press
    if testflag(f_pressed) then
      printcr("Nothing happens.")
    else
      printcr(d_press)
      o_player.r_score += 50
      printcr(o_player.d_score_50)
      setflag(f_pressed)
      blockexit(l_halfway, d)
      newexit(l_halfway, d, l_closet)
    endif
    disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_closet_door
 DESCRIPTIONS
   d_sys        "the closet door"

   d_entr_long  "\nTo the [r_direction] is a door that gives access /
                 to [r_access].\n"     

   d_entr_short "\nTo the [r_direction] is a door that gives access /
                 to [r_access].\n"

   d_exa        "[the] [o_closet_door] seems to be locked.\n"

   d_closet_a   "a closet under the stairs"

   d_closet_the "the closet under the stairs"

   d_living     "the living room"

   d_no_key     "This Fred guy has the key and I doubt that there's /
                 more than one key."

   d_no_unlock  "[the] [o_spec] does not fit."

 CONTAINED in l_living_middle

 FLAGS
   f_openable = 1
   f_lockable = 1
   f_locked   = 1

 ATTRIBUTES
   r_direction = east
   r_access    = d_closet_a

 TRIGGERS
   "open [o_closet_door]"                      -> t_unlock
   "unlock [o_closet_door]"                    -> t_unlock
   "unlock [o_closet_door] with [o_rusty_key]" -> t_rusty
   "unlock [o_closet_door] with [o_spec]"      -> t_unlock_key
   "enter [o_closet_door]"                     -> t_unlock

   t_rusty
     print("The rusty key does not fit. Come to think of it... ")
     printcr(d_no_key)

   t_unlock
     printcr(d_no_key)

   t_unlock_key
     printcr(d_no_unlock)

   t_enter
     printcr(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_carpet
 DESCRIPTIONS
   d_sys        "the old carpet", "the old rug"

   d_entr_long  "\nOn the floor is an [o_carpet].\n"

   d_entr_short "\nOn the floor is an [o_carpet].\n"

   d_exa        "The carpet doesn't seem very expensive. It just /
                 about covers the floor. On a closer examination, it /
                 turns out that its sides are glued to the floor.\n"

   d_ask        "\"Why are you still carrying that around? You're not going /
                 to need it anymore\"."

   d_cut        "With the cotton tape, the [o_fragment] is perfect as a /
                 knife.\nYou cut the carpet along the sides and it comes /
                 loose from the floor. You take the carpet, revealing a /
                 trapdoor!"

   d_no_cut     "The [o_fragment] is very sharp. It would certainly cut the /
                 carpet, but you would hurt yourself when applying pressure."

   d_no_move    "The carpet won't move. On closer examination /
                 you find that its edges are glued to the floor."

   d_exa_moved  "It's just an old carpet with the edges cut off /
                 by a sharp object."

 CONTAINED in l_closet

 FLAGS
   f_takeable = 1
   f_moveable = 1
   f_cuttable = 1
   f_cut      = 0
   f_soaked   = 0

 TRIGGERS
   "inventory"                        -> t_i
   "examine [o_carpet]"               -> t_exa
   "ask [o_npc] about [o_carpet]"     -> t_ask
   "look under [o_carpet]"            -> t_move
   "lift [o_carpet]"                  -> t_move
   "pull [o_carpet]"                  -> t_move
   "get [o_carpet]"                   -> t_take
   "move [o_carpet]"                  -> t_move
   "cut [o_carpet] with [o_fragment]" -> t_cut

   t_entrance
     if equal(owner(%this), l_closet) then
       if testflag(o_trapdoor.f_hidden) then
         printcr("On the floor is [a] [o_carpet].")
       else
         printcr("In one of the corners is a cut [o_carpet].")
       endif
     else
       nomatch()

   t_i
     if owns(o_player, %this) then
       indent()
       print("[a] [o_carpet]")
       if testflag(f_soaked) then
         printcr(", soaked with water")
       else
         printcr("")
     else
       nomatch()

  t_exa
    if not(testflag(f_cut)) then
      if runverb() then endif
    else
      printcr(d_exa_moved)
    endif
    if testflag(f_soaked) then
      printcr("\nThe [this] is soaked with water.")

  t_take
    if not(testflag(f_cut)) then
      printcr(d_no_move)
    else
      nomatch()

  t_move
    if testflag(f_cut) then
      printcr("You already cut the carpet loose.")
    else
      printcr(d_no_move)

  t_cut
    if testflag(f_cut) then
      printcr("You already cut the carpet.")
      disagree()
    endif
    if testflag(o_fragment.f_wrapped) then
      printcr(d_cut)
      setflag(f_cut)
      clearflag(o_trapdoor.f_hidden)
      clearflag(o_fragment.f_needed)
      move(o_carpet, o_player)
      setflag(o_carpet.f_bypass)
    else
      printcr(d_no_cut)
      disagree()      

  t_dry
    printcr("\nThe [o_carpet] has dried (just letting you know).")
    clearflag(o_carpet.f_soaked)
    stoptimer(m_carpet)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_trapdoor
 DESCRIPTIONS
   d_sys             "the trapdoor", "the trap door"

   d_entr_closet     "\nIn the middle of the floor is a [o_trapdoor], "

   d_entr_chest_room "In the ceiling is a closed [o_trapdoor]."

   d_exa             "The trapdoor is made of laminated wood. It seems large /
                      enough for a person to fit through...\n"

   d_ask             "\"It slammed shut when you entered the cellar and it /
                      will not open again. You have finished that part of /
                      your quest\"."

   d_open            "The trapdoor gives access to a space below. Through /
                      the open trapdoor you see a stairway leading down."

 CONTAINED in l_closet

 FLAGS
   f_hidden   = 1
   f_openable = 1

 TRIGGERS
   "ask [o_npc] about [o_trapdoor]" -> t_ask
   "open [o_trapdoor]"              -> t_open
   "close [o_trapdoor]"             -> t_close

   # trap door can be either in closet or cellar

   t_entrance
     if equal(l_location, l_closet) then
       if not(testflag(f_hidden)) then
         print(d_entr_closet)
         setflag(f_seenbefore)
         if testflag(f_open) then
           printcr("which is open.")
           # player cannot see the flames
           if not(testflag(o_flames.f_extinguished)) then
             printcr(o_flames.d_flames)
             starttimer(m_heat)  # will count down to 0
           endif
         else
           printcr("which is closed.")
         endif
       endif

   t_exit
     if equal(l_location, l_closet) then
       if testflag(o_flames.f_extinguished) then
         # stop and reset the heat timer
         stoptimer(m_heat)
         m_heat = 3
       endif
     endif

   t_open
     if equal(l_location, l_cellar) then
       printcr("There is no way to open the trap door from this side.")
       disagree()
     endif
     setflag(f_open)
     print(d_open)
     if not(testflag(o_flames.f_extinguished)) then
       starttimer(m_heat)
       printcr(o_flames.d_flames)
       move(o_flames, l_closet)
     endif
     if cansee(o_player, o_water_closet) then
       print(o_drain_pipe_closet.d_pour)
       printcr(o_drain_pipe_closet.d_pour_in_cellar)
       if not(testflag(o_flames.f_extinguished)) then
         printcr(o_flames.d_extinguish)
         setflag(o_flames.f_extinguished)
         stoptimer(m_heat)
         move(o_flames, l_storage)

   t_close
     if not(testflag(o_flames.f_extinguished)) then
       printcr("It's less hot now. This feels much better.")
       move(o_flames, l_storage)
       stoptimer(m_heat)
       m_heat = 3
     else
       printcr("closed.")
     endif
     clearflag(f_open)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_drain_pipe_bathroom
 DESCRIPTIONS
   d_sys        "the drain pipe", "the drainpipe", "the drain"

   d_entr_long  "Attached to the wall is a drain pipe.\n"

   d_entr_short "Attached to the wall is a drain pipe.\n"

   d_exa        "The drain pipe emerges from the sink and disappears in /
                 the floor. It is recessed in the wall.\n"

   d_no_get     "Better not. It will get pretty messy, a [o_sink] without a /
                 [o_drain_pipe_bathroom]. Anyway, it is firmly attached to /
                 the wall."

   d_no_cut     "The [o_drain_pipe_bathroom] is recessed in the wall. You /
                 cannot cut it with [the] [o_spec]."

 CONTAINED in l_bathroom

 FLAGS
   f_cuttable = 1

 TRIGGERS
   "get [o_drain_pipe_bathroom]"               -> t_get
   "cut [o_drain_pipe_bathroom] with [o_spec]" -> t_cut
   "listen to [o_drain_pipe_bathroom]"         -> t_listen

   t_get
     printcr(d_no_get)

   t_cut
     if testflag(o_spec.f_cutter) then
       printcr(d_no_cut)
       disagree()
     else
       nomatch()

   t_listen
     if testflag(o_tap.f_open) then
       printcr("You hear water running through the pipe.")
     else
       nomatch()
     
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_drain_pipe_closet
 DESCRIPTIONS
   d_sys             "the drain pipe", "the drainpipe", "the drain"

   d_entr            "Attached to the wall is a drain pipe."

   d_exa             "The drainpipe comes down where the ceiling meets /
                      the north wall, goes vertically down the wall and /
                      disappears in the floor. It is mounted on the wall, /
                      not recessed, so it's well reachable."

   d_no_get          "It's firmly attached to the wall. There's no way /
                      to get it loose from the wall."

   d_cut             " About halfway up the wall, the pipe has been cut."

   d_cut_again       "You try to cut the pipe (again), but the hacksaw has /
                      become blunt after you used it the first time."

   d_pour            "\nWater pours out of the upper half of the broken pipe /
                      on the floor, "

   d_pour_to_hallway "where it disappears under the closet door into the /
                      living room."

   d_pour_in_cellar  "through the open trapdoor straight into the cellar."

   d_look_in         "You look in the drain pipe, but there's nothing in /
                      there."

   d_look_wet        "Better not. Water is pouring out, and you don't want to /
                      get wet."

   d_no_look         "The pipe is one piece from floor to ceiling. You can't /
                      look into it."

   d_running_water   " You hear water running through the pipe."

   d_touch           "When you touch the pipe, you can feel the water /
                      flowing through it."

   d_climb           "You climb up the pipe and bump your head to the /
                      ceiling. After a while you let go and slide back to /
                      the floor again. That didn't help much."

   d_no_pull_push   "The drain pipe is firmly attached to the wall, so /
                     [action]ing it doesn't get you any further."

 CONTAINED in l_closet

 FLAGS
   f_cuttable = 1
   f_cut      = 0  # not yet cut.

 TRIGGERS
   "examine [o_drain_pipe_closet]"             -> t_exa
   "touch [o_drain_pipe_closet]"               -> t_touch
   "get [o_drain_pipe_closet]"                 -> t_get
   "cut [o_drain_pipe_closet] with [o_spec]"   -> t_cut
   "break [o_drain_pipe_closet] with [o_spec]" -> t_cut
   "break [o_drain_pipe_closet]"               -> t_break
   "look in [o_drain_pipe_closet]"             -> t_look
   "climb [o_drain_pipe_closet]"               -> t_climb
   "listen to [o_drain_pipe_closet]"           -> o_drain_pipe_bathroom.t_listen
   "pull [o_drain_pipe_closet]"                -> t_pull_push
   "push [o_drain_pipe_closet]"                -> t_pull_push

   t_entrance
     print(d_entr)
     if testflag(f_cut) then
       printcr(d_cut)
       if testflag(o_tap.f_open) then
         print(d_pour)
         if testflag(o_trapdoor.f_open) then
           printcr(d_pour_in_cellar)
         else
           printcr(d_pour_to_hallway)
         endif
       endif
     else
       if testflag(o_tap.f_open) then
         printcr(d_running_water)
       
   t_exa
     if not(testflag(f_cut)) then
       print(d_exa)
       if testflag(o_tap.f_open) then
         printcr(d_running_water)
       endif
     else
       print(d_cut)
         if testflag(o_tap.f_open) then
           print(d_pour)
           if testflag(o_trapdoor.f_open) then
             printcr(d_pour_in_cellar)
           else
             printcr(d_pour_to_hallway)
           endif
         endif
     endif

   t_touch
     if testflag(o_tap.f_open) then
       printcr(d_touch)
     else
       nomatch()

   t_get
     printcr(d_no_get)

  t_break
    printcr("Not with your bare hands, you won't.")

   t_cut
     if not(equal(o_spec, o_hacksaw)) then
       printcr("That will take forever. You need something more like a saw.")
       disagree()
     endif
     # rest is for the hacksaw
     if not(testflag(f_cut)) then
       setflag(f_cut)
       setflag(o_hacksaw.f_worn)
       clearflag(o_hacksaw.f_needed)
       printcr("You cut the pipe about halfway above the floor.")
       if testflag(o_tap.f_open) then
         print(d_pour)
         clearflag(o_water_closet.f_hidden)
         if not(testflag(o_trapdoor.f_open)) then
           printcr(d_pour_to_hallway)
           # put water in the living room
           clearflag(o_water_living.f_hidden)
           if owns(l_closet, o_carpet) then
             setflag(o_carpet.f_soaked)
             printcr("\nThe [o_carpet] is soaked with water.")
           endif
         else
           printcr(d_pour_in_cellar)
           printcr(o_flames.d_extinguish)
           stoptimer(m_heat)
           move(o_flames, l_storage)
           setflag(o_flames.f_extinguished)
         endif
       endif
     else
       printcr(d_cut_again)
     endif

   t_look
     if testflag(f_cut) then
       if testflag(o_tap.f_open) then
         printcr(d_look_wet)
       else
         printcr(d_look_in)
     else
       printcr(d_no_look)

   t_climb
     if testflag(o_tap.f_open) then
       printcr(d_touch)
     endif
     printcr(d_climb)

   t_pull_push
     printcr(d_no_pull_push)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_flames
 DESCRIPTIONS
   d_sys        "the flames", "the fire"

   d_exa        "Because of the heat, you cannot get close enough for /
                 a good examination.\n"

   d_ask        "\"The fire was there to make sure you would visit all /
                 locations before going into the cellar\"."

   d_flames     "\nA tremendous heat is coming through the open trapdoor. /
                 You look down and see a dark red glow deep down in /
                 the cellar."

   d_extinguish "As soon as the water touches the flames, you hear a loud /
                 hissing sound, and then a huge steam cloud billows up. /
                 After a while, the hissing decreases until it completely /
                 stops. The fire has died.\nIt seems safe to go down into /
                 the cellar now."

   d_burn       "You throw [the] [o_subject] into [the] [o_flames]. The heat "
                "completely disintegrates it and it is gone forever."

   d_needed     "A little voice in the back of your mind says that it is /
                 not a good idea to throw [the] [o_subject] into the flames /
                 given your current progress. You reconsider and decide to /
                 hold on to [the] [o_subject]."

 CONTAINED in l_storage

 FLAGS
   f_extinguished = 0

 TRIGGERS
   "extinguish [o_flames]"                 -> t_extinguish
   "throw [o_subject] [prepos] [o_flames]" -> t_burn
   "burn [o_subject]"                      -> t_burn

   t_entrance
     agree()

   t_extinguish
     printcr("It's up to you to find a way how to do that.")

   t_burn
     if equal(o_subject, o_all) then
       nomatch() # let o_all handle it
     endif
     #special treatment for the rusty key
     if equal(o_subject, o_rusty_key) then
       if testflag(o_kitchen_door.f_locked) and
         (owns(l_shed, o_hacksaw) or owns(l_garden, o_hacksaw)) then
         printcr(d_needed)
         disagree()
       endif
     endif
     if testflag(o_subject.f_needed) then
       printcr(d_needed)
     else
       printcr(d_burn)
       if equal(o_subject, o_carpet) then
         stoptimer(m_carpet)
       endif
       move(o_subject, l_storage)  # remove from the game

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_hacksaw
 DESCRIPTIONS
   d_sys        "the hacksaw", "the saw"

   d_entr_long  "\nThere is a [o_hacksaw] here.\n"

   d_entr_short "\nThere is a [o_hacksaw] here.\n"

   d_exa        "This is just an ordinary hacksaw. It can be used /
                 to saw metal objects. The saw looks a bit worn, /
                 but it probably will last for one more job."

   d_ask        "\"Completeley worn out. Will be of no use anymore\"."

   d_no_saw     "The saw is pretty worn. It will probably last for /
                 one more job, and cutting [the] [o_subject] seems /
                 like a poor choice."

   d_worn       "The saw is completely worn out."

 CONTAINED in l_shed

 FLAGS
   f_cutter   = 1
   f_takeable = 1
   f_needed   = 1
   f_worn     = 0

 TRIGGERS
   "inventory"                        -> t_i
   "examine [o_hacksaw]"              -> t_exa
   "ask [o_npc] about [o_hacksaw]"    -> t_ask
   "saw [o_subject] with [o_hacksaw]" -> t_saw

   t_exa
     if testflag(f_worn) then
       printcr(d_worn)
     else
       printcr(d_exa)
     endif
     disagree()

   t_saw
     # the drain pipe and the grating will reply themselves
     # everything else is handled in this trigger
     if not(equal(o_subject, o_drain_pipe_closet) or equal(o_subject, o_grating)) then
       if testflag(f_worn) then
         printcr(d_worn)
       else
         printcr(d_no_saw)
       endif
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_nails
 DESCRIPTIONS
   d_sys         "the nails", "the nail"

   d_exa         "Just a row of nails, nothing special."

   CONTAINED in l_shed

   ATTRIBUTES
     r_is = are

   TRIGGERS
     "get [o_nails]" -> t_get

     t_entrance
       agree()

     t_get
       printcr("You don't have the tools to extract the nails.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_tap
 DESCRIPTIONS
   d_sys        "the water tap", "the faucet"

   d_exa        "It's a water tap for cold water. "

   d_open       "As you turn the tap to open it, water starts pouring into /
                 the sink."

   d_extinguish "After a little while, you faintly hear a hissing sound, /
                 coming from somewhere below."

 CONTAINED in l_bathroom

 FLAGS
   f_openable = 1  # for open prologue
   f_swap     = 1  # when they use faucet, refer to it as faucet.

 TRIGGERS
   "examine [o_tap]"   -> t_exa
   "open [o_tap]"      -> t_open
   "open [o_sink]"     -> t_open
   "close [o_tap]"     -> t_close
   "close [o_sink]"    -> t_close
   "turn [o_tap]"      -> t_turn
   "turn [o_sink]"     -> t_turn
   "turn on [o_tap]"   -> t_open
   "turn on [o_sink]"  -> t_open
   "turn off [o_tap]"  -> t_close
   "turn off [o_sink]" -> t_close
   "turn [o_tap] on"   -> t_open
   "turn [o_sink] on"  -> t_open
   "turn [o_tap] off"  -> t_close
   "turn [o_sink] off" -> t_close
   
   t_entrance
     # tap is handled by sink, because we want 
     # to execute the sink t_entrance first
     agree()
     
   t_exa
     print(d_exa)
     if testflag(f_open) then
       printcr("Water is pouring out of the tap into the sink.")
     else
       printcr("The tap is closed.")
     endif
     disagree()
     
   t_open
     if testflag(f_open) then
       printcr("The water is already running.")
     else
       setflag(f_open)
       clearflag(o_water_bathroom.f_hidden)
       if testflag(o_drain_pipe_closet.f_cut) then
         if owns(l_closet, o_carpet) then
           setflag(o_carpet.f_soaked)
         endif
         clearflag(o_water_closet.f_hidden)
         if not(testflag(o_trapdoor.f_open)) then
           # put water in the living room
           clearflag(o_water_living.f_hidden)
         endif
       endif
       printcr(d_open)
       if not(testflag(o_flames.f_extinguished)) and 
         testflag(o_trapdoor.f_open) and testflag(o_drain_pipe_closet.f_cut) then
         setflag(o_flames.f_extinguished)
         stoptimer(m_heat)
         move(o_flames, l_storage)
         printcr(d_extinguish)
       endif
     endif

   t_close
     if not(testflag(f_open)) then
       printcr("It's already closed.")
     else
       clearflag(f_open)
       setflag(o_water_bathroom.f_hidden)
       setflag(o_water_closet.f_hidden)
       # water in hallway north remains
       printcr("The waterflow stops when you close the tap.")
     
   t_turn
     if testflag(f_open) then
       if not(trigger(t_close)) then
         disagree()
       endif
     else
       if not(trigger(t_open)) then
         disagree()
       endif
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_sink
 DESCRIPTIONS
   d_sys        "the sink"

   d_exa        "The sink is connected to a drain pipe, which disappears /
                 into the floor.\n"

 CONTAINED in l_bathroom

 TRIGGERS
   "drop [o_subject] in [o_sink]" -> t_drop
   "examine [o_sink]"             -> t_exa
   "look in [o_sink]"             -> t_exa

   t_drop
     # can only drop the toaster or the rusty key, which is ok
     if owns(o_player, o_subject) then
       printcr("[the] [o_subject] is now in the [o_sink].")
       move(o_subject, o_sink)
     else
       printcr("That's not going to work.")

   t_exa
     printcr(d_exa)
     o_player.r_nr_to_reveal = count(%this, f_any, 1)
     if equal(o_player.r_nr_to_reveal, 0) then
       agree()
     endif
     setflag(o_player.f_first)
     printcr("In the sink ")
     if equal(o_player.r_nr_to_reveal, 1) then
       print("is ")
     else
       print("are ")
     endif
     synchronize(%this, t_reveal, f_any, 1)
     disagree()  # otherwise returns number of objects from sync
 
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_bathroom
 DESCRIPTIONS
   d_sys        "the water"

   d_entr_long  "Water is running from the tap into the sink.\n"

   d_entr_short "Water is running from the tap into the sink.\n"

   d_exa        "Just plain ordinary water.\n"

 CONTAINED in l_bathroom

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_bathroom]"     -> t_take
   "drink [o_water_bathroom]"   -> t_drink

   t_take
     printcr("You have nothing with you that can hold the water.")

   t_drink
     if not(testflag(o_player.f_quenched)) then
       printcr("That's refreshing! You didn't realize you were thirsty.")
       setflag(o_player.f_quenched)
       starttimer(m_quenched)
     else
       printcr("You just drank and are not thirsty right now.")

   t_may_drink
     stoptimer(m_quenched)
     m_quenched = 5
     clearflag(o_player.f_quenched)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_closet
 DESCRIPTIONS
   d_sys      "the water"

   d_exa      "Just plain ordinary water.\n"

   d_no_drink "It's better not to drink from the floor. if you are thirsty, /
               go to the tap in the bathroom upstairs for some fresh water."

 CONTAINED in l_closet

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_closet]"     -> t_take
   "drink [o_water_closet]"   -> t_drink

   t_entrance
     agree()   # handled by closet

   t_take
     printcr("You have nothing with you that can hold the water.")

   t_drink
     printcr(d_no_drink)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_water_living
 DESCRIPTIONS
   d_sys        "the water"

   d_entr_long  "\nFrom underneath the closet door, water is coming into the /
                 living room.\n"

   d_entr_short "\nFrom underneath the closet door, water is coming into the /
                 living room.\n"

   d_exa        "Just plain ordinary water.\n"

   d_no_drink   "It's better not to drink from the floor. if you are thirsty, /
                 go to the tap in the bathroom upstairs for some fresh water."

 CONTAINED in l_living_middle

 FLAGS
   f_hidden   = 1
   f_takeable = 1

 TRIGGERS
   "get [o_water_living]"   -> t_take
   "drink [o_water_living]" -> t_drink

   t_take
     printcr("You have nothing with you that can hold the water.")

   t_drink
     printcr(d_no_drink)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_dials
 DESCRIPTIONS
   d_sys "the colored dials"

   d_ask "\"That's funny, all three dials have a hand that points to /
          a number and on each dial the number 8 is highlighted. /
          That must be sort of a clue...\"."

 CONTAINED in l_dial_room

 FLAGS
   f_hidden   = 1 # must be invisible
   f_bypass   = 1 # must also work when not visible

 ATTRIBUTES
   r_is = are

  TRIGGERS
    "examine [o_dials]"                -> t_exa_dials
    "ask [o_npc] about [o_dials]"      -> t_ask
    "ask [o_npc] about [o_red_dial]"   -> t_ask
    "ask [o_npc] about [o_green_dial]" -> t_ask
    "ask [o_npc] about [o_blue_dial]"  -> t_ask
    "use [o_dials]"                    -> t_exa_dials
    "[action] [o_dials]"               -> t_individual

   t_entrance
     setflag(f_seenbefore)
     agree()      # do not use default t_entrance code
 
   t_exit         # do not use default t_exit code
     agree()

   t_exa_dials
     printbold("\n[o_red_dial]: ")
     printcr(o_red_dial.d_exa)
     printbold("\n[o_green_dial]: ")
     printcr(o_green_dial.d_exa)
     printbold("\n[o_blue_dial]: ")
     printcr(o_blue_dial.d_exa)
    
   t_individual
     if not(equal(%action, examine)) then
       printcr("In order to [action] [the] [o_dials], you must address them individually.")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_engravings
 DESCRIPTIONS
   d_sys "the engravings"

   d_ask "\"Maybe it's a clue for the corresponding dial, if any\"."

 CONTAINED in l_dial_room

 FLAGS
   f_hidden   = 1 # must be invisible
   f_bypass   = 1 # must also work when not visible

 ATTRIBUTES
   r_is = are

  TRIGGERS
    "examine [o_engravings]"             -> t_read
    "read [o_engravings]"                -> t_read
    "ask [o_npc] about [o_engravings]"   -> t_ask
    "ask [o_npc] about [o_red_button]"   -> t_ask
    "ask [o_npc] about [o_green_button]" -> t_ask
    "ask [o_npc] about [o_blue_button]"  -> t_ask
    "ask [o_npc] about [o_black_button]" -> t_ask
    "[action] [o_engravings]"            -> t_individual

   t_entrance
     setflag(f_seenbefore)
     agree()      # do not use default t_entrance code
 
   t_exit         # do not use default t_exit code
     agree()

   t_read
     printbold("\n[o_red_button]: ")
     printcr(o_red_button.d_exa)
     printbold("\n[o_green_button]: ")
     printcr(o_green_button.d_exa)
     printbold("\n[o_blue_button]: ")
     printcr(o_blue_button.d_exa)
     printbold("\n[o_black_button]: ")
     printcr(o_black_button.d_exa)
    
   t_individual
     if not(equal(%action, examine)) then
       printcr("In order to [action] [the] [o_engravings], you must address /
                them individually.")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_door
 DESCRIPTIONS
   d_sys        "the smooth door"

   d_entr_long  "\nHardly visible in the south wall is [a] [o_door]. You /
                 almost missed it.\n"

   d_entr_short "\nIn the south wall is [a] [o_door].\n"

   d_exa        "There is a large 8 printed on the door."

   d_open       "The door fits seamlessly into the wall. You don't see how /
                 you could ever open it manually."

   d_ask        "\"It's part of your assignment to open this door. Oh, and /
                 there's no way to open it with force\"."

   d_look_under "There's light on the other side of [the] [o_door]"

   d_dontgetit  "Really, you cannot open this door manually."

 CONTAINED in l_dial_room

 FLAGS
   f_openable     = 1
   f_open         = 0
   f_tried_before = 0

 TRIGGERS
   "s"                          -> t_south
   "ask [o_npc] about [o_door]" -> t_ask
   "open [o_door]"              -> t_open
   "look under [o_door]"        -> t_look_under

   t_entrance
     if testflag(f_hidden) then
       print("\n")
       printcr("There is a passage in the south wall.")
     else
       #clearflag(l_location.f_seenbefore)
       nomatch()
     endif

   t_south
     if not(testflag(f_open)) then
       printcr("You must find a way to open [the] [o_door] first.")
     else
       nomatch()     

   t_open
     if not(testflag(f_tried_before)) then
       setflag(f_tried_before)
       print(d_open)
     else
       printcr(d_dontgetit)

   t_look_under
     printcr(d_look_under)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_chest
 DESCRIPTIONS
   d_sys         "the chest"

   d_entr        "\nThere is a [o_chest] here, which is "

   d_exa         "The chest looks very old and worn."

   d_ask         "\"I'm not allowed to disclose information about the /
                  [o_chest] as it's a crucial item in your quest. Hmmm, /
                  maybe I just did disclose information I'm not entitled /
                  to...\""

   d_locked      "You try to open [the] [o_chest] but find that it is locked."

   d_take        "You try to take [the] [o_chest], but it is mounted to the /
                  floor. It would have been too heavy to carry around anyway."

   d_on_schedule "\nFred looks in the chest and sees the [o_rope]. He pulls /
                  out his tablet and checks something. You hear him mumble. /
                  \"Score [o_player.r_score], [m_moves] moves, found the /
                  [o_rope]\". He looks at you and smiles. \"Ok, right on /
                  schedule, buddy\"."

   d_icon_open    "icons\\\\Chest open.Png"
   d_icon_closed  "icons\\\\Chest closed.Png"

 CONTAINED in l_cellar

 FLAGS
   f_openable  = 1
   f_lockable  = 1
   f_locked    = 1
   f_opaque    = 1
   f_takeable  = 0
   f_container = 1
   f_solved    = 0

 ATTRIBUTES
   r_key      = o_brass_key
   r_ifi_icon = d_icon_closed

 TRIGGERS
   "open [o_chest]"                      -> t_open_chest
   "close [o_chest]"                     -> t_close_chest
   "look in [o_chest]"                   -> t_look_in
   "examine [o_chest]"                   -> t_exa
   "ask [o_npc] about [o_chest]"         -> t_ask
   "take [o_chest]"                      -> t_take
   "unlock [o_chest]"                    -> t_unlock
   "unlock [o_chest] with [o_brass_key]" -> t_unlock
   "open [o_chest] with [o_spec]"        -> t_open_key
   "put [o_subject] [prepos] [o_chest]"  -> t_put

   t_entrance
     if not(owns(l_location, o_chest) and cansee(o_actor, o_chest)) then
       agree()
     endif
     setflag(f_seenbefore)
     print(d_entr)
     if testflag(f_open) then
       printcr("open.")
     else
       printcr("closed.")
     endif
     agree()
  
   t_exa
     printcr(d_exa)
     print("On the front of [the] [o_chest] is [a] [o_keyhole_chest]")
     if owns(o_keyhole_chest, o_brass_key) then
       printcr(" with [a] [o_brass_key] in it.")
     else
       printcr(".")
     endif
     print("[the] [o_chest] is")
     if testflag(f_open) then
       printcr(" open.")
       indent(2)
       contents(o_chest)
       indent(-2)
     else
       printcr(" closed.")
     endif
     agree()

   t_open_chest
     if runverb() then endif
     if testflag(o_chest.f_open) then
       # cannot test for runverb() because may return disagree()
       l_cellar.r_ifi_picture = l_cellar.d_picture_open
       setflag(f_solved)
       if cansee(o_player, o_npc) and owns(o_chest, o_rope) then
         printcr(d_on_schedule)
         clearflag(o_npc.f_open_chest)

   t_open_key
     if testflag(f_open) then
       printcr("But the chest is already open.")
       disagree()
     endif
     if not(testflag(f_locked)) then
       printcr("(the chest isn't locked).")
     else
       if not(try(l_location, 0, 1, "unlock [o_chest] with [o_spec]")) then
         disagree()
     endif
     if not(try(l_location, 0, 0, "open [o_chest]")) then
       # cannot use trigger(t_open) because of runverb()
       disagree()

   t_close_chest
     if runverb() then
       l_cellar.r_ifi_picture = l_cellar.d_picture_closed

   t_look_in
     if not(testflag(f_open)) then
       if not(testflag(f_locked)) then
         printcr("Opening [the] [o_chest] first...")
         setflag(f_open)
         clearflag(f_opaque)
         contents(%this)
       else
         printcr(d_locked)
       endif
     else
       contents(%this)
     endif
     agree()

   t_unlock
     if owns(o_player, o_brass_key) then
       if not(testflag(f_locked)) then
         printcr("[the] [o_chest] is already unlocked.")
       else
         if equal(o_spec, %none) then
           printcr("(with [the] [o_brass_key]).")
         endif
         printcr("You put [the] [o_brass_key] into [the] [o_keyhole_chest] and turn it.")
         printcr("Ok, the chest is now unlocked.")
         move(o_brass_key, o_keyhole_chest)
         clearflag(f_locked)
       endif
     else
       if owns(o_keyhole_chest, o_brass_key) then
         printcr("You reach for [the] [o_brass_key] that is in [the] /
                  [o_keyhole_chest] and turn it to unlock [the] [o_chest].")
         clearflag(f_locked)
       else
         printcr("But you don't have the key...")
       endif
     endif
     agree()

   t_take
     printcr(d_take)
     printcr("On second thought, you try to open [the] [o_chest].")
     if (try(l_location, 0, 0, "open [o_chest]")) then
       agree()
     
   t_put
     # this trigger must be executed after the 
     # trigger from o_subject.
     
     if testflag(f_locked) then
       printcr("[the] [o_chest] seems to be locked.")
     else     
       if not(testflag(f_open)) then
         printcr("(opening [the] [o_chest] first).")
         setflag(f_open)
         clearflag(f_opaque)
       endif
       move(o_subject, o_chest)
       o_subject.r_preposition = %prepos
       clearflag(o_subject.f_bypass)
     endif
     agree() # for lamp

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$object o_keyhole_chest
 DESCRIPTIONS
   d_sys  "the brass keyhole", "the brass lock"

   d_exa  "It's made of brass."

   d_ask  "\"You can figure this one out yourself, I think\".\n\nFred pulls out /
           his tablet and starts typing. You hear him mumble something /
           about \"...asking stupid questions...\"."

 CONTAINED in l_cellar

 FLAGS
   f_container = 1

 TRIGGERS
   "x [o_keyhole_chest]"                  -> t_exa
   "ask [o_npc] about [o_keyhole_chest]"  -> t_ask
   "put [o_subject] in [o_keyhole_chest]" -> t_put

   t_exa
     if not(runverb()) then
       disagree()

   t_put
     if not(equal(o_subject, o_brass_key)) then
       if equal(o_subject, o_rusty_key) then
         printcr("That one was for the kitchen door, remember?")
       else
         printcr("Better try a key...")
     else
       # subject = key will be handled by t_put trigger from o_brass_key
       agree()

   t_entrance  # avoid printing an extra <CR> by default t_entrance
     agree() 

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_brass_key
 DESCRIPTIONS
   d_sys        "the old brass key"

   d_entr_long  "\nThere is [a] [o_brass_key] here.\n"

   d_entr_short "\nThere is [a] [o_brass_key] here.\n"

   d_exa        "It's just [a] [o_brass_key].\n"

   d_ask1       "\"I know that key. It's important.\""

   d_ask2       "\"You gave it to me, remember?\""

   d_ask3       "\"It's no longer important now that you opened the chest\"."

   d_cannot_go  "The moment you're about to enter the room you feel there is /
                 some force holding you back. [the] [o_brass_key] vibrates /
                 slightly."

   d_throw      "You throw [the] [o_brass_key] to the [dir], but right at /
                 the border of the next room, it bounces against what seems /
                 like an invisible shield and lands on the floor."

   d_icon       "icons\\\\Brass key.Png"

 CONTAINED in o_safe

 FLAGS
   f_takeable = 1

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "i"                                      -> t_i
   "ask [o_npc] about [o_brass_key]"        -> t_ask
   "put [o_brass_key] in [o_keyhole_chest]" -> t_put
   "throw [o_brass_key] [dir]"              -> t_throw
   "throw [o_brass_key] to [dir]"           -> t_throw

   t_exit
     # if the player has the key he may not enter the cellar
     if testflag(o_chest.f_solved) then
       agree()
     endif
     if owns(o_player, %this) and ((equal(l_location, l_dial_room) AND equal(%dir, w)) 
                             OR (equal(l_location, l_passageway) AND equal(%dir, n))) then
       printcr(d_cannot_go)
       o_player.r_key_blocked += 1   # must try at least 2 times until Fred helps
       disagree()

   t_ask
     if not(testflag(f_seenbefore)) then
       nomatch()
     else
       if not(testflag(o_chest.f_locked)) then
         printcr(d_ask3)
       else
         if owns(o_npc, %this) then
           printcr(d_ask2)
         else
           printcr(d_ask1)

   t_put
     if owns(o_player, o_brass_key) then
       printcr("You put [the] [o_brass_key] into [the] [o_keyhole_chest].")
       move(o_brass_key, o_keyhole_chest)
     else
       printcr("But you don't have the key!")
     endif
     agree()
     
   t_throw
     # check if player has the key is done by verb prologue
     if (equal(l_location, l_dial_room) AND equal(%dir, w)) OR
        (equal(l_location, l_passageway) AND equal(%dir, n)) then
       move(o_brass_key, l_location)
       printcr(d_throw)
     else
       nomatch()   # let verb default code handle this
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_rope
 DESCRIPTIONS
   d_sys          "the rope"

   d_entr_long    "\nThere is a [o_rope] here.\n"

   d_entr_short   "\nThere is a [o_rope] here.\n"

   d_exa          "The rope is about 13 feet (4 meters) long.\n"

   d_ask          "\"Hold on to that. You're gonna need it\"."

   d_take         "You pull [the] [o_rope] and try to take it, but it /
                   does not give in. It seems to be attached to /
                   something."

   d_take_as_well "You take [the] [r_tied_to] as well, as it is tied /
                   to the [o_rope]."

   d_no_time      "[the] [o_npc] looks at you. \"We don't have time for /
                   this. We need to get you out of here!\""

   d_tie          "Ok [the] [o_rope] is now tied to [o_spec]."

   d_dangling     "\nThere is a [o_rope] hooked to the [o_ring], dangling /
                   from the ceiling."

   d_pull         "You pull [the] [o_rope], but it doesn't give in. /
                   It's firmly tied to the hook, which is firmly /
                   hooked to the ring."

   d_slippery     "You grab the rope and begin pulling yourseld up towards /
                   the ceiling. Unfortunately, your hands  don't have /
                   enough grip on the rope and after a while you slide back /
                   to the ground."

   d_drop_ladder  "(you let go of the ladder, as it's to large to climb /
                    with).\n"

   d_climb        "The gloves give you a firm grip on the rope. Hand over /
                   you pull yourself up to the ceiling while Fred is /
                   watching you closely. Finally, you reach the ceiling /
                   and work yourself through the hole."

   d_no_climb     "Why? It's not attached to anything you might want to /
                   climb to."

   d_no_cut_1     "Cutting the rope is something that cannot be undone, so /
                   you decide - given the fact that there's no urgent /
                   reason to cut the rope - to leave it as it is."

   d_no_cut_2     "We already decided cutting the rope was not a good /
                   idea, remember?"                  

   d_icon         "icons\\\\Rope.Png"

 CONTAINED in o_chest

 FLAGS
   f_takeable      = 1
   f_cuttable      = 1
   f_needed        = 1
   f_fixed         = 0
   f_dangling      = 0
   f_tried_cutting = 0

ATTRIBUTES
   r_tied_to  = %none
   r_ifi_icon = d_icon
   r_dummy    = %none

 TRIGGERS
   "inventory"                    -> t_i
   "examine [o_rope]"             -> t_exa
   "take [o_rope]"                -> t_take
   "drop [o_subject]"             -> t_drop
   "ask [o_npc] about [o_rope]"   -> t_ask
   "pull [o_rope]"                -> t_pull
   "climb [o_rope]"               -> t_climb
   "tie [o_rope] to [o_spec]"     -> t_tie_spec
   "tie [o_subject] to [o_rope]"  -> t_tie_subject
   "untie [o_rope]"               -> t_untie
   "untie [o_rope] from [o_spec]" -> t_untie_from
   "cut [o_rope] with [o_spec]"   -> t_cut

   t_entrance
     if owns(o_player, %this) or owns(o_npc, %this) then
       agree()
     endif
     if not(equal(r_tied_to, %none)) then
       if cansee(o_player, o_rope) then
         if cansee(o_player, o_rope.r_tied_to) then
           printcr("\nThere is a [o_rope] here, tied to [the] [o_rope.r_tied_to].")
         else
           print("\nThere is a [o_rope] here. It extends to the ")
           printcr(owner(o_rope.r_tied_to))
         endif
       endif
     else
       if testflag(f_dangling) then
         printcr(d_dangling)
       else
         nomatch() # use default t_entrance

   t_exit
     if not(owns(o_player, o_rope)) then
       agree()
     endif
     # check if the rope is not attached to something immobile
     # location alcove will handle this by itself
     if equal(o_rope.r_tied_to, %none) or 
        (equal(l_location, l_alcove) and equal(%dir, up)) or 
        (equal(l_location, l_east_of_grating) and equal(%dir, d)) then
       agree()
     endif
     r_dummy = o_rope.r_tied_to        # o_rope.r_tied_to.f_fixed does not work
     if testflag(r_dummy.f_fixed) then
       printcr("(As you move away, the [o_rope] slips from your hands).\n")
       move(o_rope, owner(o_actor))
     else
       if not(owns(o_player, o_rope.r_tied_to)) then
         # move the thing the rope is tied to as well
         printcr("[the] [o_rope.r_tied_to] - tied to the rope - follows.")
         move(o_rope.r_tied_to, %dir)
       endif
     endif
     agree()

   t_exa
     if not(equal(r_tied_to, %none)) then
       printcr("[the] [o_rope] is tied to [the] [o_rope.r_tied_to].")
     else
       nomatch()

   t_take
     if equal(l_location, l_exit) then
       printcr("It's stuck.")
       disagree()
     endif
     if owns(o_npc, %this) then
       printcr(d_no_time)
       disagree()
     else
       if testflag(f_dangling) then
         printcr(d_take)
       else
         nomatch()

   t_drop
     if equal(o_subject, o_rope) then
       if runverb() then
         # check if something is tied to the rope
         if not(equal(r_tied_to, %none)) then
           if owns(o_player, r_tied_to) then
             move(r_tied_to, owner(o_player))
             printcr("As the rope is tied to [the] [r_tied_to], you drop /
                      [the] [r_tied_to] as well.")
           endif
         endif
       else
         disagree()
       endif
     else
       # check if the rope is tied to the object to be dropped
       if equal(r_tied_to, o_subject) then
         if runverb() then
           printcr("As the rope is tied to the [o_subject], you drop /
                    the rope as well.")
           move(o_rope, owner(o_player))
         endif
       else
         nomatch()

   t_ask
     if testflag(f_dangling) then
       printcr("It has served its purpose.")
     else
       printcr(d_ask)

   t_i
     if owns(o_player, %this) then
       indent()
       print("[a] [o_rope]")
       if equal(r_tied_to, %none) then
       print("\n")
       else
         printcr(", tied to the [r_tied_to]")
     else
       nomatch()

   t_pull
     if equal(r_tied_to, o_ladder) then
       if trigger(o_ladder.t_pull) then
         agree()
       else
         disagree()
       endif
     endif
     if equal(r_tied_to, o_lever) then
       nomatch()
     endif
     if testflag(f_dangling) then
       printcr(d_pull)
     else
       if owns(o_npc, o_rope) then
         printcr(d_no_time)
         disagree()
       else
         printcr("Nothing happens.") 

   t_climb
     if testflag(f_dangling) then
       # we're in the escape room and the hook was thrown
       if testflag(o_gloves.f_worn) then
         if owns(o_player, o_ladder) then
           printcr(d_drop_ladder)
           move(o_ladder, l_escape_room)
         endif
         printcr(d_climb)
         move(o_player, l_exit)
         entrance(l_exit)
       else
         printcr(d_slippery)
         disagree()
     else
       printcr(d_no_climb)

   t_cut
     if testflag(f_tried_cutting) then
       printcr(d_no_cut_2)
     else
       setflag(f_tried_cutting)
       printcr(d_no_cut_1)
     endif
     disagree()

   t_tie_spec
     if equal(o_spec, o_npc) then
       printcr("\"I'm not into that kinky stuff\".")
       disagree()
     endif
     if equal(o_spec, o_lever) or equal(o_spec, o_ladder) or equal(o_spec, o_ring) then
       # will be handled by the objects themselves
       nomatch()
     endif
     if not(testflag(o_spec.f_tieable)) then
       nomatch()
     endif
     if equal(r_tied_to, o_spec) then
       printcr("But the [o_rope] is already tied to [the] [o_spec].")
       disagree()
     endif
     if not(owns(o_player, o_rope)) then
       printcr("(taking the rope first).\n")
       if not(try(l_location, 0, 0, "take [o_rope]")) then
         disagree()
       endif
     endif
     if not(owns(o_player, o_spec)) then
       printcr("(taking [the] [o_spec] first).\n")
       if not(try(l_location, 0, 0, "take [o_spec]")) then
         disagree()
       endif
     endif
     if not(equal(r_tied_to, %none)) then
       printcr("You must untie the rope from [the] [r_tied_to] first.")
         disagree()
       else
         o_rope.r_tied_to = o_spec
         printcr("Ok, the rope is now tied to [the] [o_spec].")

   t_tie_subject
     # switch subject and specifier
     if try(l_location, 0, 0, "tie [o_rope] to [o_subject]") then
       agree()
     else
       disagree()

   t_untie
     if equal(o_rope.r_tied_to, o_ladder) then
       # ladder will handle this
       nomatch()
     else
       if equal(o_rope.r_tied_to, %none) then
         printcr("The [o_rope] isn't tied to anything.")
       else
         printcr("You untie the [o_rope] from [the] [o_rope.r_tied_to].")
         o_rope.r_tied_to = %none

   t_untie_from
     if equal(o_spec, o_ladder) then
       # ladder will handle this
       nomatch()
     else
       if not(equal(o_rope.r_tied_to, o_spec)) then
         printcr("But the [o_rope] is not tied to [the] [o_spec].")
         disagree()
       else
         if trigger(t_untie) then endif

   t_no_tied_to
     r_tied_to = %none

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_gloves
 DESCRIPTIONS
   d_sys        "the pair of gloves", "the gloves", "the glove"

   d_entr_long  "\nThere is [a] [o_gloves] here.\n"

   d_entr_short "\nThere is [a]  [o_gloves] here.\n"

   d_exa        "The inside is very rough. I think it will give a good /
                 sturdy grip."

   d_ask        "\"They are rather thin, so I guess is not for protection/
                 against the cold\"."

   d_take_off   "\nYour hands are getting a bit warm in the gloves, so /
                 you take them off."

 CONTAINED in l_computer_room

 FLAGS
   f_takeable = 1
   f_wearable = 1

 ATTRIBUTES
   r_is = are

 TRIGGERS
   "i"                            -> t_i
   "ask [o_npc] about [o_gloves]" -> t_ask
   "wear [o_gloves]"              -> t_wear
   "put on [o_gloves]"            -> t_put_on
   "put [o_gloves] on"            -> t_put_on
   "take off [o_gloves]"          -> t_take_off
   "take [o_gloves] off"          -> t_take_off

   t_i
     if not(testflag(f_worn)) then
       if runcommon() then endif
     else
       # gloves are worn
       indent()
       printcr("a pair of gloves (being worn)")

   t_wear
     if runverb() then
       m_gloves = 5
       starttimer(m_gloves)

   t_put_on
     if try(l_location, 0, 0, "wear [o_gloves]") then endif

   t_take_off
     # triggered by timer m_gloves
     printcr(d_take_off)
     stoptimer(m_gloves)
     clearflag(f_worn)     

 END_OBJ

#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_hook
 DESCRIPTIONS
   d_sys         "the hook", "the eye"

   d_entr_long   "There is [a] [o_hook] here.\n"

   d_entr_short  "There is [a] [o_hook] here.\n"

   d_exa         "This is a metal hook, about two feet long. The long side /
                  ends in an open eye.\n"

   d_ask         "\"Like the rope, this item is also crucial for your quest\"."

   d_take_drop   "You [action] the [o_rope] as well, since it's tied to the /
                  [o_hook]."

   d_fred_enters "Just as you are about to throw [the] [o_hook], all of a /
                  sudden Fred rushes into the room and shouts at you..... "

   d_throw_1     "\"Don't throw that [o_hook]! If it gets lost you'll never /
                  escape!\""

   d_throw_2     "Fred holds your arm... \"I wouldn't do that if I were you. /
                  The hook might go through the hole and you really need that /
                  hook to get out of here.\""

   d_throw_3     "You throw the [o_hook] but the [o_spec] is way out of /
                  your reach. The hook doesn't even get halfway and falls on /
                  the floor. You must face it, YOU are just not strong /
                  enough to throw the hook [prepos] that [o_spec]."

   d_icon        "icons\\\\Hook.Png"

 CONTAINED in o_pit

 FLAGS
   f_takeable = 1
   f_tieable  = 1
   f_needed   = 1
   f_fixed    = 0

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "i"                                       -> t_i
   "ask [o_npc] about [o_hook]"              -> t_ask
   "take [o_hook]"                           -> t_take_drop
#   "drop [o_hook]"                           -> t_take_drop
   "throw [o_hook]"                          -> t_more_specific
   "throw [o_hook] [prepos] [o_escape_hole]" -> t_throw
   "throw [o_hook] [prepos] [o_ring]"        -> t_throw

   t_take_drop
     if owns(o_npc, %this) then
       printcr(o_rope.d_no_time)
       disagree()
     else
       if cansee(o_player, o_rope) and equal(o_rope.r_tied_to, o_hook) then
         printcr(d_take_drop)
         if equal(%action, take) then
           move(o_rope, o_player)
           move(o_hook, o_player)
         else
           move(o_rope, owner(o_player))
           move(o_hook, owner(o_player))
         endif
       else
         nomatch()

   t_more_specific
     if equal(l_location, l_escape_room) then
       printcr("You have to be more specific about where to throw the hook.")
     else
       printcr("You drop the [o_hook] and the [o_rope].")
       move(o_hook, owner(o_player))
       move(o_rope, owner(o_player))

   t_throw
     if not(equal(%prepos, through) or equal(%prepos, at) or equal(%prepos, in) or
        equal(%prepos, to)) then
       nomatch()
     endif
     if not(equal(o_rope.r_tied_to, %this)) then
       if not(equal(owner(o_npc), l_location)) then
         move(o_npc, l_location)
         print(d_fred_enters)
         printcr(d_throw_1)
       else
         # Fred is in the room
         printcr(d_throw_2)
     else
       printcr(d_throw_3)
       move(o_hook, owner(o_player))
       move(o_rope, owner(o_player))

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_ladder
 DESCRIPTIONS
   d_sys          "the wooden ladder"

   d_entr_long    "\nThere is a [o_ladder] here.\n"

   d_entr_short   "\nThere is a [o_ladder] here.\n"

   d_entr_alcove  "\nA [o_ladder] is attached to the south wall with a clamp."

   d_entr_grating "\nClamped to the floor is a [o_ladder]."

   d_exa          "The ladder is about 10 ft (3 meters) long and made of wood. The /
                   sides are 3 inch (8 cm) wide. There are scratches on the sides /
                   of the ladder where the wood is splintered."

   d_ask_1        "\"For now, use it to get in and out of the alcove\"."

   d_ask_2        "\"There must be a reason that you could remove it from /
                   the clamp\"."

   d_ask_3        "\"Well, it's not long enough to reach the hole in the /
                   escape room ceiling, for sure\"."

   d_locked       "The [o_ladder] is firmly attached to the "

   d_pit          "You reach into the pit so you can get a hold of the top /
                   rung of the ladder to pull it out."

   d_floor        "The ladder lies on the floor. If it would be up against /
                   the wall you could have reached it."

   d_pull_pit     "You manage to lift the ladder a little bit but it's not /
                   enough to pull it out of the pit."

   d_nowhere      "The [o_ladder] is put against [the] [r_put_against] but /
                   it leads to nothing."

 CONTAINED in l_alcove

 FLAGS
   f_takeable = 1
   f_fixed    = 1
   f_tieable  = 1
   f_floor    = 0   # for when it falls into the pit
   f_needed   = 1

 ATTRIBUTES
   r_put_against = %none

 TRIGGERS
   "inventory"                              -> t_i
   "examine [o_ladder]"                     -> t_exa
   "ask [o_npc] about [o_ladder]"           -> t_ask
   "get [o_ladder]"                         -> t_take
   "put [o_ladder] [prepos] [o_north_wall]" -> t_wall
   "put [o_ladder] [prepos] [o_east_wall]"  -> t_wall
   "put [o_ladder] [prepos] [o_south_wall]" -> t_wall
   "put [o_ladder] [prepos] [o_west_wall]"  -> t_wall
   "climb [o_ladder]"                       -> t_climb
   "tie [o_rope] to [o_ladder]"             -> t_tie
   "tie [o_ladder] to [o_rope]"             -> t_tie
   "untie [o_rope]"                         -> t_untie
   "untie [o_rope] from [o_ladder]"         -> t_untie

   t_entrance
     if equal(owner(o_ladder), l_alcove) then
       printcr(d_entr_alcove)
     else
       if equal(owner(o_ladder), l_east_of_grating) and not(testflag(o_clamp.f_open)) then
         printcr(d_entr_grating)
       else
         if not(equal(r_put_against, %none)) then
           printcr("\nThere is a [o_ladder] against [the] [r_put_against].")
         else
           nomatch()

   t_exa
     printcr(d_exa)
     if not(testflag(o_clamp.f_open)) then
       if trigger(t_clamped) then
         disagree()

   t_ask
     if testflag(o_clamp.f_locked) then
       printcr(d_ask_1)
     else
       if owns(l_circular_room, o_snake) then
         printcr(d_ask_2)
       else
         printcr(d_ask_3)

   t_take
     if owns(o_pit, o_ladder) then
       if owns(o_pit, o_player) then
         if runverb() then
           r_put_against = %none
           agree()  # do not run verb default when clamp is open
         endif
       else
         if testflag(f_floor) then
           printcr(d_floor)
           disagree()
         else
           printcr(d_pit)
           move(o_ladder, o_player)
           r_put_against = %none
           disagree()
         endif
       endif
     endif
     if not(testflag(o_clamp.f_open)) then
       if trigger(t_clamped) then
         disagree()
       endif
     else
       if runverb() then
         r_put_against = %none

   t_wall
     if not(owns(o_player, o_ladder)) then
       printcr("(picking up the ladder first).")
       if not(try(l_location, 0, 1, "get [o_ladder]")) then
         disagree()
       endif
     endif
       if equal(%prepos, to) or equal(%prepos, against) then
         r_put_against = o_spec
         move(o_ladder, owner(o_player))
         printcr("The ladder is now [prepos] the [o_spec].")
       else
         nomatch() # let verb handle this

   t_clamped
       print(d_locked)
       if equal(owner(o_ladder), l_alcove) then
         print(o_south_wall)
       else
         print("floor")
       endif
       printcr(" by a [o_clamp].")

   t_climb
     if equal(r_put_against, %none) then
       printcr("But the ladder isn't put up against anything.")
     else
       printcr(d_nowhere)
     endif
     disagree()

   t_tie
     if equal(o_rope.r_tied_to, o_ladder) then
       printcr("The rope is already tied to the ladder.")
       disagree()
     endif
     if owns(o_pit, o_ladder) and owns(l_location, o_player) then
       printcr(d_pit)
       disagree()
     endif
     if not(equal(o_rope.r_tied_to, %none)) then
       printcr("(untying the rope from [the] [o_rope.r_tied_to] first).")
     endif
     printcr("The rope is now tied to the ladder.")
     o_rope.r_tied_to = o_ladder

   t_untie
     if equal(o_spec, %none) then
       if not(equal(o_rope.r_tied_to, o_ladder)) then
         # they entered "untie rope" and it's not tied to the ladder
         nomatch()
       endif
     endif
     if not(equal(o_rope.r_tied_to, o_ladder)) then
       printcr("But the rope is not tied to the ladder.")
     else
       if owns(o_pit, o_ladder) and owns(l_location, o_player) then
         printcr(d_pit)
         disagree()
       else
         printcr("You untie the rope from the ladder.")
         o_rope.r_tied_to = %none
         disagree()

   t_pull  # will be called by the rope when the rope is attached to the ladder
     if owns(l_alcove, o_ladder) or (owns(l_east_of_grating, o_ladder) and 
                                not(testflag(o_clamp.f_open))) then
       print("Nothing happens. ")
       if trigger(t_clamped) then endif
     else
       if owns(o_pit, o_ladder) and owns(l_circular_room, o_player) then
         printcr(d_pull_pit)
       else
         if not(owns(o_player, o_ladder)) then
           printcr("You pull the ladder towards you and take it.")
           move(o_ladder, o_player)
         else
           printcr("Nothing happens.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_clamp
 DESCRIPTIONS
   d_sys       "the clamp"

   d_exa       "The clamp is "

   d_ask       "\"The clamp clicks when the wall with the ladder swings up. /
                apparently, it unlocks in the up position\"."

   d_no_close  "The [o_clamp] won't close. You decide not to bother about it, /
                because you don't want it closed anyway."

   d_no_unlock "You fiddle with the [o_clamp] for some time, but there is no /
                obvious way how it can be unlocked."

 CONTAINED in l_alcove

 FLAGS
  f_openable = 1
  f_lockable = 1
  f_locked   = 1

 TRIGGERS
   "examine [o_clamp]"           -> t_exa
   "ask [o_npc] about [o_clamp]" -> t_ask
   "close [o_clamp]"             -> t_close
   "lock [o_clamp]"              -> t_close
   "unlock [o_clamp]"            -> t_unlock

   t_exa
     print(d_exa)
     if testflag(f_locked) then
       printcr("closed and locked.")
     else
       if testflag(f_open) then
         printcr("open.")
       else
         printcr("closed.")

   t_close
     printcr(d_no_close)

   t_unlock
     printcr(d_no_unlock)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_lever
 DESCRIPTIONS
   d_sys        "the carved wooden lever", "the recession"

   d_entr_long  "\nIn the west wall is [a] [o_lever]. It is currently in the /
                 [o_lever.r_position] position.\n" 

   d_entr_short "\nThere is a lever in the [o_west_wall].\n"

   d_exa        "The lever is made of wood, about 1 ft long and 4 inches /
                 thick. About 1 inch (2.5 cm) from the top it has a circular /
                 recession, half an inch (1.75 cm) deep.\n"
                "The lever can be up or down. It is currently /
                 [o_lever.r_position]."

   d_ask_exa    "\"Why not examine it first and then ask me if you still /
                 have questions\"."

   d_ask        "\"The recession is interesting, I think you can put something /
                 around the lever there without it slipping off\"."

   d_throw      "That won't work because the lever is already in the /
                 down position."

   d_tie        "The [o_rope] fits nicely into the recession at the top of /
                 the [o_lever]."

   d_close      "The alcove's south wall swings up and covers the opening /
                 in the ceiling, moving the ladder and the clamp out of /
                 sight. You hear a click above you, probably from the clamp."

   d_open       "Again, you hear a click above you and the ceiling swings /
                 down and covers the [o_south_wall] again, bringing the /
                 ladder and clamp back in sight."

   d_reach      "You cannot reach the lever from here. You must go back /
                 to the alcove."

 CONTAINED in l_alcove

 FLAGS
   f_bypass   = 1  # in case they pull the lever and don't have the lamp
   f_fixed    = 0
   f_examined = 0

 ATTRIBUTES
   r_position = down

 TRIGGERS
   "x [o_lever]"                          -> t_exa
   "ask [o_npc] about [o_lever]"          -> t_ask
   "pull [o_lever]"                       -> t_switch
   "pull [o_lever] [dir]"                 -> t_switch_dir
   "push [o_lever]"                       -> t_switch
   "push [o_lever] [dir]"                 -> t_switch_dir
   "switch [o_lever]"                     -> t_switch
   "switch [o_lever] [dir]"               -> t_switch_dir
   "move [o_lever]"                       -> t_switch
   "move [o_lever] [dir]"                 -> t_switch_dir
   "throw [o_subject] [prepos] [o_lever]" -> t_throw
   "tie [o_rope] to [o_lever]"            -> t_tie
   "tie [o_lever] to [o_rope]"            -> t_tie
   "put [o_rope] around [o_lever]"        -> t_tie
   "pull [o_rope]"                        -> t_switch

   t_entrance
     if equal(l_location, l_east_of_grating) then
       agree()
     else
       nomatch()  # it's in the alcove

   t_exa
     setflag(f_examined)
     nomatch()

   t_ask
     if not(testflag(f_examined)) then
       printcr(d_ask_exa)
       disagree()
     endif
     nomatch()

   t_switch
     if equal(o_subject, o_rope) then 
       if not(equal(o_rope.r_tied_to, %this)) then
         nomatch()
       endif
     endif
     if equal(l_location, l_east_of_grating) then
       printcr(d_reach)
       disagree()
     endif
     if equal(r_position, up) then
       r_position = down
       if equal(o_subject, o_rope) then
         print("Pulling the rope flips the lever. " )
       else
         print("You push the lever down. ")
       endif
       printcr(d_open)
       move(o_ladder, l_alcove)
       move(o_clamp, l_alcove)
       newexit(l_alcove, up, l_east_of_grating)
       setflag(l_alcove.f_lit)
     else
       r_position = up
       if equal(o_subject, o_rope) then
         print("Pulling the rope flips the lever. " )
       else
         print("You push the lever up. ")
       endif
       printcr(d_close)
       move(o_ladder, l_east_of_grating)
       move(o_clamp, l_east_of_grating)
       blockexit(l_alcove, up)
       clearflag(l_alcove.f_lit)
       if not(islit(l_alcove)) then
         printcr("It is now pitch black.")

   t_switch_dir
     if equal(l_location, l_east_of_grating) then
       printcr(d_reach)
       disagree()
     endif
     if equal(r_position, %dir) then
       printcr("The [o_lever] is already [dir].")
     else
       if trigger(t_switch) then endif     

   t_throw
     printcr(d_throw)

   t_tie
     if equal(l_location, l_east_of_grating) then
       printcr(d_reach)
       disagree()
     endif
     o_rope.r_tied_to = o_lever
     printcr(d_tie)
     disagree()  # prevent rope from replying

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_mural
 DESCRIPTIONS
   d_sys      "the mural", "the painting"

   d_exa      "In the dim light you see it shows the Colossal Cave /
               adventure's opening scene."

   d_ask      "\"O yeah, Colossal Cave... Those were the days... They had this /
               cool transportation system...\"."

 CONTAINED in l_dark_place_1

 TRIGGERS
   "get [o_mural]"               -> t_get_mural
   "ask [o_npc] about [o_mural]" -> t_ask

   t_get_mural
     printcr("The mural is painted on the wall. You cannot take it.")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_xyz_buttons
 DESCRIPTIONS
   d_sys       "the buttons"

   d_exa       "You cannot see the buttons clearly enough from you current /
                position. You must move closer to the south for a better view."

   d_no_press  "You cannot press multiple buttons at the same time."

 CONTAINED in l_dark_place_1

 TRIGGERS
   "x [o_xyz_buttons]"     -> t_exa
   "x [o_x_button]"        -> t_exa
   "x [o_y_button]"        -> t_exa
   "x [o_z_button]"        -> t_exa
   "press [o_xyz_buttons]" -> t_no_press

   t_exa
     if equal(l_location, l_dark_place_1) then
       printcr(d_exa)
     else
       nomatch()

   t_no_press
     printcr(d_no_press)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_x_button
 DESCRIPTIONS
   d_sys   "the X button", "the left button", "the x engraving",
           "the left engraving"

   d_exa  "The button has a diameter of about 2 inches. Engraved in the /
           button is an 'X' character.\n"

 CONTAINED in o_xyz_buttons

 FLAGS
   f_pressable = 1

 TRIGGERS
   "x [o_xyz_buttons]"  -> t_exa_xyz
   "press [o_x_button]" -> t_press

   t_entrance
     agree()

   t_exa_xyz
     if equal(l_location, l_button_room) then
       printcr("X button: [d_exa]")

   t_press
     if equal(l_location, l_dark_place_1) then
       printcr(o_xyz_buttons.d_exa)
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_y_button
 DESCRIPTIONS
   d_sys  "the Y button", "the middle button", "the y engraving",
          "the middle engraving"

   d_exa  "The button has a diameter of about 2 inches. Engraved in the /
           button is a 'Y' character.\n"

 CONTAINED in o_xyz_buttons

 FLAGS
   f_pressable = 1

 TRIGGERS
   "x [o_xyz_buttons]"   -> t_exa_xyz
   "press [o_y_button]"  -> t_press

   t_entrance
     agree()

   t_exa_xyz
     if equal(l_location, l_button_room) then
       printcr("Y button [d_exa]")

   t_press
     if equal(l_location, l_dark_place_1) then
       printcr(o_xyz_buttons.d_exa)
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_z_button
 DESCRIPTIONS
   d_sys   "the Z button", "the right button", "the z engraving",
           "the right engraving"

   d_exa  "The button has a diameter of about 2 inches. Engraved in the /
           button is a 'Z' character.\n"

 CONTAINED in o_xyz_buttons

 FLAGS
   f_pressable = 1

 TRIGGERS
   "x [o_xyz_buttons]"  -> t_exa_xyz
   "press [o_z_button]" -> t_press

   t_entrance
     agree()

   t_exa_xyz
     if equal(l_location, l_button_room) then
       printcr("Z button: [d_exa]")

   t_press
     if equal(l_location, l_dark_place_1) then
       printcr(o_xyz_buttons.d_exa)
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_display
 DESCRIPTIONS
   d_sys     "the display"

   d_exa     "It has room for 5 characters."

   d_display "[r_pos_1][r_pos_2][r_pos_3][r_pos_4][r_pos_5]."

   d_filled  "\nThe display now reads: [d_display]"

   d_blank   "\nIt flashes a couple of times and then blanks. Apparently this /
              was not the correct code."

   d_solved  "\nWith a click a panel in the east wall slides open, revailing a /
              brightly lit room."

   d_x       "X"
   d_y       "Y"
   d_z       "Z"
   d_dash    "-"

 CONTAINED in o_xyz_buttons

 ATTRIBUTES
   r_pos_1    = d_dash
   r_pos_2    = d_dash
   r_pos_3    = d_dash
   r_pos_4    = d_dash
   r_pos_5    = d_dash
   r_next_pos = 1
   r_char     = d_dash

 TRIGGERS
   "x [o_display]"      -> t_exa
   "press [o_x_button]" -> t_press
   "press [o_y_button]" -> t_press
   "press [o_z_button]" -> t_press

   t_entrance
     agree()

   t_exa
     printcr(d_exa)
     if equal(r_pos_1, %none) then
       printcr("It is currently empty.")
     else
       # let the dislay print itself
       printcr(d_filled)

   t_press
     if testflag(l_button_room.f_solved) then
       printcr("Nothing happens.")
       agree()
     endif
     if equal(o_subject, o_x_button) then r_char = d_x endif
     if equal(o_subject, o_y_button) then r_char = d_y endif
     if equal(o_subject, o_z_button) then r_char = d_z endif

     if equal(r_next_pos, 1) then
       r_pos_1 = r_char
       r_next_pos += 1
       printcr(d_filled)
       agree()
     endif
     if equal(r_next_pos, 2) then
       r_pos_2 = r_char
       r_next_pos += 1
       printcr(d_filled)
       agree()
     endif
     if equal(r_next_pos, 3) then
       r_pos_3 = r_char
       r_next_pos += 1
       printcr(d_filled)
       agree()
     endif
     if equal(r_next_pos, 4) then
       r_pos_4 = r_char
       r_next_pos += 1
       printcr(d_filled)
       agree()
     endif
     r_pos_5 = r_char
     printcr(d_filled)
     if trigger(t_check_xyzzy) then
       # they solved it
       setflag(l_button_room.f_solved)
       newexit(l_button_room, e, l_computer_room)
       printcr(d_solved)
     else
       printcr(d_blank)
       r_pos_1    = d_dash
       r_pos_2    = d_dash
       r_pos_3    = d_dash
       r_pos_4    = d_dash
       r_pos_5    = d_dash
       r_next_pos = 1

   t_check_xyzzy
     # check if the display reads "XYZZY"
     if not(equal(r_pos_1, d_x)) then disagree() endif
     if not(equal(r_pos_2, d_y)) then disagree() endif
     if not(equal(r_pos_3, d_z)) then disagree() endif
     if not(equal(r_pos_4, d_z)) then disagree() endif
     if not(equal(r_pos_5, d_y)) then disagree() endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_screen
 DESCRIPTIONS
   d_sys        "the computer screen", "the text output"

   d_exa        "There is text output on the screen."

   d_first_read "The text looks like a source code from something. /
                 It seems to describe a computer room. A computer room ?! /
                 Could it be that you are looking at your own world's /
                 source code?\n"

  d_at_bottom   "You are already at the bottom of the text. Apparently, this /
                 file only contains the code for the computer room."

  d_text1       "#------------------------------------------------------------------------------\n"
                "  $LOCATION l_computer_room\n"
                "   DESCRIPTIONS\n"
                "     d_sys        \"the computer room\"\n\n"
                "     d_entr_long  \"You are in a small clean room. Everything is clean //\n"
                "                   and white. Mounted to a wall is a large computer screen //\n"
                "                   with two buttons.\\n\"\n\n"
                "     d_entr_short \"Mounted to the wall is a large computer screen.\\n\"\n\n"
                "     d_first_entr \"when you enter, the wall behind you closes //\n"
                "                   seamlessly.\\n\"\n\n"
                "     d_nogo       \"You can't go [[dir]. In fact, there are no visible exits //\n"
                "                   at all.\n"
                "                                                             (scroll down...)"

  d_text2       "   FLAGS\n"
                "     f_lit          = 1\n"
                "     f_first_entry  = 1\n\n"
                "   TRIGGERS\n"
                "     # Note to Fred from Dev Team: we are still waiting for info\n"
                "     # to implement the puzzle to get out of this room.\n"
                "     # For our testing we will use \"getmeout\"\n\n"
                "     \"[[dir]\"    -> t_nogo\n"
                "     \"getmeout\" -> t_cheat   # temporary work around\n"
                "                                                         (scroll up//down...)"

   d_text3      "   t_entrance\n"
                "     if testflag(f_first_entry) then\n"
                "       printcr(d_first_entr)\n"
                "       clearflag(f_first_entry)\n"
                "     endif\n"
                "     nomatch()  # give to default handler\n\n"
                "     t_nogo\n"
                "       if not(valdir(%this, west)) then\n"
                "         # they haven't solved the computer room puzzle yet\n"
                "         printcr(d_nogo)\n"
                "       else\n"
                "         nomatch()\n\n"
                "     t_cheat\n"
                "       printcr(\"\\nNote to self: remove cheatcode in final version.\")\n"
                "       newexit(%this, west, l_button_room)\n"
                "       move(o_player, west)\n\n"
                "  END_LOC\n"
                "#-------------------------------------------------------------------------------\n"
                "                                                               (scroll up...)"

 CONTAINED in l_computer_room

 FLAGS
   f_first_read = 1

 ATTRIBUTES
   r_scroll_pos = 1

 TRIGGERS
   "get [o_screen]"  -> t_get
   "read [o_screen]" -> t_read
   "scroll up"       -> t_scroll
   "scroll down"     -> t_scroll

  t_get
    printcr("It's firmly attached to the wall.")
    disagree()

  t_read
    if testflag(f_first_read) then
      clearflag(f_first_read)
      printcr(d_first_read)
    endif
    if equal(r_scroll_pos, 1) then
      print(d_text1)
    else
      if equal(r_scroll_pos, 2) then
        print(d_text2)
      else
        print(d_text3)

  t_scroll
    if equal(%dir, up) then
      if equal(r_scroll_pos, 1) then
        print("You are already at the top of the text.\n")
        disagree()
      else
        r_scroll_pos -= 1
      endif
    else
      if equal(%dir, down) then
        if equal(r_scroll_pos, 3) then
          print(d_at_bottom)
          disagree()
        else
          r_scroll_pos += 1
        endif
      else
        print("You can only scroll up or down.\n")
        disagree()
      endif
   endif
   if trigger(t_read) then endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_scroll_buttons
 DESCRIPTIONS
   d_sys       "the scroll buttons"

   d_no_press  "You cannot press multiple buttons at the same time."

 CONTAINED in l_computer_room

 TRIGGERS
   "press [o_scroll_buttons]" -> t_no_press

   t_no_press
     printcr(d_no_press)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_up_button
 DESCRIPTIONS
   d_sys  "the up button", "the up arrow"

   d_exa  "On the button is an arrow pointing up."

 CONTAINED on o_screen

 TRIGGERS
   "x [o_scroll_buttons]" -> t_exa_scroll
   "press [o_up_button]"  -> t_press
   "press up"             -> t_press

   t_entrance
     agree()

   t_press
     if try(l_location, 0, 0, "scroll up") then
       print("\n(You may also just type \"scroll up\".\n")

   t_exa_scroll
     printcr("Up button: [d_exa]")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_down_button
 DESCRIPTIONS
   d_sys  "the down button", "the down arrow"

   d_exa  "On the button is an arrow pointing down."

 CONTAINED on o_screen

 TRIGGERS
   "x [o_scroll_buttons]"  -> t_exa_scroll
   "press [o_down_button]" -> t_press
   "press down"            -> t_press

   t_entrance
     agree()

   t_press
     if try(l_location, 0, 0, "scroll down") then
       print("\n(You may also just type \"scroll down\".\n")

   t_exa_scroll
     printcr("Down button: [d_exa]")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_safe
 DESCRIPTIONS
   d_sys        "the metal safe"

   d_entr       "There is a [o_safe] here, which is "

   d_exa        "A metal safe, about 12 cubic feet (325 liters) . The safe /
                 looks pretty new and very heavy.\n"
                "\nOn the [o_safe] is a [o_keypad]."

   d_ask_1      "\"I vaguely remember. Haven't seen it in a long time, though /
                 I'll check it out when I find it\"."

   d_ask_2      "\"I found this fine watch in it. There was some other stuff /
                 in there, but I forgot what it was already\"."

   d_guess      "You are either a very lucky guesser or cheating. For the /
                 latter, don't expect to find a watch now.\n"

   d_safe_closed "icons\\\\Vault closed.Png"
   d_safe_open   "icons\\\\Vault open.Png"

 CONTAINED in
   l_secure_room

 FLAGS
   f_openable  = 1
   f_lockable  = 1
   f_locked    = 1
   f_opaque    = 1
   f_takeable  = 0
   f_container = 1

 ATTRIBUTES
   r_ifi_icon = d_safe_closed

 TRIGGERS
   "examine [o_safe]"                  -> t_exa
   "ask [o_npc] about [o_safe]"        -> t_ask
   "look in the [o_safe]"              -> t_exa
   "put [o_subject] [prepos] [o_safe]" -> t_put
   "unlock [o_safe]"                   -> t_unlock
   "close [o_safe]"                    -> t_close
   "open [o_safe]"                     -> t_open
   
   t_entrance
     if not(owns(l_location, o_safe) and cansee(o_actor, o_safe)) then
       agree()
     endif
     setflag(f_seenbefore)
     print(d_entr)
     if testflag(f_open) then
       printcr("open.")
     else
       printcr("closed.")
     endif
     agree()
  
   t_exa
     printcr(d_exa)
     print("\n[the] [o_safe] is")
     if testflag(f_open) then
       printcr(" open.")
       indent(2)
       indent()
       contents(o_safe)
       indent(-2)
     else
       printcr(" closed.")
     endif
     agree()

   t_ask
     if owns(o_npc, o_watch) then
       if owns(o_safe, o_brass_key) then
         printcr(d_ask_2)
       else
         printcr("Just a safe.")
     else
       printcr(d_ask_1)

   t_put
     # this trigger must be executed after the 
     # trigger from o_subject.
     
     if not(testflag(f_open)) then
       printcr("[the] [o_safe] is closed.")
     else     
       move(o_subject, o_safe)
       printcr("You put the [o_subject] [prepos] [the] [o_safe].")
       o_subject.r_preposition = %prepos
       clearflag(o_subject.f_bypass)
     agree() # for lamp

   t_unlock
     if testflag(f_seenbefore) then
       printcr("Maybe examine [the] [o_safe] first?")
     else
       printcr("Just enter the correct number on [the] [o_keypad].")

   t_close
     printcr("You close the safe door and hear a click.")
     setflag(f_opaque)
     clearflag(f_open)
     setflag(f_locked)
     o_keypad.r_set_to = 0
     r_ifi_icon = d_safe_closed
     l_secure_room.r_ifi_picture = l_secure_room.d_picture_closed

   t_open
     # we let this handle by the verb default code, but need to do
     # something extra first. So we must catch this user input.
     if runverb() then endif
     if testflag(f_open) then
       # cannot test for runverb() because may return disagree()
       r_ifi_icon = d_safe_open
       l_secure_room.r_ifi_picture = l_secure_room.d_picture_open
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_keypad
 DESCRIPTIONS
   d_sys        "the keypad"

   d_exa        "The [o_keypad] is a numerical keypad with keys from 0 /
                 through 9. In the upper part of the keypad is a section that /
                 reads: [r_set_to].\n"
                "You may enter a code (1 or more digits) on the keypad /
                 with \"enter <code> on keypad\" or \"set keypad to /
                 <code>\".\n"

   d_guess      "You are either a very lucky guesser or cheating. For the /
                 latter, don't expect to find a watch when you open the /
                 safe now.\n"

 CONTAINED on o_safe

 FLAGS
   f_bypass = 1
   f_any    = 0

 ATTRIBUTES
   r_set_to = 0

 TRIGGERS
   "set [o_keypad] to [value]"   -> t_set
   "set [o_safe] to [value]"     -> t_set
   "enter [value]"               -> t_set
   "enter [value] on [o_keypad]" -> t_set
   "enter [value] on [o_safe]"   -> t_set
   "push [value]"                -> t_set
   "close [o_safe]"              -> t_reset

   t_entrance
     agree()

   t_set
     if testflag(f_open) then
       printcr("[the] [o_safe] door must be closed first.")
       agree() #exit the trigger here
     endif
     if lt(%value, 0) then
       printcr("Please enter a positive value.")
       disagree()
     endif
     r_set_to = %value
     if equal(%value, 5489) then
       printcr("you hear a click from inside the safe.")
       clearflag(o_safe.f_locked)
       o_it.r_it = o_safe
       clearflag(o_it.f_update_it)
       # check if the player is cheating with the safe code
       if (not(owns(o_npc, o_watch))) then
         # yes, he's cheating, because Fred doesnt have the watch yet.
         printcr(d_guess)
         move(o_watch, o_npc, on)
       endif
     else
       printcr("Nothing happens.")
     endif                              # not necessary
     agree()                            # not necessary

   t_reset
     r_set_to = 0
     clearflag(f_open)
     setflag(f_locked)
     printcr("[the] [o_keypad] beeps once.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_watch
 DESCRIPTIONS
   d_sys  "the golden watch"

   d_exa  "[o_npc] is wearing [the] [o_watch]. He won't let you near it.\n"

   d_ask1 "Fred looks at you suspiciously. \"You are running ahead a bit. /
           You're not supposed to know about the watch yet...\""

   d_ask2 "\"Pretty nice watch, huh? With each new adventurer there's /
           another surprise in the safe. Too bad I never get to keep it.\""

   d_icon "icons\\\\Watch.Png"

 CONTAINED in o_safe

 FLAGS
   f_takeable = 1

 ATTRIBUTES
   r_ifi_icon = d_icon

 TRIGGERS
   "ask [o_npc] about [o_watch]"           -> t_ask
   "[o_npc], give [o_watch] to [o_player]" -> t_take
   "[o_npc], give [o_watch]"               -> t_take
   "take [o_watch]"                        -> t_take
   "take [o_watch] from [o_npc]"           -> t_take

   t_entrance
     if owns(o_npc, %this) then
       setflag(f_seenbefore)     # for 'take all'
       agree()
     else
       nomatch()

   t_ask
     if not(owns(o_npc, o_watch)) then
       printcr(d_ask1)
     else
       printcr(d_ask2)
     endif

   t_take
     if owns(o_npc, %this) then
       printcr("[the] [o_npc] won't let you have the watch.")
     else
       # let the verb handle it
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_lamp
 DESCRIPTIONS
   d_sys      "the lamp", "the light", "the flashlight"

   d_donthave "You don't have [the] [o_lamp]."

   d_lit      "[the] [o_lamp] is lit. It has power for [m_battery] more /
               moves. Because there are no batteries here, you can recharge /
               the lamp with the \"charge\" command."

   d_empty    "The lamp just went off (use charge to reset it.)"

   d_lamp_on  "icons\\\\Lamp on.Png"
   d_lamp_off "icons\\\\Lamp off.Png"

 CONTAINED in l_cellar

 FLAGS
   f_lit      = 0
   f__needed  = 1
   f_swap     = 1
   f_takeable = 1
   f_bypass   = 1     # must be able to turn it on in the dark
   f_moveable = 1

 ATTRIBUTES
   r_ifi_icon = d_lamp_off

 TRIGGERS
   "i"                 -> t_i
   "charge [o_lamp]"   -> t_charge
   "light [o_lamp]"    -> t_light
   "turn on [o_lamp]"  -> t_light
   "turn [o_lamp] on"  -> t_light
   "turn off [o_lamp]" -> t_off
   "turn [o_lamp] off" -> t_off
   "examine [o_lamp]"  -> t_exa
   "use [o_lamp]"      -> t_use

   t_entrance
     if cansee(o_player, o_lamp) then
       setflag(f_seenbefore)
       if owns(l_location, o_lamp) then
         print("There is [a] [o_lamp] ")
         if testflag(f_lit) then
           print("(providing light) ")
         endif
         printcr("here.")
       else
         if not(owns(o_player, o_lamp)) then
           indent()
           print("There is [a] [o_lamp] ")
           if testflag(f_lit) then
             print("(providing light) ")
           endif
           print(o_lamp.r_preposition)
           print(" the ")
           printcr(owner(o_lamp))
       endif
     endif
     agree()
          
   t_i
     if owns(o_player, o_lamp) then
       indent()
       print("[a] [o_lamp]")
       if testflag(f_lit) then
         printcr(", providing light")
       else
         printcr("")
     else
       nomatch()
     
   t_charge
     settimer(m_battery, 250)
     starttimer(m_battery)
     setflag(f_lit)
     printcr("The [o_lamp] is charged for 250 more moves.")
     disagree()
     
   t_light
     if not(owns(o_actor, o_lamp)) then
       printcr(d_donthave)
       disagree()    # for l_dark_place
     else
       if not(testflag(o_lamp.f_lit)) then
         if not(equal(m_battery, 0)) then
           setflag(o_lamp.f_lit)
           starttimer(m_battery)
           entrance(l_location)
           r_ifi_icon = d_lamp_on
         else
           printcr("Nothing happens.")
           disagree()
       else     # lamp is lit
         printcr("But the [o_lamp] is already lit.")
         disagree()
      endif

   t_off
     if not(owns(o_actor, o_lamp)) then
       printcr(d_donthave)
     else
       if not(testflag(o_lamp.f_lit)) then
         printcr("The lamp is already off.")
       else
         clearflag(f_lit)
         stoptimer(m_battery)
         r_ifi_icon = d_lamp_off
         if not(islit(o_actor)) then
           printcr("It is now pitch black.")
         else
           printcr("The [o_lamp] is now off.")
         endif
       endif
     endif
     disagree()

   t_empty
     if cansee(o_player, o_lamp) then
       printcr(d_empty)
     endif
     clearflag(o_lamp.f_lit)
     stoptimer(m_battery)

   t_exa
     if testflag(f_lit) then
       printcr(d_lit)
     else
       printcr("[the] [o_lamp] is currently turned off.")

  t_use
    if equal(m_battery, 0) then
      if trigger(t_charge) then endif
    else
      nomatch()

END_OBJ
#-------------------------------------------------------------------------------


# The following objects are used in the dial puzzle.

#-------------------------------------------------------------------------------
$OBJECT o_dial_puzzle
 DESCRIPTIONS
   d_sys    "the dial puzzle"

   d_exa    "3 dials, 3 hands and 4 buttons."

   d_help   "\nFred looks at you. \"So, I see you started working on the /
             dials, huh? It turned out some adventurers found it very /
             hard to solve. You seem like a smart person, but game policy requires /
             me to inform you about this new option.\n\nAs of this version /
             of the story, there is extra code that allows me to help you if /
             you want. But... it will cost you.\n\nYou can get a hint and lose /
             15 points or get the solution and lose 25. If you ask for the /
             solution after the hint, it will only cost 10 extra points.\n\nTo /
             get a hint or the solution, say 'Fred, hint//solution for the /
             dial puzzle'\"."

   d_sure   "Fred smiles at you. \"If you just need a clue about what this /
             puzzle is about, you may also ask me for free about the dials, /
             buttons and door. Are you sure you want to trade points for /
             information? (y//n)\""

   d_cool   "\n\"That's cool, buddy. I knew you would try it by yourself\"."

 CONTAINED in l_dial_room

 FLAGS
   f_sk_puzzle = 1
   f_hidden    = 1  # for global scope
   f_may_ask   = 0

 ATTRIBUTES
   r_times_pressed = 0
   r_turns         = -1  # in case they save at the first move

 TRIGGERS
   "[o_npc], hint for [o_dial_puzzle]"     -> t_check
   "[o_npc], solution for [o_dial_puzzle]" -> t_check
   "[o_npc], hint [o_dial_puzzle]"     -> t_check
   "[o_npc], solution [o_dial_puzzle]" -> t_check
   "ask [o_npc] about [o_dial_puzzle]"     -> t_ask

   t_entrance
     clearflag(f_hidden)
     setflag(f_seenbefore)
     agree()

   t_check
     if testflag(l_dial_room.f_solved_dials) then
       printcr("You already solved that puzzle.")
       disagree()
     endif
     if not(testflag(f_may_ask)) then
       printcr("You must try it yourself first.")
       disagree()
     endif
     nomatch()

   t_ask
     if testflag(l_dial_room.f_solved_dials) then
       printcr("You solved that already.")
     else
       printcr(d_exa)

   t_sure
     printcr(d_sure)
     if yesno() then
       agree()
     else
       disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_dial_hint
 DESCRIPTIONS
   d_hint     "You will have figured out that all 3 hands must point to the 8 /
               at the same time. So, in the move prior to that, red would /
               have been 7 (delta 1), green would have been 6 (delta 2) and /
               blue would have been 5 (delta 3). Backtracking the moves further, /
               we get the following table:\n\n"
              "  Red  Green  Blue\n   8     8      8\n   7     6      5\n   "
              "6     4      2\n   5     2      9\n   4     0      6\n   3"
              "     0      3.\n\n"
              "Now you complete the table and solve the puzzle.\n"

 CONTAINED in o_dial_puzzle

 FLAGS
   f_hidden = 1
   f_hint   = 0

 TRIGGERS
   "[o_npc], hint for [o_dial_puzzle]" -> t_hint
   "[o_npc], hint [o_dial_puzzle]" -> t_hint

   t_hint
     if not(testflag(f_hint)) then
       if not(trigger(o_dial_puzzle.t_sure)) then
         printcr(o_dial_puzzle.d_cool)
         disagree()
       endif
       setflag(f_hint)
       o_player.r_score -= 15
       printcr("\n *** Your score just went down by 15 points ***.\n")
     endif
     printcr(d_hint)
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_dial_sol
 DESCRIPTIONS
   d_solution "Press the red button. Wait. Then press the blue button. Wait and /
               then press the green button. Then wait 3."

 CONTAINED in o_dial_puzzle

 FLAGS
   f_hidden = 1
   f_sol    = 0

 TRIGGERS
   "[o_npc], solution for [o_dial_puzzle]" -> t_sol
   "[o_npc], solution [o_dial_puzzle]" -> t_sol

   t_sol
     if not(testflag(f_sol)) then
       if not(trigger(o_dial_puzzle.t_sure)) then
         printcr(o_dial_puzzle.d_cool)
         disagree()
       endif
       setflag(f_sol)
       if not(testflag(o_dial_hint.f_hint)) then
         setflag(o_dial_hint.f_hint)
         o_player.r_score -= 25
         printcr("\n *** Your score just went down by 25 points ***.\n")
       else
         o_player.r_score -= 10
         printcr("\n *** Your score just went down by 10 points ***.\n")
       endif
     endif
     printcr(d_solution)
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_colored_buttons
 DESCRIPTIONS
   d_sys       "the buttons"

   d_no_press  "You cannot press multiple buttons at the same time."

 CONTAINED in l_dial_room

 ATTRIBUTES
   r_is = are

 TRIGGERS
   "x [o_colored_buttons]"     -> t_exa
   "press [o_colored_buttons]" -> t_no_press

   t_entrance
     agree()

   t_exa
     printcr("[o_red_button.d_exa]\n")
     printcr("[o_green_button.d_exa]\n")
     printcr("[o_blue_button.d_exa]\n")
     printcr("[o_black_button.d_exa]")

   t_no_press
     printcr(d_no_press)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_red_dial
 DESCRIPTIONS
   d_sys "the red dial"

   d_exa "A red circular plate, fixed to the wall. It looks like a clock dial /
          with one hand, with the numbers 0 through 9 printed at equal /
          distances around the edge. The number 8 is highlighted. There is a /
          [o_red_hand] on the dial, pointing towards the number [m_red_dial].\n"

 CONTAINED in l_dial_room

 TRIGGERS
   "turn [o_red_dial] to [value]" -> t_turn
   "set  [o_red_dial] to [value]" -> t_turn
   "move [o_red_dial] to [value]" -> t_turn
   "press [o_black_button]"       -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr("The [o_red_dial] is firmly fixed to the wall.")
     
   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_red_dial)
       settimer(m_red_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_red_button
 DESCRIPTIONS
   d_sys     "the red button", "the red engraving"

   d_exa     "the red button has a diameter of about 2 inches. It is /
              positioned under the [o_red_dial]. "
             "In the button is an engraving that says: delta = 1.\n"

   d_no_stop "Nothing happens. The hand keeps moving. Apparently, the button /
              can only be used to start the hand moving."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 ATTRIBUTES

 TRIGGERS
   "press [o_red_button]"   -> t_press
   "press [o_black_button]" -> t_reset
   "read [o_red_button]"    -> t_read

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       if testflag(f_pressed) then
         # They may not stop the hand once it's moving
         printcr(d_no_stop)
       else
         o_dial_puzzle.r_times_pressed += 1   # for offering help
         setflag(f_pressed)
         starttimer(m_red_dial)
         printcr("[the] [o_red_hand] starts moving.")
       endif
     endif

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       o_dial_puzzle.r_times_pressed += 1   # for offering help
       clearflag(f_pressed)       
     endif
     agree()

   t_read
     printcr(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_red_hand
 DESCRIPTIONS
   d_sys "the red hand"

   d_exa "the red hand points to the number [m_red_dial].\n"

   d_blocked "The [o_red_hand] is blocked by some sort of mechanism. It's /
              obviously not meant to be moved manually."

 CONTAINED on o_red_dial

 TRIGGERS
   "turn [o_red_hand] to [value]" -> t_turn
   "set  [o_red_hand] to [value]" -> t_turn
   "move [o_red_hand] to [value]" -> t_turn
   "press [o_black_button]"      -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr(d_blocked)
     disagree()

   t_print_value
     m_red_dial = m_red_dial rem 10
     if testflag(o_red_button.f_pressed) and cansee(o_player, %this) then
       printcr("\nThe red hand moves towards the [m_red_dial].")
     endif
     m_red_hand = 0

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_red_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_dial
 DESCRIPTIONS
   d_sys "the green dial"

   d_exa "A green circular plate, fixed to the wall. It looks like a clock /
          dial with one hand, with the numbers 0 through 9 printed at equal /
          distances around the edge. The number 8 is highlighted. There is /
          a [o_green_hand] on the dial, pointing towards the number /
          [m_green_dial].\n"

 CONTAINED in l_dial_room

 TRIGGERS
   "turn [o_green_dial] to [value]" -> t_turn
   "set  [o_green_dial] to [value]" -> t_turn
   "move [o_green_dial] to [value]" -> t_turn
   "press [o_black_button]"         -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr("The [o_green_dial] is firmly fixed to the wall.")

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_green_dial)
       settimer(m_green_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_button
 DESCRIPTIONS
   d_sys     "the green button", "the green engraving"

   d_exa     "the green button has a diameter of about 2 inches. It is /
              positioned under the [o_green_dial]. "
             "In the button is an engraving that says: delta = 2.\n"

   d_no_stop "Nothing happens. The hand keeps moving. Apparently, the button /
              can only be used to start the hand moving."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 ATTRIBUTES

 TRIGGERS
   "press [o_green_button]" -> t_press
   "press [o_black_button]" -> t_reset
   "read [o_green_button]"  -> t_read

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
        else
       if testflag(f_pressed) then
         # They may not stop the hand once it's noving
         printcr(d_no_stop)
       else
         o_dial_puzzle.r_times_pressed += 1   # for offering help
         setflag(f_pressed)
         starttimer(m_green_dial)
         printcr("The [o_green_hand] starts moving.")
       endif
      endif
      agree()

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       clearflag(f_pressed)       
     endif
     agree()

   t_read
     printcr(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_green_hand
 DESCRIPTIONS  
   d_sys     "the green hand"

   d_exa     "the green hand points to the number [m_green_dial].\n"

   d_blocked "The [o_green_hand] is blocked by some sort of mechanism. It's /
              obviously not meant to be moved manually."

 CONTAINED on o_green_dial

 TRIGGERS
   "turn [o_green_hand] to [value]" -> t_turn
   "set  [o_green_hand] to [value]" -> t_turn
   "move [o_green_hand] to [value]" -> t_turn
   "press [o_black_button]"         -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr(d_blocked)
     disagree()

   t_print_value
     m_green_dial = m_green_dial rem 10
     if testflag(o_green_button.f_pressed) and cansee(o_player, %this) then
       printcr("\nThe green hand moves towards the [m_green_dial].")
     endif
     m_green_hand = 0


   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_green_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_dial
 DESCRIPTIONS
   d_sys "the blue dial"

   d_exa "A blue circular plate, fixed to the wall. It looks like a clock /
          dial with one hand, with the numbers 0 through 9 printed at equal /
          distances around the edge. The number 8 is highlighted. There is a /
          [o_blue_hand] on the dial, pointing towards the number /
          [m_blue_dial].\n"

 CONTAINED in l_dial_room

 TRIGGERS
   "turn [o_blue_dial] to [value]" -> t_turn
   "set  [o_blue_dial] to [value]" -> t_turn
   "move [o_blue_dial] to [value]" -> t_turn
   "press [o_black_button]"        -> t_reset

   t_entrance
     # t_entrance for l_dial_room also mentions the three dials
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr("The [o_blue_dial] is firmly fixed to the wall.")

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       stoptimer(m_blue_dial)
       settimer(m_blue_dial, 0)
     endif
     agree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_button
 DESCRIPTIONS
   d_sys     "the blue button", "the blue engraving"

   d_exa     "the blue button has a diameter of about 2 inches. It is positioned /
              under the [o_blue_dial]. "
             "In the button is an engraving that says: delta = 3.\n"

   d_no_stop "Nothing happens. The hand keeps moving. Apparently, the button /
              can only be used to start the hand moving."

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 TRIGGERS
   "press [o_blue_button]"  -> t_press
   "press [o_black_button]" -> t_reset
   "read [o_blue_button]"   -> t_read

   t_entrance
     # t_entrance for l_dial_room also mentions the three buttons.
     setflag(f_seenbefore)
     agree()

   t_press
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       if testflag(f_pressed) then
         # They may not stop the hand once it's noving
         printcr(d_no_stop)
       else
         o_dial_puzzle.r_times_pressed += 1   # for offering help
         setflag(f_pressed)
         starttimer(m_blue_dial)
         printcr("The [o_blue_hand] starts moving.")
       endif
   endif

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       nomatch()  # let verb handle this
     else
       clearflag(f_pressed)       
     endif
     agree()

   t_read
     printcr(d_exa)
 
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_blue_hand
 DESCRIPTIONS
   d_sys     "the blue hand"

   d_exa     "the blue hand points to the number [m_blue_dial].\n"

   d_blocked "The [o_blue_hand] is blocked by some sort of mechanism. It's /
              obviously not meant to be moved manually."

 CONTAINED on o_blue_dial

 TRIGGERS
   "turn [o_blue_hand] to [value]" -> t_turn
   "set  [o_blue_hand] to [value]" -> t_turn
   "move [o_blue_hand] to [value]" -> t_turn
   "press [o_black_button]"        -> t_reset

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_turn
     printcr(d_blocked)
     disagree()

   t_print_value
     m_blue_dial = m_blue_dial rem 10
     if testflag(o_blue_button.f_pressed) and cansee(o_player, %this) then
       printcr("\nThe blue hand moves towards the [m_blue_dial].")
     endif
     m_blue_hand = 0

   t_reset
     if testflag(l_dial_room.f_solved_dials) then
       # puzzle has been solved, no special actions. Let the verb handle this further
       nomatch()
     else
       printcr("The [o_blue_hand] rotates a few times and then stops at 0.")
       agree()
     endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_black_button
 DESCRIPTIONS
   d_sys        "the black button", "the black engraving", "the reset button"

   d_exa        "the [o_black_button] is engraved with the word RESET.\n"

 CONTAINED in l_dial_room

 FLAGS
   f_pressed   = 0
   f_pressable = 1

 TRIGGERS
   "read [o_black_button]" -> t_read

   t_entrance
     setflag(f_seenbefore)
     agree()

   t_read
     printcr(d_exa)
    
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_inscription
 DESCRIPTIONS
   d_sys        "the inscription"

   # descriptions are printed by l_escape_room

   d_exa        "The inscription reads:\n\n"
                 "     ==============\n"
                 "     = To the pit =\n"
                 "     ==============\n"

 CONTAINED in l_escape_room

 FLAGS
   f_first_read = 1

 TRIGGERS
   "read [o_inscription]"    -> t_exa
   "examine [o_inscription]" -> t_exa

   t_exa
     printcr(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

# The following objects are needed in the ladder puzzle

#-------------------------------------------------------------------------------
$OBJECT o_pit
 DESCRIPTIONS
   d_sys        "the pit"

   d_exa        "The pit is about 12 feet (4 m) deep.\n"

   d_enter      "You climb down the [o_ladder] into the pit.\n"

   d_no_enter   "But how? It's 12 feet (4 m) deep, and there's no ladder or /
                 other way to get down without hurting yourself."

   d_on_floor   "Technically, there is a [o_ladder] in the [o_pit], /
                 but it's actually lying on the floor."

   d_items      "There is a [o_dark_hole] in the [o_generic_floor] and a /
                 [o_chute] in the [o_south_wall]."

   d_leave      "You climb out of the pit back into the circular room.\n"

   d_throw_in   "You throw [the] [o_subject] into the [o_pit]."

   d_no_ladder  "When you raise the ladder to lower it into the [o_pit], the /
                 [o_snake] starts hissing at you. You decide that it's /
                 better to not annoy the snake any further and stop. You /
                 will have to find another way to enter the pit."

   d_no_rope    "Well, the [o_rope] probably wasn't secured in the chest for /
                 nothing and you haven't actually used it. Maybe throwing it /
                 into the pit is not your best idea today."

   d_snake_gone "Realizing that you are in the [o_pit] now, you look around /
                 for the snake, terrified, but see that it is no longer /
                 here. Apparently it found a way to escape.\n"

 CONTAINED in l_circular_room

 FLAGS
   f_lit         = 0
   f_container   = 1
   f_open        = 1
   f_first_entry = 1
   f_any         = 0

 TRIGGERS
   "d"                               -> t_enter
   "u"                               -> t_leave
   "climb [o_ladder]"                -> t_leave
   "take [o_subject]"                -> t_take_subject
   "take [o_subject] from [o_pit]"   -> t_take_subject
   "[dir]"                           -> t_no_go
   "climb out"                       -> t_leave
   "enter [o_pit]"                   -> t_enter
   "look"                            -> t_look
   "x [o_pit]"                       -> t_look
   "look in [o_pit]"                 -> t_show_pit
   "look down"                       -> t_show_pit
   "[action] [o_subject] in [o_pit]" -> t_throw_in

   t_enter
     if owns(o_pit, o_player) then
       printcr("You are already in the [o_pit].")
     else
       if owns(o_pit, o_ladder) then
         if testflag(o_ladder.f_floor) then
           printcr(d_on_floor)
         else
           printcr(d_enter)
           printcr(d_items)
           move(o_player, o_pit)
           contents(o_pit)
           setflag(f_seenbefore)
       else
         printcr(d_no_enter)

   t_take_subject
     if equal(o_subject, o_ladder) then
       # the ladder will reply by itself
       nomatch()
     else
       if owns(o_pit, o_player) and not(owns(o_pit, o_subject, 0)) then
         printcr("You cannot reach [the] [o_subject] from here.")
         disagree()
       else
         if owns(l_circular_room, o_player) and owns(o_pit, o_subject) then
           printcr("[the] [o_subject] is in the [o_pit]. You cannot reach it from here.")
           disagree()
         else
           nomatch()

   t_leave
     if owns(o_pit, o_player) then
       # ladder will always be in the pit when player is in pit
       if (owns(o_player, o_ladder) or testflag(o_ladder.f_floor)) then
         printcr("\n(putting the ladder against the wall).\n")
         move(o_ladder, o_pit)  # in case the player has it
         clearflag(o_ladder.f_floor)
       endif
       printcr(d_leave)
       move(o_player, l_circular_room)
       entrance(l_circular_room)
       disagree()  # prevent ladder from replying
     else
       nomatch()

   t_no_go
     if owns(%this, o_player) then
       printcr("You can't go that way.")
       disagree()
     else
       nomatch()

   t_look
     if owns(%this, o_player) then
       printcrbold(l_location)
       printcr("(in the pit).\n")
       if testflag(f_first_entry) then
         printcr(d_snake_gone)
         clearflag(f_first_entry)
       endif
       if not(testflag(f_seenbefore)) then
         setflag(f_seenbefore)
         print(d_exa)
       endif
       printcr(d_items)
     else
       move(o_pit, l_storage)
       clearflag(l_circular_room.f_seenbefore)
       entrance(l_circular_room)
       move(o_pit, l_circular_room)
     endif
     # now list the items in the pit
     if trigger(t_show_pit) then endif

   t_show_pit
     o_player.r_nr_to_reveal = count(%this, f_any, 1)
     if equal(o_player.r_nr_to_reveal, 0) then
       printcr("There are no items in the pit.")
       agree()
     endif
     setflag(o_player.f_first)
     print("\nIn the pit ")
     if equal(o_player.r_nr_to_reveal, 1) then
       print("is ")
     else
       print("are ")
     endif
     synchronize(%this, t_reveal, f_any, 1)
     agree()  # otherwise returns number of objects from sync

   t_throw_in
     if not(equal(%action, drop) or equal(%action, throw) or equal(%action, put)) then
       nomatch()
     endif
     if owns(o_pit, o_subject) then
       printcr("[the] [o_subject] is already in the [o_pit].")
       disagree()
     endif
     if equal(o_subject, o_ladder) and owns(l_circular_room, o_snake) then
       printcr(d_no_ladder)
       agree()
     endif
     if equal(o_subject, o_rope) and
        not(testflag(l_east_of_grating.f_solved_ladder)) then
       printcr(d_no_rope)
       agree()
     endif
     if owns(o_pit, o_player) then
       printcr("As you are in the o_pit yourself, you just drop [the] [o_subject].")
       if try(o_actor, 0, 0, "drop [o_subject]") then endif
     else
       if try(o_actor, 0, 0, "put [o_subject] in [o_pit]") then endif
       # scope must be o_actor here, in case they use 'all'.
       # otherwise the pit will move the all object because it will get the
       # action record before o_all does

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_dark_hole
 DESCRIPTIONS
   d_sys    "the dark hole"

   d_exa    "the hole is about 1 ft wide. Way too narrow for you to enter.\n"

 CONTAINED in o_pit

 FLAGS
   f_any = 0   # to exclude from t_reveal

 TRIGGERS
   "examine [o_generic_floor]" -> t_exa

   t_entrance
     agree()

   t_exa
     print(d_exa)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_chute
 DESCRIPTIONS
   d_sys          "the chute"

   d_exa_pit      "The chute is about 3 feet wide. It goes up very steeply."

   d_exa_esc      "The chute is about 3 feet wide. It goes down very /
                   steeply, like a slide."

   d_enter_chute  "You climb up a few feet and then slide back into the /
                   pit. The chute is too steep and smooth to climb."

 CONTAINED in o_pit

 FLAGS
   f_any = 0   # to exclude from t_reveal

 TRIGGERS
   "examine [o_chute]" -> t_exa
   "enter [o_chute]"   -> t_enter

   t_entrance
     agree()

   t_enter
     if owns(o_pit, o_player) then
       printcr(d_enter_chute)
     else
       printcr("You must be in the [o_pit] first.")

   t_south
     if owns(o_pit, o_player) then
       printcr(d_enter_chute)
       disagree()
     else
       nomatch()  # let the verb react

   t_exa  # used for examine south wall
     if owns(o_pit, %this) then
       printcr(d_exa_pit)
     else
       printcr(d_exa_esc)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_snake
 DESCRIPTIONS
   d_sys        "the giant snake", "the giant python"

   d_exa        "The snake is huge! It's a python, 8 feet (2.5 m) long. /
                 It seems well fed. However, it looks like it doesn't want to /
                 be disturbed. Better leave it alone."

   d_no_throw   "As you throw [the] [o_subject], the [o_snake] suddenly /
                 reacts! It raises itself into the air and bounces [the] /
                 [o_subject] back to you.\n"
                "After that sudden outburst it curls up again and keeps /
                 looking at you with one eye.\n"

   d_throw      "The [o_snake] follows [the] [o_subject] with its eyes, but /
                 it stays at ease.\n"

   d_ask        "\"It's a grumpy old snake. You'll have to find a solution to /
                 get it out of the way\"."

   d_entr_long  "\nThere is a [o_snake] here.\n"

   d_entr_short "\nThere is a [o_snake] here.\n"

   d_no_go      "There's no way you can sn(e)ake past the [o_snake]."

   d_not_mess   "Better not mess with this snake. It's at ease now, but /
                 that may change when you irritate it."

 CONTAINED in l_circular_room

 FLAGS
   f_alive    = 1
   f_fixed    = 0
   f_takeable = 1

 TRIGGERS
   "examine [o_snake]"           -> t_exa
   "ask [o_npc] about [o_snake]" -> t_ask
   "throw [o_subject] east"      -> t_throw
   "throw [o_subject] to east"   -> t_throw
   "use [o_snake]"               -> t_verb
   "where is [o_snake]"          -> t_verb
   "ifi_people"                  -> t_ifi_people

   t_exit
     if equal(%dir, east) then
       # they're trying to get past the snake
       if not(owns(o_pit, o_snake)) then
         printcr(d_no_go)
         disagree()
       endif
     else
       agree()

   t_exa
     # separate trigger to prevent t_default to fire when snake is examined
     printcr(d_exa)

   t_ask
     if owns(l_circular_room, o_snake) then
       printcr(d_ask)
     else
       printcr("It's gone, now.")       
  
   t_throw
     if owns(l_circular_room, o_snake) then
       if testflag(o_subject.f_needed) then
         printcr(d_no_throw)
         move(o_subject, l_circular_room)
       else
         printcr(d_throw)
         nomatch()
     else
       nomatch()       

   t_verb
     # when they click on it in ifixvan
     # or when they ask where the snake is
     if runverb() then endif

   t_crawl
     if gt(m_snake, 2) then
       # the snake crawls for 2 moves
       move(o_snake, l_storage)
       stoptimer(m_snake)
     endif
     if owns(l_circular_room, o_player) then
       if gt(m_snake, 2) then
         printcr("\nThe crawling has stopped.")
       else
         printcr("\nYou hear the snake crawling down in the [o_pit].")

   t_default
     # will always fire if no other triggers for this object were fired
     if equal(o_subject, o_snake) or equal(o_spec, o_snake) or equal(o_actor, o_snake) then
       printcr(d_not_mess)
     else
       nomatch()
    
END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_disk
 DESCRIPTIONS
   d_sys          "the wooden disk", "the wooden circle", "the axle"

   d_exa          "The disk is about 1 foot (30 cm) in diameter. It hovers a few /
                   inches above the floor, so you figure it must be /
                   attached to the floor with an axle. It looks like it can /
                   be rotated.\n\n"
                  "In the middle of the disk is a [o_groove] with some /
                   [o_splinters] in it.\n"

   d_ask1          "\"The [o_disk] can be rotated. If you could somehow /
                    reach it.\""

   d_ask2          "\"It is no longer important, now that you got rid of /
                    that snake.\""

   d_more_specific "You have to be more specific about which way to turn: /
                    clockwise or counterclockwise."

   d_snake         "You start to walk towards the [o_disk], but when the /
                    [o_snake] turns towards you, you decide it may be /
                    better to stay where you are."

   d_ctr_clockwise "That would mean you would fall into the [o_pit]."

   d_clockwise     "As soon as you start pushing the ladder. it starts /
                    to rotate towards the snake. The snake hisses at you, /
                    but the ladder in between prevents it from reaching you.\n"
                   "You push harder when the ladder reaches the snake. With /
                    tremendous effort you push the snake towards the edge of /
                    the [o_pit]. The snake winds itself around the ladder, /
                    and both ladder and snake tumble into the [o_pit]!"
                   
   d_turn_prepos   "Use clockwise or counterclockwise to indicate in which /
                    direction to turn."

 CONTAINED in l_circular_room

 FLAGS
  f_fixed = 0

 TRIGGERS
   "ask [o_npc] about [o_disk]"   -> t_ask
   "ask [o_npc] about [o_groove]" -> t_ask
   "get [o_disk]"                 -> t_get_disk
   "turn [o_disk]"                -> t_turn
   "push [o_disk]"                -> t_turn
   "turn [o_groove]"              -> t_turn
   "push [o_groove]"              -> t_turn
   "turn [o_ladder]"              -> t_turn
   "push [o_ladder]"              -> t_turn
   "turn [o_disk] [dir]"          -> t_turn_err
   "push [o_disk] [dir]"          -> t_turn_err
   "turn [o_groove] [dir]"        -> t_turn_err
   "push [o_groove] [dir]"        -> t_turn_err
   "turn [o_ladder] [dir]"        -> t_turn_err
   "turn [o_disk] [prepos]"       -> t_turn_prepos
   "push [o_disk] [prepos]"       -> t_turn_prepos
   "turn [o_groove] [prepos]"     -> t_turn_prepos
   "push [o_groove] [prepos]"     -> t_turn_prepos
   "turn [o_ladder] [prepos]"     -> t_turn_prepos
   "push [o_ladder] [prepos]"     -> t_turn_prepos

   t_ask
     if owns(l_circular_room, o_snake) then
       printcr(d_ask1)
     else
       printcr(d_ask2)

   t_get_disk
     printcr("The disk is firmly attached to the floor by its axle.")

   t_turn
     if equal(o_subject, o_ladder) then
       if owns(o_player, o_ladder) then
         nomatch()
       else
         if not(owns(o_groove, o_ladder)) then
           printcr("You don't have the ladder.")
           disagree()
         endif
       endif       
     endif
     if owns(o_groove, o_ladder) then
       printcr(d_more_specific)
     else
       if owns(l_circular_room, o_snake) then
         printcr(d_snake)
       else
         printcr("Nothing happens.")

   t_turn_err
     if equal(o_subject, o_ladder) and owns(o_player, o_ladder) then
       nomatch()
     endif
     if owns(o_groove, o_ladder) then
       printcr("Better use clockwise//counterclockwise than compass directions.")
     else
       printcr(d_snake)

   t_turn_prepos
     if equal(o_subject, o_ladder) and owns(o_player, o_ladder) then
       nomatch()
     endif
     if owns(o_groove, o_ladder) and owns(l_circular_room, o_snake) then
       if equal(o_subject, o_disk) then
         printcr("(By pushing the ladder).")
       endif
       if equal(%prepos, counterclockwise) then
         printcr(d_ctr_clockwise)
       else
         if equal(%prepos, clockwise) then
           printcr(d_clockwise)
           move(o_ladder, o_pit)
           move(o_snake, o_pit)
           setflag(o_ladder.f_floor)
           if equal(o_rope.r_tied_to, o_ladder) then
             printcr("The rope follows the ladder into the pit.")
             move(o_rope, o_pit)
           endif
           starttimer(m_snake)
           printcr(o_player.d_score_50)
           o_player.r_score += 50
         else
           printcr(d_turn_prepos)
         endif
       endif
     else
       printcr("Nothing happens.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_groove
 DESCRIPTIONS
   d_sys        "the groove"

   d_exa        "The groove runs edge to edge through the middle of the disk. /
                 It's 2 inches (5 cm) deep and about 3 inches (8 cm) wide. In /
                 the groove are some wood splinters."

   d_slide      "Carefully, so you don't disturb the [o_snake], you align the /
                 [o_ladder] with the [o_groove] and slide it in until it is /
                 level on both sides. It now almost splits the room in two."

   d_throw      "[the] [o_spec] has no protrusions that the rope might get /
                 stuck to."

 CONTAINED in l_circular_room

 FLAGS
   f_container = 1

 TRIGGERS
   "put [o_ladder] in [o_groove]"   -> t_put
   "put [o_ladder] on [o_groove]"   -> t_put
   "slide [o_ladder] in [o_groove]" -> t_put
   "put [o_ladder] in [o_disk]"     -> t_put
   "put [o_ladder] on [o_disk]"     -> t_put
   "slide [o_ladder] in [o_disk]"   -> t_put
   "throw [o_rope] at [o_groove]"   -> t_throw
   "throw [o_rope] at [o_disk]"     -> t_throw

   t_put
     if owns(o_groove, o_ladder) then
       printcr("It already is.")
     else
       if not(owns(o_actor, o_ladder)) then
         printcr("(Taking the ladder first).\n")
         if not(try(l_location, 0, 0, "get [o_ladder]")) then
           disagree()
         endif
       endif
       if owns(l_circular_room, o_snake) then
         printcr(d_slide)
       else
         printcr("Ok, the ladder is now in the groove.")
       endif
       move(o_ladder, o_groove, in)

   t_throw
     printcr(d_throw)
     disagree()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_splinters
 DESCRIPTIONS
   d_sys       "the wood splinters", "the wood splinter"

   d_exa       "Similar wood as from the ladder."

   d_take      "There's no use taking the [o_splinters]."

 CONTAINED in o_groove

 FLAGS
   f_swap     = 1
   f_takeable = 1
   f_any      = 0

 TRIGGERS
   "get [o_splinters]" -> t_take

   t_entrance
     agree()

   t_take
     printcr(d_take)

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_escape_hole
 DESCRIPTIONS
   d_sys        "the hole", "the hole in the ceiling"

   d_exa        "[the] [o_escape_hole] seems large enough to climb through. /
                 if only you could reach it...\n"

   d_ask        "Fred looks up at the ceiling. \"It's a large hole. I think /
                 you will fit through it. If you can reach it\"."

 CONTAINED in l_escape_room

 TRIGGERS
   "ask [o_npc] about [o_escape_hole]" -> t_ask
   "enter [o_escape_hole]"             -> t_enter

   t_enter
     printcr("It's out of reach.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_ring
 DESCRIPTIONS
   d_sys       "the metal ring"

   d_exa       "The ring is about 1 foot (30 cm) in diameter. It hangs down /
                from the ceiling and is very close to [the] [o_escape_hole]. /
                The metal is scratched as if something was hooked to the /
                ring"

   d_ask       "\"It looks like it's made to hang something on it. And it's /
                very close to [the] [o_escape_hole]\"."

   d_throw     "That would really be an acomplishment if you could throw it /
                through the ring from here. But unfortunately, it's /
                unrealistic. You need something heavy on the rope to throw /
                it that high."

 CONTAINED in l_escape_room

 TRIGGERS
   "ask [o_npc] about [o_ring]"       -> t_ask
   "throw [o_rope] [prepos] [o_ring]" -> t_throw
   "tie [o_rope] to [o_ring]"         -> t_tie

   t_throw
     if equal(o_rope.r_tied_to, o_hook) then
       if trigger(o_hook.t_throw) then endif
     else
       printcr(d_throw)

   t_tie
     printcr("The ring is out of your reach.")
     disagree()

END_OBJ
#-------------------------------------------------------------------------------


#########################################################
# Some scenery objects to make game play more realistic #
#########################################################

#-------------------------------------------------------------------------------
$OBJECT o_endgame_scenery
 DESCRIPTIONS
   d_sys    "the snake", "the garden shed", "the hedge", "the hedges"

   d_exa1   "the [o_endgame_scenery] is too far away to get a good look."

   d_exa2   "the [o_endgame_scenery] looks the same as the first time you saw it."

   d_exa3   "Looks great in the sunshine! You really have a beautiful /
             view from up here."

 CONTAINED in l_exit

 FLAGS
   f_scenery = 1
   f_swap    = 1
   f_hidden  = 1  # to avoid disambiguation with scope all_locs

 ATTRIBUTES
   r_rnd = 0

 TRIGGERS
   "x [o_endgame_scenery]"        -> t_exa
   "look at [o_endgame_scenery]"  -> t_exa
   "where is [o_endgame_scenery]" -> t_where

   t_entrance
     agree()

   t_exa
     r_rnd = rnd(1,3)
     if equal(r_rnd, 1) then
       printcr(d_exa1)
     else
       if equal(r_rnd, 2) then
         printcr(d_exa2)
       else
         printcr(d_exa3)

   t_where
     printcr("You can see it far away in the distance.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_north_wall
 DESCRIPTIONS
   d_sys       "the north wall"

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_swap    = 1
   f_hidden = 1
   f_bypass = 1

 TRIGGERS
   "examine [o_north_wall]"  -> t_exa
   "where is [o_north_wall]" -> o_generic_wall.t_exa

   t_entrance
     agree()

   t_exa
     if valdir(l_location, n) then
       print("To the north is the exit to ")
       printcr(dest(l_location, n))
     else
       if trigger(o_generic_wall.t_exa) then endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_east_wall
 DESCRIPTIONS
   d_sys       "the east wall"

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_swap    = 1
   f_hidden  = 1
   f_bypass  = 1

 TRIGGERS
   "examine [o_east_wall]"  -> t_exa
   "where is [o_east_wall]" -> o_generic_wall.t_exa

   t_entrance
     agree()

   t_exa
     if valdir(l_location, e) then
       print("To the east is the exit to ")
       printcr(dest(l_location, e))
     else
       if trigger(o_generic_wall.t_exa) then endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_south_wall
 DESCRIPTIONS
   d_sys     "the south wall"

 CONTAINED in o_player

 FLAGS
   f_hidden = 1
   f_bypass = 1

 TRIGGERS
   "examine [o_south_wall]"  -> t_exa
   "where is [o_south_wall]" -> o_generic_wall.t_exa

   t_entrance
     agree()

   t_exa
     if valdir(l_location, s) then
       print("To the south is the exit to ")
       printcr(dest(l_location, s))
     else
       if trigger(o_generic_wall.t_exa) then endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_west_wall
 DESCRIPTIONS
   d_sys    "the west wall"

 CONTAINED in o_player

 FLAGS
   f_hidden = 1
   f_bypass = 1

 TRIGGERS
   "examine [o_west_wall]"  -> t_exa
   "where is [o_west_wall]" -> o_generic_wall.t_exa

   t_entrance
     agree()

   t_exa
     if valdir(l_location, w) then
       print("To the west is the exit to ")
       printcr(dest(l_location, w))
     else
       if trigger(o_generic_wall.t_exa) then endif

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_generic_wall
 DESCRIPTIONS
   # no system description

   d_exa_1 "It looks just like a wall, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "A wall, allright."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_swap    = 1
   f_hidden = 1
   f_bypass = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "examine [o_generic_wall]"  -> t_exa
   "where is [o_generic_wall]" -> t_where

   t_entrance
     agree()

   t_exa
     r_examine = rnd(1,3)
     if equal(r_examine, 1) then
       printcr(d_exa_1)
     else
       if equal(r_examine, 2) then
         printcr(d_exa_2)
       else
         printcr(d_exa_3)

   t_where
     printcr("Right here.")

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_generic_ceiling
 DESCRIPTIONS
   d_sys   "the ceiling"

   d_exa_1 "It looks just like the ceiling, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "The ceiling, allright."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_hidden = 1
   f_bypass = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "examine [o_generic_ceiling]"  -> t_exa
   "where is [o_generic_ceiling]" -> t_where

   t_entrance
     agree()

   t_exa
     if owns(l_escape_room, %this, 0) then
       printcr("There's a [o_escape_hole] in the ceiling, with /
                a [o_ring] next to it.")
     else
       r_examine = rnd(1,3)
       if equal(r_examine, 1) then
         printcr(d_exa_1)
       else
         if equal(r_examine, 2) then
           printcr(d_exa_2)
         else
           printcr(d_exa_3)

   t_where
     printcr("Right here.")

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
$OBJECT o_generic_floor
 DESCRIPTIONS
   d_sys "the floor"

   d_exa_1 "It looks just like a floor, nothing special."

   d_exa_2 "It looks just like you expected."

   d_exa_3 "The floor, all right."

 CONTAINED in o_player

 FLAGS
   f_scenery = 1
   f_hidden = 1
   f_bypass = 1

 ATTRIBUTES
   r_examine = 1

 TRIGGERS
   "x [o_generic_floor] "       -> t_exa
   "where is [o_generic_floor]" -> t_where

   t_entrance  # don't call common t_entrance
     agree()

   t_exa
     if equal(l_location, l_closet) then
       if owns(l_closet, o_carpet) or not(testflag(o_trapdoor.f_hidden)) then
         # do nothing, closet will print a message
         agree()
       else
         # let verb print default message
         nomatch()
     else
       #default reply
       r_examine = rnd(1,3)
       if equal(r_examine, 1) then
         printcr(d_exa_1)
       else
         if equal(r_examine, 2) then
           printcr(d_exa_2)
         else
           printcr(d_exa_3)

   t_where
     printcr("Right here.")

   t_default
     if equal(o_subject, %this) then
       print("[the] [o_actor] cannot [action] ")
       if not(equal(%prepos, %none)) then
         print(%prepos)
       endif
       printcr(" [the] [this].")
       disagree()
     else
       nomatch()

END_OBJ
#-------------------------------------------------------------------------------
