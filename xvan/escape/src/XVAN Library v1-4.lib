
#========================================================#
#               XVAN Library version 1.4                 #
#========================================================#

#========================================================#
# Table of Contents                                      #
#========================================================#
#  Section                                     Line number
#  Common descriptions .................................95
#  Common Flags ........................................99
#  Common attributes ..................................116
#  Common triggers ....................................123
#  Timers .............................................252
#  Objects ............................................288
#    o_all ............................................293
#    o_nst ............................................349
#    o_it .............................................365
#    o_status_window ..................................402
# Verbs ...............................................432
#    am ...............................................437
#    are ..............................................441
#    ask ..............................................445
#    break (smash, attack, hit) .......................488
#    close ............................................529
#    cry ..............................................575
#    debug ............................................589
#    do ...............................................602
#    does..............................................606
#    drop .............................................610
#    examine (x, investigate) .........................683
#    exits ............................................713
#    get (take, grab) .................................842
#    give .............................................923
#    go ...............................................978
#    goto .............................................996
#    hang ............................................1016
#    has .............................................1074
#    have ............................................1096
#    help ............................................1100
#    inventory (i) ...................................1118
#    is ..............................................1136
#    jump ............................................1182
#    kick ............................................1202
#    kill ............................................1223
#    knock ...........................................1265
#    listen ..........................................1287
#    lock ............................................1307
#    look (l) ........................................1378
#    move ............................................1412
#    open ............................................1468
#    poke ............................................1533
#    put .............................................1555
#    quit (q) ........................................1634
#    read ............................................1648
#    remember ........................................1669
#    restart .........................................1702
#    restore .........................................1714
#    save ............................................1739
#    say .............................................1757
#    score ...........................................1774
#    sing ............................................1788
#    sit .............................................1802
#    smell ...........................................1825
#    tell ............................................1845
#    testmode ........................................1921
#    thank (thanks) ..................................1932
#    throw ...........................................1951
#    tie .............................................1994
#    touch ...........................................2034
#    transcript ......................................2055
#    turn (rotate) ...................................2065
#    undo ............................................2117
#    unlock ..........................................2134
#    untie ...........................................2194
#    unuse ...........................................2229
#    use .............................................2244
#    verbose (v) .....................................2297
#    wait (z) ........................................2314
#    wear ............................................2340
#    xyzzy ...........................................2393
#    yell (shout) ....................................2400
# Dictionary .........................................2415
#    directions ......................................2418
#    nouns ...........................................2430
#    adjectives ......................................2434
#    prepositions ....................................2438
#    adverbs .........................................2443
#    articles ........................................2447
#    Q-words .........................................2451
#    Conjunctions ....................................2455
#========================================================#

$COMMON_DESCRS
  d_entr_long, d_entr_short, d_exa, d_remember


$COMMON_FLAGS
  f_seenbefore = 0  # To select long or short room description
  f_takeable   = 0  # tells whether objects may be picked up.
  f_openable   = 0
  f_open       = 0
  f_lockable   = 0
  f_locked     = 0
  f_wearable   = 0
  f_worn       = 0
  f_container  = 0
  f_supporter  = 0
  f_alive      = 0
  f_fixed      = 1
  f_any        = 1
  f_examined   = 0  # for 'use' verb
  f_key        = 0  # for 'use' verb


$COMMON_ATTRIBUTES
  r_is   = is   # default is 3rd person.
  r_have = has  # default is 3rd person.
  r_do   = does # default is 3rd person
  r_key  = %none


##########################
# COMMON TRIGGER SECTION #
##########################

$COMMON_TRIGGERS
  t_entrance
    if not(islit(o_player)) then
      printcr("It is pitch black.")
      disagree()
    endif
    # part for location
    if equal(%this, l_location) then
      printcrbold(%this)
      if not(testflag(%this.f_seenbefore)) or testflag(o_player.f_verbose) then
        print(%this.d_entr_long)
        setflag(f_seenbefore)
      else
        print(%this.d_entr_short)
      endif
      agree()
    endif
    # part for objects
    if cansee(o_player, %this) then
      if equal(owner(%this), owner(o_player)) then
        # same containment level
        if testflag(%this.f_seenbefore) then
          print(%this.d_entr_short)
        else
          print(%this.d_entr_long)
          setflag(%this.f_seenbefore)
      else
        if not(owns(o_player, %this, 0)) then
          print("\n[this.r_preposition] [the] ")
          print(owner(%this))
          printcr(" is [a] [this].")
        endif
      endif
      setflag(%this.f_seenbefore)
    endif
    agree()

  t_i
    if owns(o_player, %this, 1) then
      indent()
      printcr("[a] [this]")
    else
      if owns(o_player, %this, 0) and cansee(o_player, %this) then
        indent(2)
        print("[this.r_preposition] [the] ")
        print(owner(%this))
        printcr(" is [a] [this]")
        indent(-2)
      else
        nomatch()
      endif
    endif

  t_reveal
    o_player.r_nr_to_reveal -= 1
    if cansee(o_player, %this) then
      setflag(%this.f_seenbefore)
      if testflag(o_player.f_first) then
        clearflag(o_player.f_first)
        if equal(o_player.r_nr_to_reveal, 0) then
          printcr("[a] [this].")
        else
          print("[a] [this]")
        endif
      else
        # not the first to reply
        if equal(o_player.r_nr_to_reveal, 0) then
          printcr(" and [a] [this].")
        else
          print(", [a] [this]")
        endif
      endif
    endif

  t_talk_to_dead
    o_player.r_random = rnd(1,3)
    if equal(o_player.r_random, 1) then
      printcr("Do you realize that you are talking to [a] [o_actor]?")
    else
      if equal(o_player.r_random, 2) then
        printcr("Do you often talk to liveless objects?")
      else
        printcr("You don't really expect [the] [o_actor] to react, do you?")
      endif
    endif
    agree()

  # next common triggers are for object o_all
  t_sk_drop
    if owns(o_actor, %this) and not(testflag(f_hidden)) then
      # also o_all which otherwise will cause an endless loop
      if try(l_location, 0, 1, "drop [this]") then endif
    else
      notimers() # do not count this one as a move
      nomatch()

  t_sk_drop_prepos
    if owns(o_actor, %this) and not(testflag(f_hidden)) then
      # also o_all which otherwise will cause an endless loop
      if try(l_location, 0, 1, "drop [this] [prepos] [o_spec]") then endif
    else
      notimers() # do not count this one as a move
      nomatch()

  t_sk_take
    if not(owns(o_actor, %this, 0)) and 
      (cansee(o_actor, %this) or testflag(%this.f_bypass)) and
      testflag(%this.f_seenbefore) then
      # also excludes o_all which otherwise will cause an endless loop
      if try(l_location, 0, 1, "take [this]") then endif
    else
      notimers() # do not count this one as a move
      nomatch()

  t_sk_take_prepos
    if not(owns(o_actor, %this, 0)) and 
      (cansee(o_actor, %this) or testflag(%this.f_bypass)) and
      testflag(%this.f_seenbefore) then
      # also excludes o_all which otherwise will cause an endless loop
      if try(l_location, 0, 1, "take [this] [prepos] [o_spec]") then endif
    else
      notimers() # do not count this one as a move
      nomatch()


#################
# TIMER SECTION #
#################

$TIMERS
  # Timer m_init is used to start the game and keep track
  # of the number of moves

  m_init
    init       0
    step       1
    direction  up
    interval   1
    state      go
    trigger_at 1
    execute    o_player.t_init

 m_update_it
   init       -1
   step       1
   direction  up
   interval   1
   state      go
   trigger_at 1
   execute    o_it.t_update_it

 m_status_window
   init       0
   step       0
   direction  up
   interval   1
   state      go
   trigger_at 0
   execute    o_status_window.t_update


##################
# OBJECT SECTION #
##################

#---------------------------------------------------------
$OBJECT o_all
 DESCRIPTIONS
   d_sys "all", "everything"

 CONTAINED in o_player

 FLAGS
   f_hidden   = 1
   f_bypass   = 1
   f_takeable = 1
   f_openable = 1  # to get through prologues
   f_lockable = 1
   f_wearable = 1
   f_alive    = 1
   f_fixed    = 0
   f_any      = 0  # to not participate in synchronize()

 TRIGGERS
   "drop [o_all]"                   -> t_sk_drop_all
   "drop [o_all] [prepos] [o_spec]" -> t_sk_drop_all_prepos
   "take [o_all]"                   -> t_sk_take_all
   "take [o_all] [prepos] [o_spec]" -> t_sk_take_all_prepos

   t_ifi_items
     # o_all should not be listed as a contained item
     agree()

   t_sk_drop_all
     if equal(synchronize(o_actor, t_sk_drop, f_takeable, 1), 0) then
       printcr("There is nothing to drop.")
     else
       notimers()  # each 'drop' will fire the timers.

   t_sk_drop_all_prepos
     if equal(synchronize(o_actor, t_sk_drop_prepos, f_takeable, 1), 0) then
       printcr("There is nothing to drop [prepos] [the] [o_spec].")

   t_sk_take_all
     if equal(synchronize(owner(o_actor), t_sk_take, f_takeable, 1, 0), 0) then
       printcr("There is nothing to take.")

   t_sk_take_all_prepos
     if equal(synchronize(o_spec, t_sk_take_prepos, f_takeable, 1, 0), 0) then
       printcr("There is nothing to take [prepos] [the] [o_spec].")

   t_default
     if equal(o_actor, %this) or equal(o_subject, %this) or equal(o_spec, %this) then
       printcr("For [action] you must address objects individually, or separated /
                by commas.")
       disagree()
     else
       nomatch()
END_OBJ
#---------------------------------------------------------

#---------------------------------------------------------
$OBJECT o_nst
 # this object must always be present
 # it may be modified but removal will cause a compiler error
 DESCRIPTIONS
   d_no  "no such thing"
   d_any "any such thing"

 CONTAINED in o_player

 TRIGGERS
   t_entrance
     agree()
END_OBJ
#---------------------------------------------------------

#---------------------------------------------------------
$OBJECT o_it
 # this object must always be present
 # it may be modified but removal will cause a compiler error
 DESCRIPTIONS
   d_sys "it"

 CONTAINED in o_player

 FLAGS
  f_hidden    = 1
  f_bypass    = 1
  f_update_it = 1  # to determine if auto update

 ATTRIBUTES
  r_it       = %none
  r_last_loc = l_location

 TRIGGERS
   t_update_it
     if not(equal(r_last_loc, l_location)) then
       # they went to a new location, cancel. Erase 'it' object
       # because it will otherwise not be reparsed
       r_it = %none
     else
       if testflag(f_update_it) then
         if not(equal(o_subject, o_it) or equal(o_subject, %none)) then
           r_it = o_subject
         endif
       endif
     endif
     r_last_loc = l_location
     setflag(f_update_it)
     m_update_it = 0
END_OBJ
#---------------------------------------------------------

#---------------------------------------------------------
$OBJECT o_status_window
 DESCRIPTIONS
   d_nodescr  ""

 CONTAINED in o_player

 FLAGS
   f_hidden = 1

 TRIGGERS
   t_entrance
     agree()

   t_exit
     agree()

   t_update
    # updates the status window (only in Glk version)
    # triggered by m_statuswindow timer
    clearstatus()
    setcursor(0,2)
    if islit(l_location) then
      printstatus(l_location)
    else
      printstatus("Darkness")
    endif
END_OBJ
#---------------------------------------------------------


################
# VERB SECTION #
################

#---------------------------------------------------------
$VERB am ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB are ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB ask
 SCOPE all_locs

 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     printcr("Do you realize that you are talking to [a] [o_actor]?.")
     disagree()
   endif
   if not(cansee(o_actor, o_subject)) then
     printcr("[the] [o_subject] is not here.")
     disagree()
   endif
   if equal(o_spec, o_nst) then
     printcr("I don't know what you're talking about.")
     disagree()
   endif

 "ask [o_subject] about [o_spec]"
   DISAMBIGUATION_RULES
     if equal(o_subject, o_nst) then score(-10) endif
     if equal(o_spec, o_nst) then score(-10) endif
     if testflag(o_spec.f_seenbefore) then score(5) endif
     if cansee(o_actor, o_spec) then score(5) endif
   END_RULES
   if equal(o_subject, o_actor) then
     printcr("Talking to yourself is a sign of pending mental collapse.")
   else
     if not(testflag(o_spec.f_seenbefore)) then
       printcr("We haven't found that yet.")
     else
       printcr("Just [a] [o_spec].")

  DEFAULT
    printcr("I only understood you as far as wanting to ask something.")
    if testflag(o_player.f_verb_help) then
      printcr("")
      Printcr("An example of the syntax I understand is:")
      printcr("  'ask Fred about the old wooden chest'")
      printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB break SYNONYM smash SYNONYM attack SYNONYM hit
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_spec, %none)) then
     if not(owns(o_actor, o_spec)) then
       printcr("(taking [the] [o_spec]).")
       if not(try(l_location, 0, 0, "get [o_spec]")) then
         disagree()
       endif
     endif
   endif

 "break"
   if equal(o_actor, o_player) then
     printcr("What do you want to break?")
   else
     printcr("What do you want [the] [o_actor] to break?")
   endif
   getsubject()

 "break [o_subject]",
 "break [o_subject] with [o_spec]"
   printcr("That does not work.")
    
  DEFAULT
    printcr("I only understood you as far as wanting to break something.")
    if testflag(o_player.f_verb_help) then
      printcr("")
      Printcr("Examples of syntaxes I understand are:")
      printcr("  'break'")
      printcr("  'break the window'")
      printcr("  'break the window with the brick'")
      printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB close
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(testflag(o_subject.f_openable)) then
       printcr("[the] [o_subject] is not something that can be closed.")
       disagree()
     else
       if not(testflag(o_subject.f_open)) then
         printcr("But [the] [o_subject] is already closed.")
         disagree()
     endif

 EPILOGUE
   # check if they closed something with the light source in it
   if not(islit(o_player)) then
     printcr("It is now pitch black.")

 "close"
   if equal(o_actor, o_player) then
     printcr("What do you want to close?")
   else
     printcr("What do you want [the] [o_actor] to close?")
   endif
   getsubject()

 "close [o_subject]"
   DISAMBIGUATION_RULES
     if testflag(o_subject.f_open) then score(5) endif
     if testflag(o_subject.f_openable) then score(5) endif
   END_RULES

   clearflag(o_subject.f_open)
   setflag(o_subject.f_opaque)
   printcr("[the] [o_subject] is now closed.")

 DEFAULT
   printcr("I only understood you as far as willing to close something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB cry
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 DEFAULT
   printcr("[the] [o_actor] [o_actor.r_is] not a crybaby.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB debug
 "debug [value]"
   if gt(%value, -1) and lt(%value, 3) then
     debug(%value)
   else
     printcr("Debug level must be 0, 1 or 2.")

 DEFAULT
   printcr("The debug command requires a numerical parameter.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB do ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB does ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB drop
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
  if equal(o_subject, %none) then
    agree()
  endif
  if equal(o_actor, o_nst) then       # no such thing
    print("No one is holding ")
    if equal(o_subject, o_nst) then
      print("[o_nst.d_any].")         # any such thing
    else
      print("[the] [o_subject].")
    endif
    disagree()
  else
    if equal(o_subject, o_nst) then
      # no such thing
      print("[the] [o_actor] [o_actor.r_is] holding [o_nst.d_no] than can be dropped.")
      disagree()
    endif
  endif
  agree()

 EPILOGUE
   # check if they dropped the light source out of sight
   if not(islit(o_player)) then
     printcr("It is now pitch black.")

 "drop"
   if equal(o_actor, o_player) then
     printcr("What do you want to drop?")
   else
     printcr("What do you want [the] [o_actor] to drop?")
   endif
   getsubject()

 "drop [o_subject]"
   DISAMBIGUATION_RULES
    if owns(o_actor, o_subject) then score(10) endif
    if testflag(o_subject.f_takeable) then score(5) endif  # make o_nst loose
   END_RULES

   if owns(o_actor, o_subject) then
     clearflag(o_subject.f_bypass)
     move(o_subject, owner(owner(o_subject)))
     printcr("[o_subject]: dropped.")
   else
     if testflag(o_subject.f_takeable) then
       printcr("[the] [o_actor] [o_actor.r_is] not holding the [o_subject].")
     else
       printcr("[the] [o_subject] cannot be dropped.")

 "drop [o_subject] [prepos] [o_spec]"
   DISAMBIGUATION_RULES
    if owns(o_actor, o_subject) then score(5) endif
    if testflag(o_subject.f_takeable) then score(5) endif  # make o_nst loose
    if not(owns(o_actor, o_spec)) then score(5) endif
    if testflag(o_spec.f_container) and equal(%prepos, in) then score(5) endif
    if testflag(o_spec.f_supporter) and equal(%prepos, on) then score(5) endif
   END_RULES

   if try(l_location, 0, 1, "put [o_subject] [prepos] [o_spec]") then endif

 DEFAULT
   printcr("I only understood you as far as willing to drop something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB examine SYNONYM x SYNONYM investigate
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "examine"
   if equal(o_actor, o_player) then
     printcr("What do you want to examine?")
   else
     printcr("What do you want [the] [o_actor] to examine?")
   endif
   getsubject()

 "examine [o_subject]"
   if equal(o_subject, l_location) then
     entrance(l_location)
   else
     print("[o_subject.d_exa]")
     setflag(o_subject.f_seenbefore)
     contents(o_subject)

 DEFAULT
   printcr("I only understood you as far as willing to examine something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB exits
 "exits"
   indent(2)
   clearflag(o_player.f_exits)
   printcr("\nYou can go:")

   if valdir(l_location, n) then
     setflag(o_player.f_exits)
     indent()
     print("North")
     if testflag(dest(l_location, n).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, n)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, ne) then
     setflag(o_player.f_exits)
     indent()
     print("Northeast")
     if testflag(dest(l_location, ne).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, ne)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, e) then
     setflag(o_player.f_exits)
     indent()
     print("East")
     if testflag(dest(l_location, e).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, e)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, se) then
     setflag(o_player.f_exits)
     indent()
     print("Southeast")
     if testflag(dest(l_location, se).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, se)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, s) then
     setflag(o_player.f_exits)
     indent()
     print("South")
     if testflag(dest(l_location, s).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, s)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, sw) then
     setflag(o_player.f_exits)
     indent()
     print("Southwest")
     if testflag(dest(l_location, sw).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, sw)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, w) then
     setflag(o_player.f_exits)
     indent()
     print("West")
     if testflag(dest(l_location, w).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, w)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, nw) then
     setflag(o_player.f_exits)
     indent()
     print("Northwest")
     if testflag(dest(l_location, nw).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, nw)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, u) then
     indent()
     setflag(o_player.f_exits)
     print("Up")
     if testflag(dest(l_location, u).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, u)) printcr(").")
     else
       print("\n")
     endif
   endif

   if valdir(l_location, d) then
     setflag(o_player.f_exits)
     indent()
     print("Down")
     if testflag(dest(l_location, d).f_seenbefore) then
       print(" (to [the]" ) print(dest(l_location, d)) printcr(").")
     else
       print("\n")
     endif
   endif

   if not(testflag(o_player.f_exits)) then
     indent()
     printcr("Nowhere. There are no exits from your current location.")
   endif

   indent(-2)

 DEFAULT
   printcr("If you want to know the available exits, just type 'exits'.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB get SYNONYM take SYNONYM grab
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
  if equal(o_subject, %none) then
    agree()
  endif
  if equal(o_actor, o_nst) then       # no such thing
    print("There is no one to take ")
    if equal(o_subject, o_nst) then
      print("[o_nst.d_any].")         # any such thing
    else
      print("[the] [o_subject].")
    endif
    disagree()
  else
    if equal(o_subject, o_nst) then
      # no such thing
      print("There is [o_nst.d_no] that [the] [o_actor] take.")
      disagree()
    endif
  endif
  agree()

 "get"
   if equal(o_actor, o_player) then
     printcr("What do you want to get?")
   else
     printcr("What do you want [the] [o_actor] to get?")
   endif
   getsubject()

 "get [o_subject]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_takeable) and not(owns(o_actor, o_subject)) then score(5) endif
   END_RULES
   if not(testflag(o_subject.f_takeable)) then
     printcr("[the] [o_subject] [o_subject.r_is] not something that can be taken.")
     disagree()
   else
     if not(owns(o_actor, o_subject)) then
       setflag(o_subject.f_bypass)
       move(o_subject, o_actor)
       printcr("[o_subject]: taken.")
     else
       printcr("But [the] [o_actor] already [o_actor.r_have] the [o_subject].")
     endif
   endif

 "get [o_subject] [prepos] [o_spec]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_takeable) then
      if owns(o_spec, o_subject) then 
        score(10)
      else
        score(5)
   END_RULES

   if not(testflag(o_subject.f_takeable)) then
     printcr("[the] [o_subject] [o_subject.r_is] not something that can be taken.")
     disagree()
   else
     if owns(o_spec, o_subject) then
       setflag(o_subject.f_bypass)
       move(o_subject, o_actor)
       printcr("[o_subject]: taken.")
     else
       printcr("[the] [o_actor] cannot get [the] [o_subject] [prepos] [the] [o_spec].")
       disagree()
     endif
   endif

 DEFAULT
   printcr("I only understood you as far as willing to get something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB give
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
  if equal(o_subject, %none) then
    agree()
  endif
  if equal(o_actor, o_nst) then       # no such thing
    print("No one is holding ")
    if equal(o_subject, o_nst) then
      print("[o_nst.d_any].")         # any such thing
    else
      print("[the] [o_subject].")
    endif
    disagree()
  else
    if equal(o_subject, o_nst) then
      # no such thing
      print("[the] [o_actor] [o_actor.r_is] holding [o_nst.d_no] than can be dropped.")
      disagree()
    endif
  endif
  agree()

  if not(owns(o_actor, o_subject)) then
    printcr("But [the] [o_actor] [o_actor.r_do] not have [the] [o_subject]!")
    disagree()
  endif
  agree() # is default, may be omitted.

 "give [o_subject] to [o_spec]"
  DISAMBIGUATION_RULES
   if testflag(o_spec.f_alive) then score(5) endif
   if owns(o_actor, o_subject) AND not(equal(o_subject, o_nst)) then score(5) endif
  END_RULES

   if testflag(o_spec.f_alive) then
     printcr("[the] [o_spec] kindly refuses your offer.")
   else
     printcr("There's no use giving [the] [o_subject] to [the] [o_spec].")

 DEFAULT
   printcr("I only understood you as far as wanting to give something.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("An example of the syntax I understand is:")
     printcr("  'give the ball to Fred'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$verb go
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

  "go [dir]",
  "go to [dir]"
    printcr("You can't go that way.")

  DEFAULT
    printcr("I only understood you as far as wanting to go somewhere.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB goto
 SCOPE ALL_LOCS
 PROLOGUE
   if not(equal(o_actor, o_player)) then
     printcr("The 'goto' action only works for the player.")
     disagree()
   endif
   if equal(o_subject, %none) then
     agree()
   else
     if isobject(o_subject) then
       printcr("The goto command can only be used with locations.")
       disagree()

 DEFAULT
   printcr("I only understood you as far as willing to go somewehere.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB hang
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(equal(o_spec, %none)) then
       if owns(o_spec, o_subject, %prepos) then
         agree()
       endif
       if not(owns(o_actor, o_subject)) then
         printcr("(taking [the] [o_subject]).\n")
         if not(try(l_location, 0, 1, "get [o_subject]")) then
           disagree()
         endif
       endif
     endif
   endif
  if equal(o_actor, o_nst) then       # no such thing
    print("No one is holding ")
    if equal(o_subject, o_nst) then
      print("[o_nst.d_any].")         # any such thing
    else
      print("[the] [o_subject].")
    endif
    disagree()
  else
    if equal(o_subject, o_nst) then
      # no such thing
      print("[the] [o_actor] [o_actor.r_is] holding [o_nst.d_no] than can be hung.")
      disagree()
    endif
  endif
  agree()

   # Check whether the actor carries the subject
   if not(owns(o_actor, o_subject)) then
     printcr("But [the] [o_actor] [o_actor.r_do] not have [the] [o_subject]!")
     disagree()
   endif
 agree()

 "hang [o_subject] [prepos] [o_spec]"
   printcr("[the] [o_actor] cannot hang [the] [o_subject] [prepos] [the] [o_spec].")
   
 DEFAULT
   printcr("I only understood you as far as wanting to hang something.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("An example of the syntax I understand is:")
     printcr("  'hang the cloak on the hook'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB has
 SCOPE all_locs

 "who has [o_subject]"
   if testflag(o_subject.f_seenbefore) then
     print("[the] [o_subject] is [o_subject.r_preposition] [the] ")
     print(owner(o_subject))
     printcr(".")
   else
     printcr("You haven't found that yet.")

 DEFAULT
   printcr("I didn't understand that sentence.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("An examples of the syntax I understand is:")
     printcr("  'who has the ball'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB have ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB help
 EPILOGUE
  notimers()

 "[o_player], help 1"
   if testflag(o_player.f_verb_help) then
     clearflag(o_player.f_verb_help)
     printcr("Action samples turned off.")
   else
     setflag(o_player.f_verb_help)
     printcr("Action samples turned on.")

 DEFAULT
   printcr("I don't understand that sentence.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB inventory SYNONYM i
 PROLOGUE
   if not(equal(o_actor, o_player)) then
     printcr("The inventory command works only for the player.")
     disagree()
   endif
   printcr("You are carrying:")
   indent(2)

 EPILOGUE
   indent(-2)

 DEFAULT
   printcr("Nothing, you are empty-handed.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB is
 SCOPE all_locs

 "where is [o_subject]"
   DISAMBIGUATION_RULES
     if testflag(o_subject.f_seenbefore)then score(5)
   END_RULES
   
   if cansee(o_actor, o_subject) and not(equal(o_subject, o_nst)) then
     printcr("Right here!")
     disagree()
   endif

   if not(isobject(o_subject)) then
     if testflag(o_subject.f_seenbefore) then
       printcr("You've been to [the] [o_subject], so it is somewhere on the map /
                that you must have drawn.")
       disagree()
     else
       printcr("You haven't been there yet.")
       disagree()
     endif
   endif

   if testflag(o_subject.f_seenbefore) then
     if testflag(o_subject.f_alive) then
       printcr("[the] [o_subject] is a living creature. Could have gone /
                anywhere since your last encounter.")
     else
       print("[the] [o_subject] [o_subject.r_is] [o_subject.r_preposition] [the]")
       print(owner(o_subject))
       printcr(".")
   else
     printcr("I have no knowledge of that.")

 DEFAULT
   printcr("I didn't understand that sentence.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("An examples of the syntax I understand is:")
     printcr("  'where is the ball'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB jump
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "jump"
   printcr("Wheee.")

 "jump [dir]"
   if try(l_location, 0, 0, "go [dir]") then endif

 DEFAULT
   printcr("I only understood you as far as willing to jump.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB kick
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "kick"
   printcr("What do you want to kick?")
   getsubject()

 "kick [o_subject]"
   printcr("Violence is not the answer.")

 DEFAULT
   printcr("I only understood you as far as wanting to kick something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB kill
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "kill"
   if equal(o_actor, o_player) then
     printcr("What do you want to kill?")
   else
     printcr("What do you want [the] [o_actor] to kill?")
   endif
   getsubject()

 "kill [o_subject]",
 "kill [o_subject] with [o_spec]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_alive) then score(5)
   END_RULES

   if not(testflag(o_subject.f_alive)) then
     printcr("[the] [o_subject] is not alive.")
     disagree()
   endif

   if not(equal(o_actor, o_player)) then
     print("[the] [o_subject] looks at you and says: ")
     if equal(o_actor, o_subject) then
       printcr("'Are you asking me to commit suicide? I don't think so...'")
     else
       printcr("'Killing [the] [o_subject] is not the answer'.")
   else
     printcr("Killing [the] [o_subject] is not the answer.")

 DEFAULT
   printcr("I only understood you as far as willing to kill something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB knock
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "knock"
   printcr("On what?")
   getsubject()

 "knock [o_subject]",
 "knock on [o_subject]"
   printcr("There's no answer.")

 DEFAULT
   printcr("I only understood you as far as wanting to knock.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB listen
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "listen"
   printcr("There's only the usual environment sounds.")

 "listen to [o_subject]"
   printcr("There's no sound from [the] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as wanting to listen.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB lock
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(testflag(o_subject.f_lockable)) then
       printcr("[the] [o_subject] is not something that can be locked.")
       disagree()
     else
       if testflag(o_subject.f_locked) then
         printcr("But [the] [o_subject] is already locked.")
         disagree()
     endif

 "lock"
   if equal(o_actor, o_player) then
     printcr("What do you want to lock?")
   else
     printcr("What do you want [the] [o_actor] to lock?")
   endif
   getsubject()

 "lock [o_subject]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_lockable) then
      if not(testflag(o_subject.f_locked)) then
        score(10)
      else
        score(5)
   END_RULES

   if owns(o_actor, o_subject.r_key) or owns(o_subject, o_subject.r_key, 0) then
     if testflag(o_subject.f_open) then
       printcr("(closing [the] [o_subject] first).")
       if not(try(l_location, 0, 1, "close [o_subject]")) then
         disagree()
       endif
     endif
     printcr("(with [the] [o_subject.r_key]).")
     setflag(o_subject.f_locked)
     printcr("[the] [o_subject] is now locked.")
   else
     printcr("[the] [o_actor] [o_actor.r_do] not seem to have the right key.")

 "lock [o_subject] with [o_spec]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_lockable) then
      if not(testflag(o_subject.f_locked)) then
        score(10)
      else
        score(5)
   END_RULES

   if not(owns(o_actor, o_spec)) then
     printcr("(taking [the] [o_spec] first).")
     if not(try(l_location, 0, 1, "take [o_spec]")) then
       disagree()
     endif
   endif
   if equal(o_spec, o_subject.r_key) then
     setflag(o_subject.f_locked)
     printcr("[the] [o_subject] is now locked.")
   else
     printcr("Apparently, [the] [o_spec] is not the key for [the] [o_subject].")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB look SYNONYM l
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
  if not(islit(o_player)) then
    printcr("It is pitch black.")
    disagree()
  endif

 "look"
   if not(equal(owner(o_player), l_location)) then
     # the player is in some other object
     print("([o_player.r_preposition] [the] ")
     print(owner(o_player))
     printcr(").")
   endif
   clearflag(owner(o_player).f_seenbefore)
   entrance(owner(o_player))

 "look at [o_subject]"
   if try(l_location, 0, 0, "examine [o_subject]") then endif

 "look [prepos] [o_subject]"
   printcr("There is nothing special [prepos] [the] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as willing to look.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB move
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if testflag(o_subject.f_fixed) then
       printcr("[the] [o_subject] [o_subject.r_is] fixed in place.")
       disagree()

 "move"
   if equal(o_actor, o_player) then
     printcr("What do you want to move?")
   else
     printcr("What do you want [the] [o_actor] to move?")
   endif
   getsubject()

 "move [o_subject]"
   DISAMBIGUATION_RULES
     if not(testflag(o_subject.f_fixed)) then score(5) endif
   END_RULES

   printcr("In which direction do you want to move [the] [o_subject]?")
   getspec()

 "move [o_subject] to [dir]",
 "move [o_subject] [dir]"
   DISAMBIGUATION_RULES
     if not(testflag(o_subject.f_fixed)) then score(5) END_RULES

   print("That doesn't make sense, moving [the] [o_subject] [dir].")

 "move [o_subject] [prepos] [o_spec]"
   DISAMBIGUATION_RULES
     if not(testflag(o_subject.f_fixed)) then score(5) endif
   END_RULES

   printcr("Trying to move [the] [o_subject] [prepos] [the] [o_spec] accomplishes nothing.")

 DEFAULT
  printcr("I only understood you as far as willing to move something.")
  if testflag(o_player.f_verb_help) then
    printcr("")
    Printcr("Examples of syntaxes I understand are:")
    printcr("  'move'")
    printcr("  'move the crate'")
    printcr("  'move the crate north'")
    printcr("  'move the crate to the north'")
    printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB open
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(testflag(o_subject.f_openable)) then
       printcr("[the] [o_subject] is not something that can be opened.")
       disagree()

 "open"
   if equal(o_actor, o_player) then
     printcr("What do you want to open?")
   else
     printcr("What do you want [the] [o_actor] to open?")
   endif
   getsubject()

 "open [o_subject]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_openable) then
      if not(testflag(o_subject.f_locked)) then
        if not(testflag(o_subject.f_open)) then
          score(15)
        else
          score(10)
      else
        score(5)
   END_RULES

   # test for locked/open moved out of prologue for "open subject with key"
   if testflag(o_subject.f_locked) then
     printcr("[the] [o_subject] seems to be locked.")
     disagree()
   endif
   if testflag(o_subject.f_open) then
     printcr("But [the] [o_subject] is already open.")
     disagree()
   endif

   setflag(o_subject.f_open)
   clearflag(o_subject.f_opaque)

   o_player.r_nr_to_reveal = count(o_subject, o_subject.f_any, 1)
   if equal(o_player.r_nr_to_reveal, 0) then
     printcr("[the] [o_subject] is now open.")
     disagree()
   endif
   setflag(o_player.f_first)
   print("Opening [the] [o_subject] reveals ")
   synchronize(o_subject, o_subject.t_reveal, o_subject.f_any, 1)
   if equal(o_player.r_nr_to_reveal, 0) and testflag(o_player.f_first) then
     # all invisible to the player, nobody printed something
     printcr("nothing, it's empty.")
   endif
   agree()  # otherwise returns number of objects from sync

 DEFAULT
   printcr("I only understood you as far as willing to open something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB poke
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "poke [o_subject]",
 "poke in [o_subject]"
   print("[the] [o_actor] poke")
   if not(equal(o_actor, o_player)) then
     print("s")
   endif
   printcr(" [the] [o_subject], but nothing happens.")

 DEFAULT
   printcr("I only understood you as far as wanting to poke something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB put
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
  if equal(o_subject, %none) then
    agree()
  endif

 EPILOGUE
   # check if they put the light source out of sight
   if not(islit(o_player)) then
     printcr("It is now pitch black.")

 "put"
   if equal(o_actor, o_player) then
     printcr("What do you want to put?")
   else
     printcr("What do you want [the] [o_actor] to put?")
   endif
   getsubject()

 "put [o_subject]"
   DISAMBIGUATION_RULES
    if owns(o_actor, o_subject) then score(10) endif
    if testflag(o_subject.f_takeable) then score(5) endif  # make o_nst loose
   END_RULES

   printcr("Where do you want to put [the] [o_subject]?")
   getspec()

 "put [o_subject] [prepos] [o_spec]"
   DISAMBIGUATION_RULES
    if owns(o_actor, o_subject) then score(5) endif
    if testflag(o_subject.f_takeable) then score(10) endif  # make o_nst loose
    if not(owns(o_actor, o_spec)) then score(5) endif
    if equal(o_spec, o_nst) then score(-5) endif
    if testflag(o_spec.f_container) and equal(%prepos, in) then score(5) endif
    if testflag(o_spec.f_supporter) and equal(%prepos, on) then score(5) endif
   END_RULES

   if owns(o_spec, o_subject, %prepos) then
     printcr("[the] [o_subject] is already [prepos] [the] [o_spec].")
     disagree()
   endif
   if not(owns(o_actor, o_subject)) then
     printcr("(taking [the] [o_subject] first).\n")
     if not(try(l_location, 0, 1, "get [o_subject]")) then
       disagree()
     endif
   endif
   if equal(%prepos, in) and testflag(o_spec.f_container) then
     if not(testflag(o_spec.f_open)) then
       printcr("(opening [the] [o_spec] first)>")
       if not(try(l_location, 0, 1, "open [o_spec]")) then
         disagree()
       endif
     endif
     clearflag(o_subject.f_bypass)
     move(o_subject, o_spec, in)
   else
     if equal(%prepos, on) and testflag(o_spec.f_supporter) then
       clearflag(o_subject.f_bypass)
       move(o_subject, o_spec, on)
     else
       printcr("[the] [o_subject] cannot be put [prepos] [the] [o_spec].")
       disagree()
     endif
   endif
   printcr("[the] [o_subject] is now [prepos] [the] [o_spec].")

 DEFAULT
   printcr("I only understood you as far as willing to put something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB quit SYNONYM q
 "[o_player], quit"
   print("Do you really want to quit? ")
   if yesno() then
     background(black)
     clearscreen()
     quit()

 DEFAULT
   printcr("If you want to quit the game, just type 'quit'.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB read
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

  "read"
    printcr("What do you want to read?")
    getsubject()

  "read [o_subject]"
    printcr("You tell me how to read [a] [o_subject]...")

 DEFAULT
   printcr("I only understood you as far as willing to read something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB remember
 SCOPE all_locs

 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "remember"
   if equal(o_actor, o_player) then
     printcr("What do you want to remember?")
   else
     printcr("What do you want [the] [o_actor] to remember?")
   endif
   getsubject()

 "remember [o_subject]"
   if testflag(o_subject.f_seenbefore) then
     printcr(o_subject.d_remember)
   else
     if equal(o_actor, o_player) then
       printcr("You have no recollection of [a] [o_subject].")
     else
       printcr("[the] [o_actor] has no recollection of [a] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as wanting to remember something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB restart
 "restart"
   printcr("Are you sure you want to restart the game (y//n)?")
   if yesno() then
     restart()

 DEFAULT
   printcr("To restart the game from the beginning, enter \"restart\".")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB restore
 EPILOGUE
  notimers()

 "[o_player], restore"
   printcr("Restoring progress...")
   restore()
   printcr("Done.")

   # timers are not called after a restore

   # update the status window
   if trigger(o_status_window.t_update) then endif

   # ifi GUI update will be done after loaddata from front-end

 DEFAULT
   printcr("If you want to restore the progress you saved earlier, type 'restore'.")

   # return disagree, in case they came here thru runverb()
   disagree()
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB save
 EPILOGUE
  notimers()

 "[o_player], save"
   if not(testflag(o_player.f_may_save)) then
     printcr("Saving the game is not allowed now.")
   else
     printcr("Saving progress...")
     save()
     printcr("Done.")

 DEFAULT
   printcr("If you want to save your progress, type 'save'.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB say
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 DEFAULT
   printcr("You can talk to someone using ask and tell:")
   printcr("Ask <someone> about <something>.")
   printcr("Tell <someone> about <something>.")
   printcr("<Someone>, tell me about <something>.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB score
 EPILOGUE
  notimers()

 "[o_player], score"
   printcr("Your current score is [o_player.r_score] out of a /
            total of [o_player.r_max_score] points.")

 DEFAULT
   printcr("To get your current score, just type 'score'.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB sing
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 DEFAULT
   printcr("[the] [o_actor] [o_actor.r_is] not in the mood for singing.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB sit
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "sit"
   printcr("[the] [o_actor] just spent one move doing nothing.")

 "sit [prepos] [o_subject]"
   if testflag(o_subject.f_container) then
     printcr("That won't help.")
   else
     printcr("[the] [o_actor] cannot sit [prepos] [the] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as wanting to sit")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB smell
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "smell"
   printcr("You smell nothing special.")

 "smell [o_subject]"
   printcr("Smells just like [a] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as wanting to smell.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB tell
 SCOPE all_locs

 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if equal(o_subject, %none) then
     agree()
   endif
   if not(cansee(o_player, o_actor)) then
     printcr("[the] [o_actor] is not here.")
     disagree()
   endif
   if not(cansee(o_actor, o_subject)) then
     printcr("[the] [o_subject] is not here.")
     disagree()
   endif

 "[o_player], tell [o_subject] about [o_spec]"
   DISAMBIGUATION_RULES
     if equal(o_subject, o_nst) then score(-10) endif
     if equal(o_spec, o_nst) then score(-10) endif
     if testflag(o_spec.f_seenbefore) then score(5) endif
     if cansee(o_actor, o_spec) then score(5) endif
   END_RULES
   if not(cansee(o_player, o_subject)) then
     printcr("[the] [o_subject] is not here.")
     disagree()
   endif
   if equal(o_subject, o_actor) then
     printcr("Talking to yourself is a sign of pending mental collapse.")
     disagree()
   endif
   if not(cansee(o_actor, o_subject)) then
     printcr("[the] [o_subject] is not here.")
     disagree()
   endif
   if not(testflag(o_subject.f_alive)) then
     printcr("Not surprisingly, [the] [o_subject] does not respond.")
   else
     printcr("Thanks for sharing that.")

 "[o_actor], tell [o_subject] about [o_spec]"
   DISAMBIGUATION_RULES
     if equal(o_subject, o_nst) then score(-10) endif
     if equal(o_spec, o_nst) then score(-10) endif
     if testflag(o_spec.f_seenbefore) then score(5) endif
     if cansee(o_actor, o_spec) then score(5) endif
   END_RULES
   if not(cansee(o_player, o_actor)) then
     printcr("[the] [o_actor] is not here.")
     disagree()
   endif
   if equal(o_actor, o_subject) then
     printcr("That means I would be telling myself something I already know...")
   else
     if not(testflag(o_subject.f_alive)) then
       printcr("You don't really expect me to talk to [a] [o_subject], do you?")
     else
       printcr("Really, there's nothing to tell about [the] [o_spec].")
  
  DEFAULT
    printcr("I only understood you as far as wanting to tell something.")
    if testflag(o_player.f_verb_help) then
      printcr("")
      Printcr("Examples of the syntaxes I understand are:")
      printcr("  'tell Fred about the brass key'")
      printcr("  'Fred, tell me about the brass key'")
      printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB testmode
 # read input from a file
  "[o_player], testmode"
    testmode()

 DEFAULT
   printcr("To invoke test mode, enter 'testmode' from the prompt.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB thank SYNONYM thanks
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "thank",
 "thank [o_player]",   # thank you
 "thank [o_subject]"
   printcr("You're welcome.")

 DEFAULT
   printcr("I only understood you as far as willing to thank someone.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB throw
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(owns(o_actor, o_subject)) then
       printcr("[the] [o_actor] [o_actor.r_is] not holding [the] [o_subject].")
       disagree()
     endif
   endif

 "throw [o_subject]"
   printcr("Thrown.")
   move(o_subject, owner(owner(o_subject)))
  
 "throw [o_subject] [dir]",
 "throw [o_subject] to [dir]"
   if valdir(l_location, %dir) then
     move(o_subject, %dir)
       printcr("Thrown.")
     else
       print("[the] [o_subject] flies [dir] and then falls on the floor.")
       move(o_subject, owner(o_actor))

 "throw [o_subject] [prepos] [o_spec]"
   printcr("Throwing [the] [o_subject] [prepos] [the] [o_spec] won't accomplish anything.")
    
 DEFAULT
   printcr("I only understood you as far as wanting to throw something.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("Examples of syntaxes I understand are:")
     printcr("  'throw the ball'")
     printcr("  'throw the ball to the north'")
     printcr("  'throw the ball at//on//behind//under the desk'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB tie
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "tie"
   if equal(o_actor, o_player) then
     printcr("What do you want to tie?")
   else
     printcr("What do you want [the] [o_actor] to tie?")
   endif
   getsubject()

 "tie [o_subject]"
   if equal(o_actor, o_player) then
     printcr("Where do you want to tie [the] [o_subject] to?")
   else
     printcr("Where do you want [the] [o_actor] to tie [the] [o_subject] to?")
   endif
   getspec(to)

 "tie [o_subject] to [o_spec]"
   printcr("[o_actor] can't tie [the] [o_subject] to [the] [o_spec].")

 DEFAULT
   printcr("I only understood you as far as wanting to tie something.")
     if testflag(o_player.f_verb_help) then
       printcr("")
       Printcr("Examples of syntaxes I understand are:")
       printcr("  'tie'")
       printcr("  'tie the rope'")
       printcr("  'tie the rope to the hook'")
       printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB touch
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "touch"
   printcr("What do you want to touch?")
   getsubject()

 "touch [o_subject]"
   printcr("It feels just like [a] [o_subject].")

 DEFAULT
   printcr("Nothing happens.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB transcript
 EPILOGUE
  notimers()

 DEFAULT
  transcript()
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB turn SYNONYM rotate
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "turn"
   if equal(o_actor, o_player) then
     printcr("What do you want to turn?")
   else
     printcr("What do you want [the] [o_actor] to turn?")
   endif
   getsubject()

 "turn [o_subject]"
   if testflag(o_subject.f_fixed) then
     printcr("[the] [o_subject] is fixed in place.")
   else
     printcr("Turning [the] [o_subject] accomplishes nothing.")

 "turn [o_subject] [dir]",
 "turn [o_subject] to [dir]"
   if testflag(o_subject.f_fixed) then
     printcr("[the] [o_subject] is fixed in place.")
   else
     print("That doesn't make sense, turning [the] [o_subject] [dir].")

 "turn on [o_subject]",
 "turn [o_subject] on"
   printcr("[the] [o_subject] is not something that can be turned on.")

 "turn off [o_subject]",
 "turn [o_subject] off"
   printcr("[the] [o_subject] is not something that can be turned off.")

 DEFAULT
  printcr("I only understood you as far as wanting to turn something.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("Examples of syntaxes I understand are:")
     printcr("  'turn'")
     printcr("  'turn the arrow'")
     printcr("  'turn the arrow to the north'")
     printcr("  'turn on themachine'")
     printcr("  'turn the machine off'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB undo
 "undo"
   if not(testflag(o_player.f_may_undo)) then
     printcr("At this point, undo is not allowed.")
     disagree()
   else
     notimers()
     undo()
     #update the Glk status window
     if trigger(o_status_window.t_update) then endif

 DEFAULT
   printcr("To undo your last move, type \"undo\".")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB unlock
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(testflag(o_subject.f_lockable)) then
       printcr("[the] [o_subject] is not something that can be unlocked.")
       disagree()
     else
       if not(testflag(o_subject.f_locked)) then
         printcr("But [the] [o_subject] is already unlocked.")
         disagree()
     endif

 "unlock"
   if equal(o_actor, o_player) then
     printcr("What do you want to unlock?")
   else
     printcr("What do you want [the] [o_actor] to unlock?")
   endif
   getsubject()

 "unlock [o_subject]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_locked) then score(5) endif
   END_RULES

   if owns(o_actor, o_subject.r_key) or 
      (owns(o_subject, o_subject.r_key, 0) and cansee(o_actor, o_subject.r_key)) then
     printcr("(with [the] [o_subject.r_key]).")
     clearflag(o_subject.f_locked)
     printcr("[the] [o_subject] is now unlocked.")
   else
     printcr("[the] [o_actor] [o_actor.r_do] not seem to have the right key.")

 "unlock [o_subject] with [o_spec]"
   DISAMBIGUATION_RULES
    if testflag(o_subject.f_locked) then score(5) endif
    if testflag(o_spec.f_takeable) then score(5) endif
   END_RULES

   if not(owns(o_actor, o_spec)) then
     printcr("(taking [the] [o_spec] first).")
     if not(try(l_location, 0, 1, "take [o_spec]")) then
       disagree()
     endif
   endif
   if equal(o_spec, o_subject.r_key) then
     clearflag(o_subject.f_locked)
     printcr("[the] [o_subject] is now unlocked.")
   else
     printcr("Apparently, [the] [o_spec] is not the key for [the] [o_subject].")
     disagree()
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB untie
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 "untie"
   if equal(o_actor, o_player) then
     printcr("What do you want to untie?")
   else
     printcr("What do you want [the] [o_actor] to untie?")
   endif
   getsubject()

 "untie [o_subject]"
   printcr("[the] [o_actor] can't untie [the] [o_subject].")

 "untie [o_subject] from [o_spec]"
   printcr("[the] [o_actor] can't untie [the] [o_subject] from [the] [o_spec].")

 DEFAULT
   printcr("I only understood you as far as wanting to untie something.")
     if testflag(o_player.f_verb_help) then
       printcr("")
       Printcr("Examples of syntaxes I understand are:")
       printcr("  'untie'")
       printcr("  'untie the rope'")
       printcr("  'untie the rope from the hook'")
       printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB unuse
 "unuse [o_subject]"
   if owns(o_player,o_subject) then
     print("\n> drop [o_subject].\n")
     if try(l_location, 0, 0, "drop [o_subject]") then
       agree()
     endif
   endif

 DEFAULT
   agree() # do nothing
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB use
 "use [o_subject]"
   if testflag(o_subject.f_examined) and testflag(o_subject.f_takeable) then
     print("\n> get [o_subject].\n")
     if try(l_location, 0, 0, "get [o_subject]") then
       agree()
     endif
   else
     print("\n> examine [o_subject].\n")
     if try(l_location, 0, 0, "examine [o_subject]") then
       setflag(o_subject.f_examined)
       agree()
     endif

 "use [o_subject] with [o_spec]"
   if testflag(o_spec.f_alive) then
     if testflag(o_subject.f_alive) then
       print("\n> ask [o_spec] about [o_subject]\n")
       if try(l_location, 0, 0, "ask [o_spec] about [o_subject]") then
         agree()
       endif
     else
       print("\n> give [o_spec] to [o_subject]\n")
       if try(l_location, 0, 0, "give [o_spec] to [o_subject]") then
         agree()
       endif
     endif
     agree()
   endif
   if testflag(o_spec.f_locked) and testflag(o_subject.f_key) then
     print("\n> unlock [o_spec] with [o_subject]\n")
     if try(l_location, 0, 0, "unlock [o_spec] with [o_subject]") then
       agree()
     endif
   else
     if testflag(o_spec.f_container) then
       print("\n> put [o_subject] in [o_spec]\n")
       if try(l_location, 0, 0, "put [o_subject] in [o_spec]") then
         agree()
       endif
     else
       print("\n> put [o_subject] on [o_spec]\n")
       if try(l_location, 0, 0, "put [o_subject] on [o_spec]") then
         agree()
       endif
     endif
   endif
 DEFAULT
   printcr("You must be more specific about the action you want to perform.")
   agree() # do nothing
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB verbose SYNONYM v
 EPILOGUE
  notimers()

 "[o_player], verbose"
   if testflag(o_player.f_verbose) then
     clearflag(o_player.f_verbose)
   else
     setflag(o_player.f_verbose)

 DEFAULT
   printcr("I don't understand that sentence.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB wait SYNONYM z
 PROLOGUE
   if gt(%value, 10) then
     printcr("You don't need to wait for more than 10 moves in this game.")
     disagree()

 "wait"
   printcr("Time passes...")
   wait(1)

 "wait [value]"
   printcr("Time passes...")
   wait(%value)

 DEFAULT
   printcr("I only know how to wait for a number of moves.")
   if testflag(o_player.f_verb_help) then
     printcr("")
     Printcr("Examples of the syntax I understand is:")
     printcr("  'wait'")
     printcr("  'wait 5'")
     printcr("(to turn off these help messages, type 'help 1')")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB wear
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif
   if not(equal(o_subject, %none)) then
     if not(testflag(o_subject.f_wearable)) then
       printcr("[the] [o_subject] [o_subject.r_is] not something that can be worn.")
       disagree()
     else
       if testflag(o_subject.f_worn) then
         printcr("But [the] [o_actor] [o_actor.r_is] already wearing [the] [o_subject].")
         disagree()
     endif

 "wear"
    if equal(o_actor, o_player) then
      printcr("What do you want to wear?")
    else
      printcr("What do you want [the] [o_actor] to wear?")
    endif
    getsubject()

 "wear [o_subject]"
   DISAMBIGUATION_RULES
    if owns(o_actor, o_subject) AND not(equal(o_subject, o_nst)) then score(5) endif
    if testflag(o_subject.f_wearable) then
      if not(testflag(o_subject.f_worn)) then
        score(10)
      else
        score(5)
      endif
    endif
   END_RULES

   if not(owns(o_actor, o_subject)) then
     printcr("(picking up [the] [o_subject] first).")
     if not(try(l_location, 0, 1, "get [o_subject]")) then
       disagree()
     endif
   endif

   setflag(o_subject.f_worn)
   printcr("Ok, [the] [o_actor] [o_actor.r_is] now wearing [the] [o_subject].")

 DEFAULT
   printcr("I only understood you as far as willing to wear something.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB xyzzy
 DEFAULT
   printcr("This is not Colossal Cave adventure.")
ENDVERB
#---------------------------------------------------------

#---------------------------------------------------------
$VERB yell SYNONYM shout
 PROLOGUE
   if not(testflag(o_actor.f_alive)) then
     if trigger(o_actor.t_talk_to_dead) then
       disagree()
     endif
   endif

 DEFAULT
   printcr("Aaaargh.")
ENDVERB
#---------------------------------------------------------


######################
# DICTIONARY SECTION #
######################

$DIRECTIONS
north     SYNONYM n,
south     SYNONYM s,
east      SYNONYM e,
west      SYNONYM w,
northeast SYNONYM ne,
northwest SYNONYM nw,
southeast SYNONYM se,
southwest SYNONYM sw,
up        SYNONYM u,
down      SYNONYM d

$NOUNS
abbey, abdomen, abidance, ability, abode, abortion, absence, absorption, abstract, abuse, academy, accelerator, accent, acceptance, access, accession, accident, accomplishment, accord, account, accountant, accounting, accretion, accumulation, accusation, ace, achievement, acid, acknowledgment, acme, acquaintance, acquisition, act, action, activeness, activity, actor, actors, ad, adaptation, addiction, addition, address, adeptness, adhesive, administration, administrator, admiration, admission, admittance, admonition, adolescent, adoption, adroitness, adult, advance, advancement, advantage, adventure, adversary, adversity, advertisement, advertising, advice, adviser, advisor, advocate, aeroplane, affair, affaire, affection, affiliation, affinity, affirmation, afternoon, age, agency, agenda, agent, aggregation, aggression, agitation, agony, agreement, agriculture, aid, aim, air, aircraft, airline, airplane, airport, aisle, alarm, album, albumen, alcohol, alcove, alibi, alien, alignment, alimony, all, allegiance, alleviation, alliance, allocation, allotment, allowance, ally, aloofness, altar, alteration, alternate, alternative, altitude, alum, aluminium, aluminum, alumna, alumnus, amateur, ambiance, ambience, ambiguity, ambition, ambitiousness, ambulance, amendment, ammunition, amnesty, amount, amphetamine, amusement, analog, analogue, analogy, analysis, analyst, ancestor, angel, anger, angle, animal, ankle, annex, anniversary, annotation, announcement, answer, ant, antagonism, antagonist, anticipation, anxiety, anxiousness, apartment, apathy, apex, apology, apoplexy, apparatus, apparel, appeal, appealingness, appearance, appendix, appetite, apple, appliance, applicant, application, appointment, appraisal, approval, approximation, aquarium, arachnid, arch, architect, architecture, archive, archives, archway, ardor, area, arena, argument, argumentation, arm, armchair, army, aroma, arrangement, arrow, art, article, artisan, artist, artwork, ash, aspect, aspiration, assault, assemblage, assembly, assertion, assessment, asset, assignment, assist, assistance, assistant, association, assumption, assurance, asterisk, asylum, athlete, athletics, atmosphere, atom, attachment, attack, attempt, attention, attic, attitude, attorney, attraction, attractiveness, attribute, Au, auction, audience, auditor, augury, aunt, auntie, aurora, author, authorities, authority, auto, autobus, automaton, automobile, automobilist, autonomy, autumn, avenue, average, aviation, award, axis, axle, babe, baby, back, backdown, background, backlog, bacon, bag, bail, bait, balance, balcony, ball, ballet, balloon, ballot, balloting, balm, bam, ban, banana, band, bandage, banding, bang, bank, banknote, bankruptcy, banner, banquet, bar, barbell, bargain, bark, baron, barrel, barrier, barroom, barter, base, baseball, basement, basin, basis, basket, basketball, bat, bath, bathroom, bathtub, battery, battle, battlefield, battlefront, battleground, bay, beach, bead, beak, beam, bean, bear, beard, bearing, beast, beat, bed, bedlam, bedroom, bee, beef, beer, beginning, behavior, beholder, beleaguering, belief, believability, bell, belly, belongings, beloved, belt, bench, bend, beneficiary, benefit, bereavement, berm, berry, besieging, bet, betrothal, beverage, bias, Bible, bicycle, biff, bike, bill, billet, billing, bin, biography, biology, bird, birdcall, birdsong, birth, birthday, biscuit, bishop, bit, bitch, bite, blackmail, blackness, blade, blank, blanket, blast, blessing, blighter, block, blood, bloodshed, blot, blow, blowup, blueness, board, boat, body, bodyguard, boiler, boldness, bolt, bomb, bomber, bond, bone, bonus, Book, boom, boot, booth, booty, border, borderline, bosom, boss, botany, bottle, bottom, boulevard, boundary, bounty, bovine, bow, bowel, bowl, box, boy, bracket, braid, brain, brainstorm, brake, branch, brand, brass, braveness, bravery, bread, breadstuff, breadth, break, breakdown, breakfast, breakthrough, breast, breeze, brewery, bribery, brick, bride, bridge, brightness, brilliance, brim, brink, broadcast, broadside, broccoli, brochure, brokenheartedness, bronze, brother, brow, brush, brushup, brute, bubble, buck, bucket, budget, buff, buffet, building, bulb, bull, bullet, bulletin, bum, bun, bunch, bundle, bungalow, bunk, burden, bureau, bureaucracy, burial, burn, bus, bush, business, businessman, businessperson, bustle, butt, butter, butterfly, buttocks, button, buzzer, cab, cabal, cabaret, cabin, cabinet, cable, cadaver, cafe, cage, cake, calamity, calculation, calendar, calf, call, calling, calorie, camera, camp, campaign, campaigner, can, canal, cancer, candidate, candle, cane, canvas, canvass, cap, capacity, capital, capitalism, caprice, captain, caption, captive, car, carbon, card, care, career, carnival, carpet, carpeting, carpus, carriage, carrot, cart, carte, cartel, cartoon, cascade, case, cash, cask, casket, cassette, cast, castle, casualty, cat, catalog, catalogue, catastrophe, catch, catchword, category, cathedral, cattle, causa, cause, caution, cave, cavity, ceiling, celebration, celebrity, cell, cellar, cellulose, cemetery, censorship, census, cent, center, century, cereal, cerebration, ceremony, certificate, cervix, chaff, chain, chair, chairman, chairwoman, chalk, challenge, champ, champagne, champion, championship, chance, change, chandeliers, changeover, channel, chaos, chapter, character, characteristic, charge, charity, charm, chart, charter, chauvinist, check, cheek, cheese, chemical, chemistry, cheque, cherry, chessman, chest, chicken, chief, child, childhood, chimney, chimpanzee, chin, chip, chocolate, choice, choir, chopper, chord, chore, chorus, chronicle, chronograph, chunk, church, chute, cigarette, cinema, circle, circular, circulation, circumstance, citation, citizen, city, civilian, civilisation, civilization, claim, clamp, clan, clap, clash, class, classroom, clay, clayware, clearance, cleft, clemency, clergyman, clerk, client, cliff, climate, clime, clinic, clipping, clique, cloak, cloakroom, clock, clod, close, closet, closing, cloth, clothes, clothing, cloud, clown, club, clue, clump, cluster, coach, coal, coalescence, coalition, coast, coat, coating, code, coeval, coevals, coffee, coffin, cognition, coin, coincidence, cold, coldness, collaboration, collapse, collar, collation, colleague, collection, college, colon, colony, color, column, coma, combat, combination, combine, comedy, comet, comfort, comfortableness, command, commander, commemoration, commencement, comment, commerce, commercialism, commission, commitment, committee, commodity, common, commons, commotion, communication, communist, community, compact, companionship, company, comparison, compartment, compass, compassion, compatibility, compeer, compensation, competence, competency, competition, complainant, compliance, complication, component, comportment, composer, composition, compound, compromise, comptroller, computation, computer, computing, comrade, concealment, concentration, concept, conception, conceptus, concern, concert, concession, conclusion, concord, concrete, condition, conduct, conductor, confederacy, confederation, conference, confession, confidence, confirmation, conflict, conformity, confrontation, confusion, conglomerate, conglutination, congratulations, congress, congressman, conjecture, connectedness, connection, conniption, conscience, consciousness, conscription, consensus, consequence, conservation, consideration, consolation, conspiracy, constellation, consternation, constituency, constituent, constitution, constraint, construct, construction, consultant, consultation, consumer, consumption, contact, contagion, container, contamination, contemporaries, contemporary, contempt, content, contention, contentment, contest, context, continent, continuation, contract, contraction, contradiction, contraption, contrary, contrast, contribution, control, controller, convalescence, convenience, convention, conversation, conversion, conveyance, conviction, convulsion, cook, cookie, coop, cooperation, cop, copper, copy, copyright, cord, corduroy, core, corn, corner, corpse, correction, correlation, correspondence, corridor, corruption, cosmetics, cosmos, cost, costume, coterie, cottage, cotton, couch, council, counsel, counter, counterspy, country, countryside, coup, couple, coupon, courage, course, court, courtesy, courting, courtship, courtyard, cousin, couturier, cover, coverage, cow, cows, crack, crackpot, craft, craftiness, craftsman, craftsmanship, crank, cranny, crash, craving, cream, crease, creation, credibility, credibleness, credit, credo, creed, crest, crevice, crew, crewman, cricket, crime, criminal, crimp, crisis, crisp, criterion, critic, criticism, critique, crook, crop, cross, crossing, crossover, crossroad, crosswalk, crowd, crown, cruelty, cruise, crusade, crutch, cry, crybaby, crystal, Cu, cube, cubicle, cucumber, cue, cuke, culture, cunning, cup, cupboard, cupful, curative, cure, curl, currency, current, curriculum, curtain, curve, cushion, cuss, custody, custom, customer, cut, cutis, cutlery, cutting, cyberspace, cycle, cylinder, dad, dada, daddy, dairy, damage, dance, danger, dark, darkness, darling, dash, date, daub, daughter, dawn, dawning, day, daybreak, daylight, daze, deadline, deal, dealer, dealership, dear, dearest, dearth, death, debate, debauchery, debt, decade, decay, decease, decennary, decennium, deck, declaration, decline, declivity, decomposition, decoration, decrease, decree, dedication, deduction, deed, deer, default, defeat, defect, defendant, deficiency, deficit, definition, deflection, defrayal, deftness, degree, deity, delay, delegate, delegation, deliberation, delight, delimitation, delivery, demand, demarcation, demo, democracy, demolition, demonstration, demonstrator, denial, denizen, denseness, density, dentist, departure, dependence, deportation, deposit, depression, deprivation, deputation, deputy, descent, desegregation, desert, deservingness, design, designer, desire, desk, despair, despite, dessert, destination, destiny, destruction, detachment, detail, detainment, detective, detector, detention, detonation, development, deviation, device, devotee, diadem, diagnosis, diagram, dial, dialect, dialog, dialogue, diameter, diamond, diary, dictionary, diet, dieting, difference, difficultness, difficulty, dig, dignity, digression, dilemma, diligence, dimension, diminution, dinner, diplomat, direction, directions, director, directory, dirt, disability, disablement, disadvantage, disaffirmation, disagreement, disappointment, disassociation, disaster, disc, discharge, discipline, disco, discord, discotheque, discount, discourse, discourtesy, discovery, discrimination, discussion, disdain, disease, disgrace, disguise, dish, dishonor, disinclination, disk, dismay, dismissal, disorder, disorderliness, display, disposition, disputation, dispute, disregard, disruption, dissension, dissent, dissertation, dissonance, distance, distortion, distributor, district, distrust, disturbance, ditch, diverseness, diversion, diversity, dividend, divinity, division, divorce, doc, doctor, doctrine, document, documentation, dog, doll, dollar, dolphin, dome, domicile, dominance, domination, dominion, donation, donor, door, doorbell, doorsill, doorstep, dope, dorm, dormitory, dose, dot, double, doubt, doubtfulness, dough, downfall, dozen, draft, dragon, drain, drainpipe, drama, dramatics, dramaturgy, drape, draught, draw, drawer, drawing, dream, dreaming, dress, dresser, dressing, drift, drill, drink, drinkable, drive, driver, driveway, drop, drug, drum, drunkenness, dubiety, dubiousness, duck, duet, duke, duo, dupery, duration, dusk, dust, duty, dweller, dwelling, eagle, ear, earnings, earth, earthquake, ease, easiness, east, echo, economics, economist, economy, ecstasy, edge, edict, edifice, edition, education, effect, effort, egg, eggs, eggshell, ego, egotism, elan, elbow, election, elector, electorate, electricity, electron, electronics, element, elephant, elevator, elite, embarrassment, embassy, emblem, embryo, emcee, emergency, emollient, emotion, emphasis, empire, employee, employer, employment, emptiness, encephalon, enchantress, encounter, encroachment, encumbrance, end, endeavor, ending, endurance, enemy, energy, engagement, engine, engineer, engineering, engraving, engrossment, enigma, enlargement, enmity, enrollment, enrolment, enterprise, entertainment, enthusiasm, enticement, entitlement, entombment, entrance, entranceway, entree, entry, entryway, envelope, environment, environmentalist, environs, episode, epoch, equal, equation, equilibrium, equipment, equivocalness, era, erosion, error, eruption, escapade, escape, escort, espousal, essay, essence, essential, establishment, estate, esteem, estimate, estimation, ethics, Europe, evaluation, eve, evening, event, everything, evidence, evolution, exam, examination, examiner, example, excavation, exception, excerpt, excerption, excess, exchange, excitation, excitement, exculpation, excuse, execution, executive, exemplar, exemption, exercise, exercising, exhibit, exhibition, exigency, exile, existence, exit, exits, exoneration, expanse, expansion, expatriation, expectancy, expectation, expedition, expenditure, experience, experiment, experimentation, expert, expertise, expertness, expiry, explanation, exploration, explosion, expo, exposition, exposure, expression, expressway, expulsion, extension, extent, exterior, extortion, extract, extraction, extraterrestrial, extreme, eye, eyebrow, eyeglasses, eyelid, fable, fabric, fabrication, facade, face, facet, facility, facsimile, fact, factor, factory, fad, faerie, faery, fag, failing, failure, fair, fairy, faith, fake, faker, fall, fame, familiarity, family, famine, fan, fancy, fantasy, fare, farewell, farm, farmer, farming, fashion, fastener, fat, fate, father, faucet, fault, favor, favorite, favour, favourite, fax, fear, fearfulness, feast, feather, feature, federation, fee, feedback, feel, feeling, feline, fellowship, felon, feminist, fen, fence, fenland, ferry, ferryboat, fertilization, fervency, fervidness, fervor, festival, festivity, fever, few, fib, fiber, fibre, fiction, field, fig, fight, fighting, figure, figuring, file, film, filter, final, finance, find, finger, finish, fire, firearm, firefighter, fireman, fireplace, firm, first, fish, fisher, fisherman, fissure, fist, fit, fitness, fix, fixture, flack, flag, flair, flak, flake, flame, flare, flash, flashbulb, flashlight, flat, flatware, flavor, flaw, fleck, fleet, flesh, flight, flock, flood, floor, flooring, flora, flour, flower, flowerpot, flu, fluctuation, flue, fluid, flurry, fly, foe, fog, fold, folder, foliage, folk, folklore, folks, fondness, font, food, fool, foot, football, footprint, footstep, footwear, foray, forbearance, force, forcefulness, forecast, forefinger, forehead, foreigner, foreman, forenoon, forest, forestry, forethought, foretoken, fork, form, format, formation, formatting, formula, forte, fortuity, fortune, forum, fossil, foundation, fountain, fox, foyer, fraction, fracture, fragment, frame, framework, franchise, frankfurter, fraud, fraudulence, freak, freckle, freedom, freeway, freeze, freight, freighter, frequence, frequency, freshman, friction, fridge, friend, friendship, fright, frog, front, frontage, frontal, frugality, fruit, fruitcake, frustration, ft, fuel, fumes, fun, function, functionary, functioning, fund, fundament, funeral, funfair, fungus, fur, furniture, furrow, fury, fuss, future, futurity, gadget, gaffe, gag, gain, gal, galaxy, gallery, gallon, game, gameboard, gap, garage, garbage, garden, garlic, garment, garret, gas, gash, gasoline, gate, gaze, gear, gem, gemstone, gender, gene, general, generation, genius, gentleman, geography, gesture, getup, ghost, ghostwriter, giant, gift, gild, girl, girlfriend, gizmo, glacier, glance, glass, glasses, glasshouse, glimpse, globe, gloom, gloominess, glory, glove, glow, glue, glumness, goal, goalie, goalkeeper, goaltender, goat, gob, god, gold, golf, goo, goober, good, goodness, gore, gossip, government, governor, gown, grace, grad, gradation, grade, gradient, graduate, grain, grammar, gramps, grandad, grandfather, grandma, grandmother, grant, graph, grapheme, graphics, grasp, grass, grate, grating, gratuity, grave, gravel, graveness, graveyard, gravitation, gravity, greenhouse, greenness, greens, greeting, grief, grievance, grimace, grin, grinder, grinning, grip, grocery, grooming, groove, ground, groundbreaker, grounds, growing, grownup, growth, grudge, guarantee, guard, guerrilla, guess, guest, guidance, guide, guidebook, guideline, guidepost, guild, guile, guilt, guiltiness, guitar, gun, gunk, gust, gustation, gut, gutter, guy, gyration, H2O, habit, habitant, habitat, habitation, hack, hacksaw, hair, haircut, hairdo, hairstyle, half, halfway, hall, hallway, halt, ham, hammer, hamper, hand, handbasket, handbill, handbook, handcart, handicap, handling, handwear, haphazardness, happenstance, harbor, hardship, hardware, harm, harmoniousness, harmony, harness, harvest, haste, hat, hay, hayfield, hazard, haze, head, headdress, headgear, heading, headline, headquarters, headroom, healer, health, heap, hearsay, heart, heartache, heartbeat, heartbreak, heat, heaven, hedge, heel, height, heir, helicopter, hell, helmet, help, helper, helping, hemisphere, hen, herb, herd, hereafter, heritor, hero, heroin, hesitancy, hesitation, hide, hideaway, hierarchy, highlight, highway, hike, hill, hindrance, hint, hip, historian, history, hitch, hoax, hobby, hog, hokum, hold, holding, holdup, hole, holiday, home, homecoming, homemaker, homo, honey, honor, honorableness, hook, hoop, hoops, hope, horizon, horn, horoscope, horror, horse, horseshoe, hosiery, hospital, hospitality, host, hostage, hostel, hostelry, hostility, hotdog, hotel, hour, house, household, housemaid, houseplant, housewife, housing, hovel, hr, hubby, hue, hulk, hullabaloo, human, humanity, humanness, humor, hunch, hunt, hunter, hunting, huntsman, hurry, hurt, husband, husbandry, husk, hustle, hut, hutch, hybrid, hypothesis, ice, icon, idea, ideal, identicalness, identification, identity, ideology, idiom, igniter, ignominy, ignorance, illness, illusion, illustration, image, imagination, immersion, immigrant, immigration, immunity, impact, impairment, imperativeness, impertinence, implement, implication, import, importance, importation, imposter, impression, improvement, improver, impudence, impulse, in, inadequacy, incentive, incertitude, inch, incident, inclination, incline, income, increase, increment, indemnity, index, indication, indicator, indigence, individual, individuality, inducement, industriousness, industry, inebriant, infant, infection, infirmary, inflation, influence, influenza, info, informant, information, infraction, infrastructure, infringement, ingestion, ingredient, ingroup, inhabitant, inheritor, inhibition, inhumation, initial, initiative, injection, injury, inn, innovation, innovator, inquest, inquiry, inscription, insect, inside, insider, insight, insistence, insistency, inspector, inspiration, instability, installation, installment, instance, instant, instinct, institution, instruction, instructor, instrument, instrumentalists, insufficiency, insult, insurance, insurgent, insurrection, insurrectionist, integration, integrity, intellect, intelligence, intensity, intent, intention, interaction, interest, interface, interference, interior, interment, intermission, Internet, interpreter, interrogation, interruption, intersection, intervention, interview, intestine, intimacy, intoxicant, intro, introduction, intrusion, intuition, inundation, invasion, invention, inventory, investigation, investigator, investment, invitation, invitee, inviter, involvement, ire, iron, irony, island, isolation, issue, it, item, iteration, itinerary, ivory, jacket, jam, jar, jaw, jazz, jeans, jelly, jest, jester, jet, jewel, jewelry, jiffy, job, jock, jockey, joint, joke, journal, journalist, journey, joy, joyfulness, joyousness, joystick, judge, judgement, judgment, judicature, judiciousness, juice, jump, junction, jungle, jurisdiction, jurisprudence, jurist, jury, justice, justification, justness, keep, kettle, key, keyhole, keypad, kick, kid, kidney, killer, kilocalorie, kin, kindness, kinfolk, king, kingdom, kinsfolk, kinship, kit, kitchen, kite, knee, knife, knight, knot, knowledge, Koran, kudos, lab, label, laboratory, laborer, labour, labyrinth, lace, lack, ladder, lady, lake, lamb, lamp, land, landholder, landlord, landowner, landscape, lane, language, lap, larceny, laser, laugh, laundry, laurels, lavatory, law, lawmaking, lawn, lawsuit, lawyer, layer, layout, layover, lb, lead, leader, leadership, leading, leaf, leafage, leaflet, leap, learner, learning, lease, leash, leather, leave, lecture, left, leftovers, leg, legend, legislating, legislation, legislature, leisure, lemon, length, lengthiness, leniency, lesion, lessening, lesson, letdown, letter, level, lever, lexicon, liability, liaison, liberty, library, licence, license, lick, lid, lie, life, lifestyle, lift, light, lighter, likeness, lily, limb, limit, limitation, line, lineage, lineation, linen, link, lion, lip, liquid, list, listeners, listing, literacy, literature, litigation, livelihood, liver, livestock, living, load, loan, lobby, location, lock, locomotive, locution, lodge, lodging, loft, log, logarithm, logic, look, looker, lookout, loop, loot, looting, lorry, loser, loss, lot, lottery, loudness, loudspeaker, lounge, love, lover, low, loyalty, lozenge, luck, luggage, lumber, luminance, luminosity, lump, lunch, luncheon, lung, lure, machine, machinery, machines, macrocosm, madness, maestro, magazine, magistrate, magnitude, maid, maidservant, mail, mailman, mainstream, maintenance, majority, make, makeup, malady, male, malefactor, malice, maliciousness, maltreatment, man, management, manager, maneuver, manner, manual, manufactory, manufacture, manufacturer, manus, manuscript, map, marathon, marble, march, margin, mark, market, marketer, marketing, marriage, Mars, marsh, marshland, marvel, Marxist, mask, mass, master, mastermind, mastery, match, mate, material, materials, math, mathematics, maths, matrimony, matrix, matter, maturation, maximum, mayor, maze, MD, meadow, meal, meaning, means, measure, meat, mechanism, medal, medallion, medicament, medication, medicine, medium, meeting, melody, member, membership, memo, memorandum, memorial, memory, menace, menage, mentality, menu, mercantilism, merchandise, merchandiser, merchant, mercifulness, mercilessness, mercy, merit, meritoriousness, merriment, mess, message, metal, method, methodology, metro, metropolis, microchip, microphone, middle, middleman, midnight, midpoint, might, migration, mike, mile, milk, mill, min, mind, mindset, mine, miner, mineral, mineworker, minimum, minister, ministry, minority, minute, miracle, mirror, miscarriage, misdemeanor, miserableness, misery, misgiving, mishap, misrepresenting, missile, missive, mist, mistake, mistrust, mitt, mix, mixture, model, modification, module, mold, mole, molecule, moment, momentum, monarch, monarchy, monastery, money, monk, monkey, monopoly, monster, month, monument, mood, moon, morale, morn, morning, moron, morsel, mortgage, mosaic, mosque, mosquito, mother, motif, motion, motivation, motivator, motive, motor, motorbike, motorcar, motorcycle, motorist, motortruck, motto, mould, mound, mount, mountain, mourning, mouse, mouth, move, movement, movie, muck, mud, mug, multimedia, mural, murder, muscle, museum, mushroom, music, musician, mutation, mystery, myth, Na, nail, name, narration, narrative, nation, nationalism, nationalist, nationality, nature, naught, nausea, navy, necessity, neck, necklace, necktie, need, neediness, needle, neglect, negligence, negotiation, neighbor, neighborhood, neighbour, neoplasm, nephew, nerve, nest, net, netherworld, network, newcomer, news, newspaper, newsperson, nicety, niche, night, nightclub, nightfall, nightmare, nightspot, nighttime, nobleman, node, noise, nomenclature, nomination, nominee, noncitizen, nonpayment, nonremittal, nonsense, nonstarter, norm, north, nose, notch, note, notebook, notice, notion, noun, novel, nowadays, nuance, nuisance, number, numeral, nun, nuptials, nurse, nursery, nut, nutcase, nutrient, oak, object, objection, objective, obligation, observation, observer, obstacle, occasion, Occident, occupant, occupation, ocean, oculus, odor, odour, oeuvre, offence, offender, offense, offensive, offer, offering, office, officer, official, offspring, oftenness, oil, ointment, olfaction, omission, onion, onslaught, opening, opera, operation, opinion, opponent, opportunity, opposite, opposition, optic, optimism, option, opus, orange, orangeness, orb, orbit, orbiter, orchestra, order, orderliness, organ, organisation, orgy, Orient, orientation, origin, ornament, ornamentation, outcome, outcry, outfit, outgo, outlaw, outlay, outlet, outline, outlook, output, outrage, outside, oven, overall, overhaul, overview, owl, owner, ownership, oxygen, pace, pachyderm, pack, package, packet, pact, page, pail, pain, painfulness, paint, painter, painting, pair, palace, palm, pamphlet, pan, panache, pandemonium, panel, panic, pants, paper, papers, parade, paradise, paradox, paragon, paragraph, parallel, parameter, parcel, pardon, parent, park, parking, parliament, parole, paroxysm, part, participant, particle, particular, parting, partner, partnership, party, pass, passage, passageway, passenger, passing, passion, passionateness, passport, password, past, paste, pastel, pastime, pastor, pasture, pastureland, patch, patent, path, patience, patient, patio, patriot, patriotism, patrol, patron, pattern, pause, pavement, paw, pay, payment, Pb, peace, peacefulness, peak, peanut, pearl, peasant, pectus, pedagogy, pedestal, pedestrian, pee, peel, peer, pelt, pen, penalty, penchant, pencil, penny, pension, pensioner, penury, people, pepper, perambulator, perceiver, percent, percentage, perception, perceptiveness, performance, performer, perfume, peril, period, periodical, permission, permit, person, personality, personnel, perspective, perspiration, pest, pesterer, pet, petition, petrol, phantasy, pharynx, phase, phenomenon, philosopher, philosophy, phone, photo, photoflash, photograph, photographer, photography, phrasing, phylogenesis, phylogeny, physician, physics, piano, picture, piddle, pie, piece, pier, pig, pigeon, pile, pill, pillage, pillar, pillow, pilot, pin, pinch, pioneer, pipe, piss, pit, pitch, pitfall, pitilessness, pity, place, placement, plaintiff, plait, plan, plane, planet, plank, planning, plant, plaster, plastic, plate, platform, play, player, playfulness, playpen, plaything, plaza, pleasure, plot, plumage, plume, plunder, plundering, plus, pneumonia, pocket, poem, poesy, poetry, point, pointer, poison, pole, police, policeman, policy, polish, politician, politics, poll, pollution, polyhedron, pony, pool, pop, populace, population, pork, porter, portion, portrait, portrayal, position, possession, possibility, post, postcard, postman, posture, pot, potable, potato, potential, potentiality, pottery, pound, powder, power, practice, pragmatism, praise, pram, prayer, preaching, precariousness, precaution, precedence, precedent, precis, preciseness, precision, preconception, precondition, predator, predecessor, prediction, predilection, predisposition, preference, preindication, prejudice, premise, premiss, premium, preoccupation, preparation, preparedness, preponderance, prescription, presence, present, presentation, preservation, preserve, presidency, president, presidentship, press, pressure, prestige, prestigiousness, pretender, prevalence, prevarication, preventive, prey, price, prickle, pride, primary, primate, prince, princess, principle, print, printer, priority, prison, prisoner, privacy, privateness, privilege, prize, probability, probe, problem, procedure, process, proclamation, produce, producer, product, production, prof, profession, professional, professor, professorship, proficiency, profile, profit, profits, progeny, prognosis, program, progress, prohibition, project, projectile, projection, proletariat, prolongation, promise, promotion, proof, propaganda, property, proponent, proportion, proportionality, proposal, proposition, proscription, prosecution, prospect, prosperity, protection, protein, protest, protester, provenance, province, provision, psyche, psychoanalysis, psychoanalyst, psychologist, psychology, pub, public, publication, publicity, publisher, pudding, puddle, pulp, pulsation, pulse, pump, pumpkin, punch, punishment, pupil, purport, purpose, pursuit, pushcart, putsch, puzzle, pyramid, python, quake, qualification, quality, quandary, quantity, quarrel, quarter, quartz, queen, query, quest, question, questionnaire, queue, quickness, quiet, quietness, quip, quota, quotation, quote, quotient, Quran, rabbit, race, racecourse, racetrack, raceway, racism, rack, radiation, radical, radio, radioactivity, radiocommunication, radiogram, rage, raid, railcar, railroad, rain, rainbow, rainfall, raise, rally, ranch, randomness, range, rank, rap, rape, rapture, rat, rate, ratio, rationality, ravishment, ray, reach, reaction, reactor, reader, readiness, realism, reality, realm, realness, rear, reason, rebel, rebellion, recap, recapitulation, receipt, reception, recess, recession, recipient, recitation, reckoning, recognition, recommendation, recompense, record, recording, recovery, recreation, rectification, rector, recuperation, redness, reduction, redundance, redundancy, referee, reference, referral, refinement, reflection, reflector, reflexion, reform, refrigerator, refuge, refugee, refurbishment, refusal, refuse, regaining, regard, regime, region, register, registration, registry, regret, regulation, rehabilitation, rehearsal, reign, rejection, relation, relationship, relative, relaxation, release, relevance, relevancy, reliance, relief, religion, relocation, reluctance, remainder, remains, remark, remedy, remembrance, remuneration, renovation, renown, rent, renter, repast, repeat, repetition, replacement, replica, replication, reply, report, reportage, reporter, reporting, repose, repositing, representation, representative, reproduction, reptile, reptilian, republic, repugnance, repulsion, reputation, request, requirement, requisite, research, researcher, reservation, reserve, reservoir, residence, resident, residual, residue, resignation, resistance, resolution, resort, resource, respect, respite, response, responsibility, rest, restaurant, restitution, restoration, restraint, restriction, result, resultant, resume, resurgence, retailer, retaliation, reticence, retiree, retirement, retraction, retreat, retrieval, return, revenge, reverberation, reversal, reverse, reversion, review, reviewer, revitalization, revival, revolt, revolution, revulsion, reward, rhetoric, rhythm, rib, ribbon, rice, riches, ride, rider, ridge, rifle, right, rightfulness, rim, ring, ringlet, riot, rise, rising, risk, rite, ritual, rivalry, river, road, robbery, robot, rock, rocket, rod, rodent, role, roll, roof, room, rooms, root, rope, rose, roster, rotation, rotting, round, route, routine, row, royalty, rubbish, rue, ruefulness, rug, rugby, ruin, ruination, rule, ruler, rumor, rung, runner, rush, rushing, ruthlessness, sacrifice, safari, safe, safety, sail, sailor, salad, salary, sale, salesclerk, salesperson, salmon, salon, saloon, salt, salutation, salvation, sample, sanctuary, sand, sandal, sandwich, sarcasm, satellite, satire, satisfaction, saturnalia, sauce, sausage, savor, saw, sawdust, saying, scab, scale, scandal, scar, scenario, scene, scenery, scent, schedule, scheme, schism, scholar, scholarship, school, schoolbook, schoolchild, schoolhouse, schoolroom, science, scientist, scope, score, scorn, scrap, scrape, scratch, screen, screw, script, scruples, sculpture, scuttlebutt, sea, seacoast, seal, seaport, search, seashore, season, seat, sec, seclusion, second, secrecy, secret, secretary, secretion, secretiveness, section, sector, security, sediment, seed, seeking, segment, seism, selection, self, seller, seminar, senior, sensation, sense, sensitiveness, sensitivity, sensor, sentence, sentience, sentiency, sentiment, sentinel, sentry, separation, sequence, serenity, serial, series, sermon, serpent, servant, server, service, serving, session, set, setback, setting, settlement, setup, sewing, sex, sexuality, shack, shackle, shade, shadow, shaft, shame, shape, shard, share, shareholder, shares, shark, sheaf, shed, sheep, sheet, shelf, shell, shelter, shield, shift, shipping, shirt, shock, shoe, shooting, shop, shopping, shore, short, shortage, shortfall, shorts, shot, shoulder, show, showcase, shower, showing, shrub, shuck, sibling, sickness, side, sidewalk, siege, sieve, sight, sign, signal, signature, signboard, significance, signification, signified, silence, silk, silver, silverware, similarity, simpleness, simplicity, simulation, sin, singer, sink, sinning, sis, sister, site, situation, size, skeleton, sketch, ski, skill, skin, skip, skipper, skirt, skull, sky, skyline, slab, slant, slash, slave, slayer, slaying, sleep, sleeve, slice, slide, slime, slip, slob, slogan, slope, slot, sloven, sludge, slug, slumber, slump, slyness, smack, smear, smell, smile, smiling, smoke, smudge, snack, snail, snake, snare, snow, snowfall, snub, soap, soberness, sobriety, soccer, society, sociology, sock, soda, sodium, sofa, software, soil, solace, soldier, solicitation, solidarity, solo, solution, somberness, song, soprano, sorceress, sorrow, soul, sound, soup, source, south, sovereign, space, span, speaker, specialist, specialty, species, specimen, spectacles, spectator, spectators, spectrum, speculation, speech, speed, spell, sphere, spice, spider, spigot, spinach, spine, spirit, spiritualist, spirt, spite, spitefulness, splinter, split, spoken, spokesman, spokesperson, spoon, sport, spot, spouse, spray, spread, spring, springtime, sprite, spurt, spy, squad, square, squirt, stable, stadium, staff, stage, stair, staircase, stairs, stairway, stake, stakes, stalk, stall, stalls, stamp, stance, stand, standard, standoff, standpoint, star, start, state, statement, station, statistics, statue, status, stave, steak, stealing, steam, steel, stem, step, steps, steward, stick, stillbirth, stimulation, sting, stipulation, stir, stitch, stock, stockholder, stocking, stockpile, stomach, stone, stool, stop, stopover, storage, store, storey, storm, story, stove, strain, strap, stratum, straw, strawberry, stream, streamer, street, streetcar, strength, stress, stride, strike, strikebreaker, string, strip, stripe, stroke, stroller, structure, struggle, student, studio, study, stuff, stupor, style, subject, submission, subscriber, substance, substitute, subtlety, suburb, suburbia, subway, success, suffering, suffrage, sugar, suggestion, suicide, suit, suitcase, suite, sulfur, sulphur, sum, summary, summation, summer, summertime, summit, summons, sun, sunburn, Sunday, sunlight, sunrise, sunshine, suntan, super, superfluousness, superintendent, supermarket, superpower, supervisor, supper, supplication, supply, supplying, support, supporter, suppression, surface, surgeon, surgery, surmise, surplus, surprise, surrender, surrogate, surroundings, survey, survival, survivor, suspect, suspension, suspicion, swap, sweat, sweater, sweet, sweetener, swine, swing, switch, swop, sword, syllable, symbol, symmetry, sympathy, symptom, syndrome, system, tab, table, tablet, tactic, tactics, tail, takeover, talk, talker, talking, talks, tan, tang, tank, tantrum, tap, tape, taper, target, tariff, task, taste, tautness, tavern, tax, taxation, taxi, taxicab, taxpayer, tea, teacher, teaching, team, tear, teardrop, technique, technologist, technology, teenager, telephone, television, temper, temperament, temperature, temple, tempo, temptation, tenant, tendency, tending, tennis, tenseness, tension, tent, term, terminal, terminology, terms, terrace, territory, terror, terrorist, test, testament, testimonial, tether, text, textbook, textile, texture, thanks, theater, theatre, theft, theme, theology, theoretician, theorist, theorizer, theory, therapist, therapy, thesis, thievery, thigh, thinker, thinking, thorax, thorn, thought, thoughtfulness, thread, threat, threshold, thriftiness, thriftlessness, throat, throne, thumb, thunderbolt, tick, ticket, tide, tidings, tie, tier, tiger, tile, tilt, timber, timberland, time, timepiece, timetable, tin, tip, tire, tissue, tit, title, toad, toast, toaster, toe, toil, toilet, token, toll, tomato, tomb, ton, tonality, tone, tongue, tool, tooth, top, topic, torch, torment, torso, torture, torturing, touch, touchstone, tourism, tourist, tournament, tourney, towel, tower, town, toy, trace, track, tract, traction, trade, trader, tradition, traffic, tragedy, trail, trailblazer, train, trainer, training, trait, tram, trance, transaction, transfer, transferral, transgression, transition, transmission, transport, transportation, trap, trapdoor, trash, trauma, tray, treasure, treasurer, treat, treatment, treaty, tree, trench, trend, tress, trial, triangle, tribe, tribulation, tribunal, tribute, trick, trilateral, triumph, trolley, troop, trophy, trouble, trough, troupe, trouser, truck, trueness, trunk, trust, trustee, truth, tryout, tub, tube, tum, tummy, tumor, tumour, tune, tunnel, turkey, turmoil, turn, turnabout, turnaround, tush, tusk, tutor, twelve, twelvemonth, twilight, twin, twine, twist, twosome, tycoon, tympan, ulcer, umbrella, uncertainness, uncertainty, uncle, uncomplicatedness, underground, underside, understanding, undersurface, undertaking, unemployment, uniform, union, unit, unity, universe, university, unrest, unwellness, upgrade, upheaval, upkeep, upper, uprising, upside, upstairs, urge, urgency, urine, usage, use, user, utterer, vacancy, vacation, vacillation, vacuum, vale, valley, value, van, vanguard, variable, variant, variation, variety, vat, vault, vector, vegetable, vegetarian, vegetation, veggie, vehicle, veil, vein, velocity, velvet, vender, vendor, venom, venture, Venus, verb, verdict, verge, verification, verity, verse, version, vertex, vessel, vestibule, veteran, vicinity, victim, victor, victory, video, view, viewer, viewing, viewpoint, vigor, villa, village, villager, violation, violence, virgin, viridity, virtue, virtuoso, virus, vision, visit, visitor, vitamin, vitrine, vocalist, vocation, voice, void, volcano, volition, volume, volunteer, vote, voter, voting, voucher, voyage, wage, wager, wagon, waist, waistline, waiter, waiver, wake, walker, wall, want, war, ward, wardrobe, ware, warehousing, warfare, warning, warrant, warrantee, warrior, wash, washables, washbasin, washbowl, washstand, waste, wastefulness, watch, watcher, watchman, watchword, water, watercourse, watercraft, waterfall, wave, wavering, way, weakness, wealth, weapon, weather, web, website, wedding, wedlock, weed, week, weekend, weight, welcome, welfare, well, wellbeing, wellness, west, whale, wheat, wheel, whim, whip, whiskey, wholeness, whorl, widow, width, wife, wild, wilderness, wildlife, wiliness, will, willpower, wimp, win, wind, window, wine, wing, winner, winnings, winter, wintertime, wipeout, wire, wireless, wiretap, wisecrack, wish, witch, withdrawal, witness, wolf, woman, wonder, wood, woodland, wooing, wool, word, wording, words, work, workbench, worker, workmanship, workplace, workshop, world, worm, worry, worth, wound, wrangle, wreck, wrench, wretchedness, wrinkle, wrist, writer, written, wrongdoer, wurst, yacht, yard, year, years, yell, yesteryear, yield, you SYNONYM me SYNONYM i, young, youth, yr, zephyr, zero, zone


$ADJECTIVES
abject, able, abnormal, absent, absolute, abstract, abundant, academic, acceptable, accepting, accessible, accurate, achromatic, acrimonious, active, actual, acute, addicted, adequate, aesthetic, afraid, aggressive, agile, agricultural, alert, alien, alike, alive, alone, aloof, amatory, amber, ambiguous, ambitious, amorous, ample, amusing, angry, annual, anonymous, antsy, appealing, applied, appropriate, approval, approving, arbitrary, archaeological, arrogant, articulate, artificial, artistic, ashamed, asleep, assertive, astonishing, astounding, atomic, atrocious, attractive, automatic, auxiliary, available, awake, aware, awful, awkward, bad, balanced, bald, banal, barbarous, bare, basic, beautiful, belated, bendable, beneficial, biased, big, bitter, black, bland, blank, blemished, blind, blonde, bloody, blue, blunt, bold, boring, brass, brave, bright, broken, brown, brutal, bureaucratic, busy, candid, capable, capacious, careful, carved, caucasian, cautious, central, certain, characteristic, charismatic, chatty, cheap, cheerful, chest, chief, childish, chronic, circular, civic, civilian, classical, clean, clear, clever, close, closed, closet, coarse, cold, colored, coloured, colorful, comfortable, comfy, commercial, common, commonplace, comparable, compatible, competent, competitive, complete, complex, complicated, complimentary, comprehensive, computer, concluding, concrete, confident, confirming, conscious, conservative, considerable, considerate, consistent, constant, constitutional, constrained, constricted, constricting, constructive, contemptible, content, contented, continental, continuous, controversial, convenient, conventional, cool, cooperative, corporate, correct, cosmetic, costless, cotton, counter, courageous, courteous, covetous, crappy, critical, crude, cruel, cultural, curious, current, cute, daily, dangerous, dark, dead, deadly, deaf, decayed, decent, decisive, decorative, deep, defective, definite, delicate, delicious, delightful, democratic, dependable, dependent, depressed, descriptive, desirable, determining, dial, different, difficult, diffident, digital, diplomatic, diplomatical, direct, dirty, disagreeable, disconfirming, discreet, discrepant, discrete, dissimilar, distant, distinct, domestic, dominant, down, drain, dramatic, dreadful, dry, due, dull, dynamic, dynamical, eager, early, easy, economic, educational, effective, effectual, efficacious, efficient, elderly, electronic, elegant, eligible, eloquent, emotional, empiric, empirical, empty, encouraging, endmost, enjoyable, enthusiastic, envious, environmental, equal, equitable, equivalent, equivocal, escape, essential, established, eternal, ethical, ethnic, even, everlasting, evil, exact, excited, exciting, exclusive, existent, exotic, expected, expensive, experienced, experimental, explicit, express, expressed, external, extinct, extraordinary, fair, faithful, FALSE, familiar, far, fashionable, fast, fastidious, fat, fatigued, faulty, favorable, fearless, feasible, federal, feeling, feminine, fidgety, final, financial, fine, finicky, finished, firm, first, fiscal, fit, flat, flavorless, flawed, flexible, flush, foolhardy, foolish, foreign, formal, forthright, forward, foyer, fragile, fragrant, frail, frank, free, frequent, fresh, friendly, frozen, full, functional, funny, fussy, gabby, garrulous, gay, general, generative, generous, genetic, genetical, gentle, genuine, geological, giant, gifted, glad, glass, glittering, global, glorious, gluey, glutinous, gold, golden, good, gradual, grand, graphic, grateful, gratis, great, green, gregarious, grotesque, guiltless, gummy, halfway, handy, happy, hard, harmful, harsh, healthy, heavy, heinous, helpful, helpless, high, hilarious, historical, holy, honest, honorable, hooked, horizontal, hostile, hot, huge, human, hungry, ignorant, ill, illegal, illegitimate, illicit, immense, immoral, immune, impartial, imperfect, imperial, impermanent, impertinent, implicit, important, impossible, impressive, improbable, impudent, inactive, inadequate, inanimate, inappropriate, incapable, incapacitated, incessant, incompetent, incongruous, incredible, indecent, independent, indigenous, indirect, individual, indolent, indoor, industrial, inevitable, inexpensive, inexplicit, infamous, infantile, infinite, influential, informal, infrequent, initial, inner, innocent, inside, insipid, insolent, insufficient, integrated, intellectual, intense, interactive, interesting, intermediate, internal, international, invisible, irrelevant, itchy, jealous, joint, judicial, junior, juridic, juridical, just, kind, kitchen, knowledgeable, laic, large, last, lasting, late, latest, laughable, lay, lazy, lean, left, legal, legislative, lethal, level, liberal, lifelike, light, like, likeable, likely, limited, linear, liquid, literary, little, live, lively, living, logical, lone, lonely, long, loose, lost, loud, lousy, low, loyal, lucky, luxurious, magnetic, main, major, manual, marine, maritime, married, material, mathematical, mature, maximal, maximum, meaningful, mechanical, medieval, memorable, mental, metal, middle, mild, military, mindful, minimal, minimum, minor, miserable, mobile, moderate, modern, modest, molecular, monstrous, monthly, moral, motionless, moving, muggy, multiple, municipal, musical, mutual, naive, narrow, national, native, nautical, near, neat, necessary, negative, nervous, neural, neutral, new, newest, nice, nimble, noble, noisy, nonalcoholic, nonindulgent, nonsubjective, normal, northern, notorious, noxious, nuclear, obese, objective, obscene, obscure, obstinate, obtainable, obvious, occupational, ocular, odd, offensive, official, old, open, opera, operational, opposed, optic, optical, optimistic, optional, opulent, oral, orderly, ordinary, organic, original, ornamental, orthodox, other, otiose, outdoor, outer, outside, outstanding, overt, overweight, owed, painful, parallel, paralytic, paralyzed, parental, partial, particular, passion, passionate, passive, past, patient, peaceful, peculiar, perfect, permanent, perpendicular, perpetual, persistent, personal, petty, philosophical, physical, pictorial, plain, plausible, pleasant, plentiful, polite, political, poor, popular, portable, positive, possible, potent, potential, powerful, practicable, practical, precise, predictable, pregnant, premature, prepared, present, presidential, primary, primitive, principal, private, privileged, probable, produced, productive, professional, profound, progressive, prolonged, proper, proportional, protected, proud, provincial, prudent, public, pure, qualified, quantitative, quenched, quick, quiescent, quiet, racial, random, rare, rational, raw, ready, real, realistic, reasonable, reciprocal, reckless, red, refined, regional, regular, related, relative, relevant, reliable, religious, replete, representative, resentful, resident, residential, resistant, respectable, responsible, restless, restrained, restricted, retired, revolutionary, rich, right, rigid, ripe, romantic, rotted, rotten, rough, round, ruined, rural, rusty, sacred, sad, safe, salutary, same, sassy, satisfactory, satisfied, scientific, scrawled, scummy, seasonal, secondary, secular, secure, seeable, senior, sensible, sensitive, separate, serious, severe, sexual, shallow, sharp, sheer, shiny, shitty, short, shut, shy, sick, significant, silent, similar, simple, sincere, single, sinless, sizable, skilled, skillful, skittish, slaked, slippery, slippy, slothful, slow, small, smart, smooth, sober, sociable, social, socialist, socialistic, soft, soiled, solar, solid, solitary, sophisticated, sound, sour, southern, spacious, spatial, special, specified, spoiled, spoilt, spontaneous, spry, square, stable, staggering, standard, static, statistical, steadfast, steady, steamy, steep, sticky, still, straight, strange, strategic, strategical, strict, strong, structural, stubborn, stunning, stupid, stylish, suave, subjective, subsequent, subsidiary, successful, sudden, sufficient, suitable, sumptuous, superior, supplementary, sure, surprised, surprising, sweet, sympathetic, synergistic, systematic, talented, talkative, tall, tardy, tasteful, tasteless, tasty, taut, technical, temporary, tender, tense, terminal, terrible, text, thankful, thick, thin, thirsty, thoughtful, tidy, tight, timid, tiny, tired, tolerant, tough, toxic, traditional, transparent, trap, trivial, tropical, TRUE, typical, ugly, ultimate, unanimous, unattackable, unaware, unbelievable, unclean, uncomfortable, uncommon, undefined, uneasy, unemployed, unending, unenthusiastic, unequal, unequaled, unexpected, unfair, unfamiliar, unfortunate, unfriendly, uniform, uninterrupted, unique, universal, unknown, unlawful, unlike, unlikely, unmarried, unnatural, unopen, unparalleled, unpleasant, unprocessed, unreal, unrecorded, unrefined, unresponsive, unripe, unripened, unsafe, unseeable, unsighted, unsmooth, unsophisticated, untamed, unthawed, untimely, unusual, unvarying, unwavering, unwitting, upright, uproarious, urban, useful, useless, usual, utile, vacant, vague, vain, valid, valuable, varied, vast, vehemence, velvet, verbal, vertical, viable, vicious, vigorous, violent, virtuous, visible, visual, vivid, vocational, voluntary, vulnerable, warm, weak, weekly, welcome, well, wet, white, whole, wild, wise, womanly, wood, wooden, workable, worldwide, written, wrong, yearly, yellowish, young, youthful


$PREPOSITIONS
about, against, around, at, behind, below, clockwise, counterclockwise, for, from, in, into, of, off, on, out, over, 
through, to, under, with


$ADVERBS
here, slowly


$ARTICLES
a, an, the


$Q_WORDS
how, what, where, which, who, why


$CONJUNCTION
and
