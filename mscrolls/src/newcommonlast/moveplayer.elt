
************************************************************
*
*	%W%
*	%G%
*
************************************************************


	SECTION		"ADV",CODE
	include		"equates.i"
	include		"macros.i"
	include		"nounequ1.i"
	include		"scenequ.i"
	include		"nounequ2.i"
	include		"windows.i"


	XDEF	MovePlayer,MovePlayerQuiet
	XREF	ROOM,SEATED,SEATED_RELATOR,SCRPNT

MovePlayer

	CMP.W	ROOM(A4),D1		;into the same room?
	BEQ.S	01$			;yes, then no update screen.
	MOVE.W	#1,SCRPNT(A4)		;so screen knows
01$

MovePlayerQuiet

* Moves the player to the room in d1 with no questions
* usage: specials

    IFD		wantSP.MovePlayer
	XREF	SP.MovePlayer
	CALL	SP.MovePlayer
    ENDC	;wantSP.MovePlayer
	
	CLR.W	SEATED(A4)			;not sitting anymore
	CLR.W	SEATED_RELATOR(A4)		;no relation to object

    IFD	attribute_LIEONABLE
    IFD wantSTEATED_LIEON
	XREF	SEATED_LIEON
	CLR.B	SEATED_LIEON(A4)
    ENDC	;wantSEATED_LIEON
    ENDC	;attribute_LIEONABLE
	
    IFD		Version2_FIX			;we must untangle the player
	XREF	QCARRIED
	PUSH_L	D0-D2/A0-A3
	CLR.W	D2				;target is the player
	DO	GETRELN				;->A1
10$
	MOVE.W	(A1)+,D0			;fetch entry.
	BEQ	90$				;done them all.
	GETINFO
	TST_WORNBYPLAYER			;clothing is separate.
	BNE.S	20$				;consider this (incase).
	CALL	QCARRIED			;do you really have it?
	BNE.S	10$				;no, trash this item.
20$
	MOVE.W	D0,D1				;save object

      IFD	wantMovePlayerDoesFIXSYS
	CLR.W	D5				;quiet please
	DO	FIXSYS
21$
	MOVE.W	(A3)+,D0			;fixed item
	BEQ.S	10$				;no more left
	GETINFO
	CMP.W	D0,D1				;the carried item
	BEQ.S	25$
	MOVE.W	12(A0),D0			;non carried item
	AND.W	#$3FFF,D0			;item to which it's fixed
	CMP.W	D0,D1				;the carried item?
	BNE.S	21$
	MOVE.W	-2(A1),D0			;the non carried item
	CALL	QCARRIED			;are we carrying it after all?
	BEQ.S	21$				;eq=>carried so alright
	BTST	#7,12(A0)			;permanent?
	BNE	23$
22$
	CLR.W	12(A0)				;untie items
	BRA.S	21$
23$
	EXG	D1,D0				;set up data
	GETINFO
	BRA	35$				;to drop permanent
25$
	MOVE.W	12(A0),D0			;carried item
	BEQ.S	21$				;not fixed to something
	AND.W	#$3FFF,D0			;item to which it's fixed
	CALL	QCARRIED			;fixed to carried item so ok
	BEQ.S	21$
	BTST	#7,12(A0)			;permanant?
	BEQ.S	22$
      ENDC	;wantMovePlayerDoesFIXSYS

      IFND	wantMovePlayerDoesFIXSYS
	MOVE.W	12(A0),D0			;tied to something?
	BEQ.S	10$				;no, then we are ok.
	BMI.S	30$				;permanent fixture?
	AND.W	#$3fff,D0			;bit 14 is not defined.
	CALL	QCARRIED			;is that item carried?
	BEQ.S	10$				;then it can stay.
	CLR.W	12(A0)				;else untie old item, assume
						;things dont fall apart.
	BRA.S	10$				;and look for anymore.
30$
	; you were carring an item tied as a permanent fixture to
	; some other body.
	AND.W	#$3fff,d0			;lose the flag bits.
	CALL	QCARRIED			;are we carrying perm object?
	BEQ.S	10$				;yes, then ok (ish).
	
      ENDC	;!wantMovePlayerDoesFIXSYS

	; the permanent object is not being carried, we cant just let the
	; player take it. so put it in the room before moving the player
	; and leave it perm. fixed.
	; if the item it is permanently fixed to is a surface put it on there.


	EXG	D0,D1				;d1= item fixed to, d0=our item
35$
	DO	FIXCONT				;might be in something?
	EXG	D0,D1				;swap again.
	MOVE.L	A0,-(A7)			;save data for our obj (d1)
	GETINFO					;a0= data for fixed item.
	TST_SITTABLE				;has a surface?
	PULL_L	A0				;restore data ptr.
	BNE.S	40$				;yes, put d1 on d0.
	MOVE.W	ROOM(A4),8(A0)			;else, drop the object.
	CLR.W	6(A0)				;and locate it simply in room.
	BRA	10$				;and look for other nasties.
40$
	MOVE.W	D0,8(A0)			;set d1 to be on d0
	MOVE.B	#1,6(A0)			;related to it.
	BRA	10$				;look for more.
90$
	PULL_L	D0-D2/A0-A3
    ENDC	;Version2_FIX
	
	MOVE.W	D1,ROOM(A4)			;actually move him

    IFNE	GENERIC

	XREF	PromptALL_IN_ROOM_EVENT
	CALL	PromptALL_IN_ROOM_EVENT
    
    ENDC

    IFD		wantWindowsNotifyCurrentRoom
	XREF	RelBuf,WindowsNotify,WindowsNotifyExits	
	XREF	ROOM,HasPicture

	PUSH_L	D0/A0				;save vars
	LEA	RelBuf+2(A4),A0			;skip bytes for size
	MOVE.B	#NotifyCurrentRoom,(A0)+	;code id.
	MOVE.L	A0,-(A7)			;push dest buffer.
	MOVE.W	D1,-(A7)			;the room number.
	CALL	WindowsNotifyExits		;fill buffer with exit data
	ADDQ.L	#6,A7				;level stack.
	MOVEQ	#0,D0				;zero extend.
	MOVE.B	1(A0),D0			;fetch n_exits
	ADDQ.B	#1,D0				;n_exits + 1
	ASL.W	#1,D0				;2*(n_exits + 1) = size.
	MOVE.W	ROOM(A4),-(A7)
	MOVE.B	D1,ROOM+1(A4)			;hack the room for pictures
	CALL	HasPicture			;EQ => no picture.
	SNE	0(A0,D0)			;set nonzero if picture.
	MOVE.W	(A7)+,ROOM(A4)			;restore old room.
	ADDQ.W	#2,D0				;+1 for id code. +1 picture
	MOVE.W	D0,-(A7)			;push size.
	CALL	WindowsNotify			;call front end.
	ADDQ.L	#2,A7				;level
	PULL_L	D0/A0
    ENDC	;wantWindowsNotifyCurrentRoom

	RET

*------------------------------------------

	END
